0000-                  7
0000-                  8           .include z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TF1        .equ $80
0040-            I   156       TCR_TF0        .equ $40
0020-            I   157       TCR_TE1        .equ $20
0010-            I   158       TCR_TE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0000-            I   208
0000-            I   209       ; Refresh
0000-            I   210       ; ---------------------------------------------------------------------------
0000-            I   211
0000-            I   212       ; Refresh Control Register (RCR: 36H)
0036-            I   213       RCR            .equ $36
0080-            I   214       RCR_REFE       .equ $80
0040-            I   215       RCR_REFW       .equ $40
0002-            I   216       RCR_CYC1       .equ $02
0001-            I   217       RCR_CYC0       .equ $01
0000-            I   218
0000-            I   219       ; MMU
0000-            I   220       ; ---------------------------------------------------------------------------
0000-            I   221
0000-            I   222       ; MMU Common Base Register (CBR: 38H)
0038-            I   223       CBR            .equ $38
0000-            I   224       ; MMU Bank Base Register (BBR: 39H)
0039-            I   225       BBR            .equ $39
0000-            I   226       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   227       CBAR           .equ $3A
0000-            I   228       ; I/O
0000-            I   229       ; ---------------------------------------------------------------------------
0000-            I   230
0000-            I   231       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   232       OMCR           .equ $3E
0000-            I   233
0080-            I   234       OMCR_M1E       .equ $80
0040-            I   235       OMCR_M1TE      .equ $40
0000-            I   236       ;OMCR_M1E       .equ $20
0000-            I   237
0000-            I   238       ; I/O Control Register (ICR: 3FH)
003F-            I   239       ICR            .equ $3F
0000-            I   240
0080-            I   241       ICR_IOA7       .equ $80
0040-            I   242       ICR_IOA6       .equ $40
0020-            I   243       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp reset        ; RESET
0003-                 12
0038-                 13           .org $0038
0038-C3 E7 01         14 (  9)     jp int_noop    ; INT0
003B-                 15
0066-                 16           .org $0066
0066-C3 E7 01         17 (  9)     jp int_noop    ; NMI
0069-                 18
0069-                 19       ; interrupt vector table
0080-                 20           .org $0080
0080-E7 01            21           .dw int_noop    ; INT1
0082-E7 01            22           .dw int_noop    ; INT2
0084-E7 01            23           .dw int_noop    ; PRT0
0086-E7 01            24           .dw int_noop    ; PRT1
0088-E7 01            25           .dw int_noop    ; DMA0
008A-E7 01            26           .dw int_noop    ; DMA1
008C-E7 01            27           .dw int_noop    ; CSIO
008E-8F 01            28           .dw int_asci0   ; ASCI0
0090-E7 01            29           .dw int_noop    ; ASCI1
0092-                 30
0100-                 31           .org $0100
0100-                 32       reset:
0100-                 33
0100-F3               34 (  3)     di ; disable interrupts
0101-                 35
0101-                 36           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-3E 80            37 (  6)     ld a,CMR_X2
0103-ED 39 1E         38 ( 13)     out0 (CMR),a
0106-                 39
0106-                 40           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0106-3E 80            41 (  6)     ld a,CCR_CD
0108-ED 39 1F         42 ( 13)     out0 (CCR),a
010B-                 43
010B-3E 00            44 (  6)     ld  a,0
010D-ED 39 36         45 ( 13)     out0 (RCR),a    ; Refresh disable
0110-                 46
0110-                 47           ; MMU
0110-                 48           ; $0000-$0FFF = ROM ( $00000 - $00FFF )
0110-                 49           ; $1000-$FFFF = RAM ( $80000 - $8EFFF )
0110-3E 11            50 (  6)     ld a,$11 ; Common Area 1 = Bank Area 1 = 4Kb
0112-ED 39 3A         51 ( 13)     out0 (CBAR),a
0115-3E 80            52 (  6)     ld a,$80 ; Common Area Base = $80000
0117-ED 39 38         53 ( 13)     out0 (CBR),a
011A-                 54
011A-                 55           ; Stack pointer = $10FF
011A-31 FF 10         56 (  9)     ld sp,$10FF
011D-                 57
011D-CD 45 01         58 ( 16)     call asci0_init
0120-                 59
0120-                 60           ; setup interupts
0120-ED 56            61 (  6)     im 1    ; interrupt mode 1
0122-3E 00            62 (  6)     ld a,0  ; interrupts high order byte : 00H
0124-ED 47            63 (  6)     ld i,a
0126-3E 80            64 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
0128-ED 39 33         65 ( 13)     out0 (IL),a
012B-                 66
012B-FB               67 (  3)     ei      ; enable interrupts
012C-                 68
012C-                 69       main:
012C-21 E9 01         70 (  9)     ld hl,str_welcome ; show welcome message
012F-CD 6F 01         71 ( 16)     call asci0_puts
0132-                 72
0132-                 73       prompt:
0132-21 0C 02         74 (  9)     ld hl,str_prompt ; show prompt
0135-CD 6F 01         75 ( 16)     call asci0_puts
0138-                 76
0138-                 77       waitcommand:
0138-CD C5 01         78 ( 16)     call asci0_waitc
013B-CD CD 01         79 ( 16)     call asci0_getc
013E-4F               80 (  4)     ld c,a
013F-CD 82 01         81 ( 16)     call asci0_putc
0142-                 82
0142-C3 38 01         83 (  9)     jp waitcommand
0145-                 84
0145-                 85       ; initialize asci0
0145-                 86       asci0_init:
0145-                 87
0145-                 88           ; RE : Receiver Enable
0145-                 89           ; TE : Transmitter Enable
0145-                 90           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
0145-3E 64            91 (  6)     ld a,CNTLA0_RE|CNTLA0_TE|CNTLA0_MOD2
0147-ED 39 00         92 ( 13)     out0 (CNTLA0),a
014A-                 93
014A-                 94           ; DR=0
014A-3E 00            95 (  6)     ld a,0
014C-ED 39 02         96 ( 13)     out0 (CNTLB0),a
014F-                 97
014F-                 98           ; BRG0 : Enable 16 bit BRG counter
014F-                 99           ; X1 ( + DR=0) : Clock mode = /1
014F-3E 18           100 (  6)     ld a,ASEXT0_BRG0|ASEXT0_X1
0151-ED 39 12        101 ( 13)     out0 (ASEXT0),a
0154-                102
0154-                103           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
0154-                104           ; TC = fphi/(2*baud rate*clock mode) - 2
0154-                105           ; TC = 32000000/(2*9600*1) - 2
0154-3E 81           106 (  6)     ld a,$81
0156-ED 39 1A        107 ( 13)     out0 (ASTC0L),a
0159-3E 06           108 (  6)     ld a,$06
015B-ED 39 1B        109 ( 13)     out0 (ASTC0H),a
015E-                110
015E-                111           ; RIE : enable Rx Interrupt
015E-3E 08           112 (  6)     ld a,STAT0_RIE
0160-ED 39 04        113 ( 13)     out0 (STAT0),a
0163-                114
0163-AF              115 (  4)     xor a                  ; init RX buffer
0164-32 82 11        116 ( 13)     ld (rx0_buffer_cpt),a
0167-21 00 11        117 (  9)     ld hl,rx0_buffer
016A-2B              118 (  4)     dec hl
016B-22 80 11        119 ( 20)     ld (rx0_buffer_ptr),hl
016E-                120
016E-C9              121 (  9)     ret
016F-                122
016F-                123       ; put a string on asci0
016F-                124       ; input : (hl) = address of null terminated string
016F-                125       asci0_puts:
016F-C5              126 ( 11)     push bc
0170-E5              127 ( 11)     push hl
0171-F5              128 ( 11)     push af
0172-                129
0172-                130       asci0_puts_loop:
0172-7E              131 (  6)     ld a,(hl)
0173-F6 00           132 (  6)     or 0
0175-28 07           133 ( 6+)     jr z,asci0_puts_exit
0177-4F              134 (  4)     ld c,a
0178-CD 82 01        135 ( 16)     call asci0_putc
017B-23              136 (  4)     inc hl
017C-18 F4           137 (  8)     jr asci0_puts_loop
017E-                138
017E-                139       asci0_puts_exit:
017E-F1              140 (  9)     pop af
017F-E1              141 (  9)     pop hl
0180-C1              142 (  9)     pop bc
0181-C9              143 (  9)     ret
0182-                144
0182-                145       ; put a char on asci0
0182-                146       ; input : c = char ascii code
0182-                147       asci0_putc:
0182-F5              148 ( 11)     push af
0183-                149
0183-                150       asci0_putc_wait:  ; wait for asci0 TX ready
0183-ED 38 04        151 ( 12)     in0 a,(STAT0) ; TDRE=1 -> empty
0186-E6 02           152 (  6)     and STAT0_TDRE
0188-28 F9           153 ( 6+)     jr Z,asci0_putc_wait
018A-                154
018A-ED 09 06        155 ( 13)     out0 (TDR0),c ; output the char to asci0
018D-                156
018D-F1              157 (  9)     pop af
018E-C9              158 (  9)     ret
018F-                159
018F-                160       int_asci0:
018F-F5              161 ( 11)     push af
0190-C5              162 ( 11)     push bc
0191-E5              163 ( 11)     push hl
0192-                164
0192-                165       int_asci0_test:
0192-ED 38 04        166 ( 12)     in0 a,(STAT0)                ; check if there is a char in the FIFO
0195-ED 64 80        167 (  9)     tst STAT0_RDRF
0198-28 26           168 ( 6+)     jr Z,int_asci0_exit
019A-                169
019A-                170           ; check for error
019A-E6 70           171 (  6)     and STAT0_OVRN|STAT0_PE|STAT0_FE
019C-28 0A           172 ( 6+)     jr Z,int_asci0_ok
019E-                173
019E-ED 38 00        174 ( 12)     in0 a,(CNTLA0)           ; clear error
01A1-E6 F7           175 (  6)     and CNTLA0_EFR!$FF
01A3-ED 39 00        176 ( 13)     out0 (CNTLA0),a
01A6-18 18           177 (  8)     jr int_asci0_exit                     ; exit
01A8-                178
01A8-                179       int_asci0_ok:
01A8-ED 08 08        180 ( 12)     in0 c,(RDR0)
01AB-                181
01AB-3A 82 11        182 ( 12)     ld a,(rx0_buffer_cpt)
01AE-FE 7F           183 (  6)     cp RX_BUFFER_SIZE
01B0-28 0E           184 ( 6+)     jr Z,int_asci0_exit
01B2-                185
01B2-3C              186 (  4)     inc a
01B3-32 82 11        187 ( 13)     ld (rx0_buffer_cpt),a
01B6-                188
01B6-2A 80 11        189 ( 15)     ld hl,(rx0_buffer_ptr)
01B9-23              190 (  4)     inc hl
01BA-22 80 11        191 ( 20)     ld (rx0_buffer_ptr),hl
01BD-                192
01BD-71              193 (  7)     ld (hl),c
01BE-                194
01BE-18 D2           195 (  8)     jr int_asci0_test           ; is there more characters ?
01C0-                196
01C0-                197       int_asci0_exit:
01C0-E1              198 (  9)     pop hl
01C1-C1              199 (  9)     pop bc
01C2-F1              200 (  9)     pop af
01C3-FB              201 (  3)     ei
01C4-C9              202 (  9)     ret
01C5-                203
01C5-                204       asci0_waitc:
01C5-                205
01C5-3A 82 11        206 ( 12)     ld a,(rx0_buffer_cpt)
01C8-FE 00           207 (  6)     cp 0
01CA-28 F9           208 ( 6+)     jr Z,asci0_waitc
01CC-C9              209 (  9)     ret
01CD-                210
01CD-                211       asci0_getc:
01CD-C5              212 ( 11)     push bc
01CE-E5              213 ( 11)     push hl
01CF-F3              214 (  3)     di
01D0-3A 82 11        215 ( 12)     ld a,(rx0_buffer_cpt)   ; get  buffer counter
01D3-FE 00           216 (  6)     cp 0                    ; if 0 : nothing to get
01D5-28 0D           217 ( 6+)     jr Z,asci0_getc_exit    ; exit
01D7-                218
01D7-3D              219 (  4)     dec a
01D8-32 82 11        220 ( 13)     ld (rx0_buffer_cpt),a
01DB-2A 80 11        221 ( 15)     ld hl,(rx0_buffer_ptr)
01DE-7E              222 (  6)     ld a,(hl)
01DF-                223
01DF-2B              224 (  4)     dec hl
01E0-22 80 11        225 ( 20)     ld (rx0_buffer_ptr),hl
01E3-FB              226 (  3)     ei
01E4-                227       asci0_getc_exit:
01E4-E1              228 (  9)     pop hl
01E5-C1              229 (  9)     pop bc
01E6-C9              230 (  9)     ret
01E7-                231
01E7-                232
01E7-                233       int_noop:
01E7-ED 4D           234 (12+)     reti
01E9-                235
01E9-                236
01E9-1B 5B 32 4A 
     1B 5B 48 5A 
     31 38 30 20 
     43 50 55 20 
     2D 20 4D 6F 
     6E 69 74 6F 
     72 20 56 30 
     2E 31 0D 0A 
     0D 0A 00        237       str_welcome:    .DB $1B,"[2J",$1B,"[H","Z180 CPU - Monitor V0.1",13,10,13,10,0
020C-3F 20 00        238       str_prompt:     .DB "? ",0
020F-                239
1100-                240           .org $1100
1100-                241
007F-                242       RX_BUFFER_SIZE: .equ 127
1100-                243
1100-                244       rx0_buffer:     .bs RX_BUFFER_SIZE+1
1180-                245       rx0_buffer_ptr: .bs 2
1182-                246       rx0_buffer_cpt: .bs 2
