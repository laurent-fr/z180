0000-                  7
0000-                  8           .include z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TF1        .equ $80
0040-            I   156       TCR_TF0        .equ $40
0020-            I   157       TCR_TE1        .equ $20
0010-            I   158       TCR_TE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0000-            I   208
0000-            I   209       ; Refresh
0000-            I   210       ; ---------------------------------------------------------------------------
0000-            I   211
0000-            I   212       ; Refresh Control Register (RCR: 36H)
0036-            I   213       RCR            .equ $36
0080-            I   214       RCR_REFE       .equ $80
0040-            I   215       RCR_REFW       .equ $40
0002-            I   216       RCR_CYC1       .equ $02
0001-            I   217       RCR_CYC0       .equ $01
0000-            I   218
0000-            I   219       ; MMU
0000-            I   220       ; ---------------------------------------------------------------------------
0000-            I   221
0000-            I   222       ; MMU Common Base Register (CBR: 38H)
0038-            I   223       CBR            .equ $38
0000-            I   224       ; MMU Bank Base Register (BBR: 39H)
0039-            I   225       BBR            .equ $39
0000-            I   226       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   227       CBAR           .equ $3A
0000-            I   228       ; I/O
0000-            I   229       ; ---------------------------------------------------------------------------
0000-            I   230
0000-            I   231       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   232       OMCR           .equ $3E
0000-            I   233
0080-            I   234       OMCR_M1E       .equ $80
0040-            I   235       OMCR_M1TE      .equ $40
0000-            I   236       ;OMCR_M1E       .equ $20
0000-            I   237
0000-            I   238       ; I/O Control Register (ICR: 3FH)
003F-            I   239       ICR            .equ $3F
0000-            I   240
0080-            I   241       ICR_IOA7       .equ $80
0040-            I   242       ICR_IOA6       .equ $40
0020-            I   243       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp mreset        ; RESET
0003-                 12
0003-                 13       rst08:
0008-                 14           .org $0008
0008-C3 FE 01         15 (  9)     jp asci1_putc
000B-                 16
000B-                 17       rst10:
0010-                 18           .org $0010
0010-C3 99 02         19 (  9)     jp asci1_getc
0013-                 20
0013-                 21       rst18:
0018-                 22           .org $0018
0018-3A 06 22         23 ( 12)     ld a,(rx1_buffer_cpt)
001B-FE 00            24 (  6)     cp 0
001D-C9               25 (  9)     ret
001E-                 26
001E-                 27
0038-                 28           .org $0038
0038-C3 B8 02         29 (  9)     jp int_noop    ; INT0
003B-                 30
0066-                 31           .org $0066
0066-C3 B8 02         32 (  9)     jp int_noop    ; NMI
0069-                 33
0069-                 34       ; interrupt vector table
0080-                 35           .org $0080
0080-B8 02            36           .dw int_noop    ; INT1
0082-B8 02            37           .dw int_noop    ; INT2
0084-B8 02            38           .dw int_noop    ; PRT0
0086-B8 02            39           .dw int_noop    ; PRT1
0088-B8 02            40           .dw int_noop    ; DMA0
008A-B8 02            41           .dw int_noop    ; DMA1
008C-B8 02            42           .dw int_noop    ; CSIO
008E-0B 02            43           .dw int_asci0   ; ASCI0
0090-44 02            44           .dw int_asci1    ; ASCI1
0092-                 45
0100-                 46           .org $0100
0100-                 47       mreset:
0100-                 48
0100-F3               49 (  3)     di ; disable interrupts
0101-                 50
0101-                 51           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-                 52           ; ld a,CMR_X2
0101-                 53           ; out0 (CMR),a
0101-                 54
0101-                 55           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0101-                 56           ; ld a,CCR_CD
0101-                 57           ; out0 (CCR),a
0101-                 58
0101-3E 00            59 (  6)     ld  a,0
0103-ED 39 36         60 ( 13)     out0 (RCR),a    ; Refresh disable
0106-                 61
0106-                 62           ; MMU
0106-                 63           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0106-                 64           ; $2000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0106-                 65           ; $0000-$1FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0106-                 66
0106-3E F2            67 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0108-ED 39 3A         68 ( 13)     out0 (CBAR),a
010B-3E 11            69 (  6)     ld a,$11 ; Common Area Base = $20000
010D-ED 39 38         70 ( 13)     out0 (CBR),a
0110-3E 7E            71 (  6)     ld a,$7E ; Bank Area Base = $80000
0112-ED 39 39         72 ( 13)     out0 (BBR),a
0115-                 73
0115-                 74           ; Stack pointer = $10FF
0115-31 FF 20         75 (  9)     ld sp,$20FF
0118-                 76
0118-CD 7D 01         77 ( 16)     call asci0_init
011B-CD A7 01         78 ( 16)     call asci1_init
011E-                 79
011E-                 80           ; setup interupts
011E-ED 56            81 (  6)     im 1    ; interrupt mode 1
0120-3E 00            82 (  6)     ld a,0  ; interrupts high order byte : 00H
0122-ED 47            83 (  6)     ld i,a
0124-3E 80            84 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
0126-ED 39 33         85 ( 13)     out0 (IL),a
0129-                 86
0129-FB               87 (  3)     ei      ; enable interrupts
012A-                 88
012A-                 89       main:
012A-3E 42            90 (  6)     ld a,'B'
012C-CD FE 01         91 ( 16)     call asci1_putc
012F-21 BA 02         92 (  9)     ld hl,str_welcome ; show welcome message
0132-CD E1 01         93 ( 16)     call asci1_puts
0135-                 94
0135-                 95           ; TEST VDU
0135-                 96           ;ld hl,$F000
0135-                 97           ;ld a,$55
0135-                 98           ;testvdu:
0135-                 99           ;ld (hl),a
0135-                100           ;jr testvdu
0135-                101           ;jp main
0135-                102
0135-                103           ; BASIC
0135-                104           ;jp $0300
0135-                105
0135-                106       mprompt:
0135-21 DD 02        107 (  9)     ld hl,str_prompt ; show prompt
0138-CD D1 01        108 ( 16)     call asci0_puts
013B-                109
013B-                110       waitcommand:
013B-                111          ; call asci0_getc
013B-                112          ; ld c,a
013B-                113          ; call asci0_putc
013B-CD 0B 02        114 ( 16)     call int_asci0
013E-C3 3B 01        115 (  9)     jp waitcommand
0141-                116
0141-                117
0141-                118       ; -----------------------------------------------------------------
0141-                119
0141-                120       ; Load HEX file routine
0141-                121       hex_load:
0141-                122
0141-                123       hex_load_new_line:
0141-CD 7A 02        124 ( 16)     call asci0_getc
0144-FE 3A           125 (  6)     cp ':'                  ; start of line ':'
0146-20 20           126 ( 6+)     jr NZ,hex_load_err
0148-CD 6F 01        127 ( 16)     call get_byte           ; first byte = number of bytes per line
014B-47              128 (  4)     ld b,a
014C-CD 6F 01        129 ( 16)     call get_byte           ; 2 bytes address
014F-67              130 (  4)     ld h,a
0150-CD 6F 01        131 ( 16)     call get_byte
0153-6F              132 (  4)     ld l,a
0154-CD 6F 01        133 ( 16)     call get_byte           ; line type
0157-FE 00           134 (  6)     cp 0
0159-20 0D           135 ( 6+)     jr NZ,hex_load_end
015B-                136
015B-0E 00           137 (  6)     ld c,0          ; checksum
015D-                138
015D-                139       hex_line_bytes:
015D-CD 6F 01        140 ( 16)     call get_byte
0160-77              141 (  7)     ld (hl),a
0161-23              142 (  4)     inc hl
0162-81              143 (  4)     add a,c
0163-4F              144 (  4)     ld c,a
0164-10 F7           145 ( 7+)     djnz hex_line_bytes
0166-                146
0166-                147
0166-ED 44           148 (  6)     neg c
0168-                149
0168-                150       hex_load_end:
0168-                151
0168-                152       hex_load_err:
0168-21 E0 02        153 (  9)     ld hl,str_error
016B-CD D1 01        154 ( 16)     call asci0_puts
016E-C9              155 (  9)     ret
016F-                156
016F-                157       get_byte:
016F-CD 7A 02        158 ( 16)     call asci0_getc
0172-51              159 (  4)     ld d,c
0173-CD 7A 02        160 ( 16)     call asci0_getc
0176-59              161 (  4)     ld e,c
0177-CD 7B 01        162 ( 16)     call ascii_to_byte
017A-C9              163 (  9)     ret
017B-                164
017B-                165       ; in : 2 ascii chars in de
017B-                166       ; out : a = byte value
017B-                167       ascii_to_byte:
017B-7A              168 (  4)     ld a,d
017C-                169
017C-C9              170 (  9)     ret
017D-                171
017D-                172       ; -----------------------------------------------------------------
017D-                173
017D-                174       ; initialize asci0
017D-                175       asci0_init:
017D-                176
017D-                177           ; RE : Receiver Enable
017D-                178           ; TE : Transmitter Enable
017D-                179           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
017D-3E 64           180 (  6)     ld a,CNTLA0_RE|CNTLA0_TE|CNTLA0_MOD2
017F-ED 39 00        181 ( 13)     out0 (CNTLA0),a
0182-                182
0182-                183           ; DR=0
0182-3E 00           184 (  6)     ld a,0
0184-ED 39 02        185 ( 13)     out0 (CNTLB0),a
0187-                186
0187-                187           ; BRG0 : Enable 16 bit BRG counter
0187-                188           ; X1 ( + DR=0) : Clock mode = /1
0187-3E 18           189 (  6)     ld a,ASEXT0_BRG0|ASEXT0_X1
0189-ED 39 12        190 ( 13)     out0 (ASEXT0),a
018C-                191
018C-                192           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
018C-                193           ; TC = fphi/(2*baud rate*clock mode) - 2
018C-                194           ; TC = 32000000/(2*9600*1) - 2
018C-3E 81           195 (  6)     ld a,$81
018E-ED 39 1A        196 ( 13)     out0 (ASTC0L),a
0191-3E 06           197 (  6)     ld a,$06
0193-ED 39 1B        198 ( 13)     out0 (ASTC0H),a
0196-                199
0196-                200           ; RIE : enable Rx Interrupt
0196-3E 08           201 (  6)     ld a,STAT0_RIE
0198-ED 39 04        202 ( 13)     out0 (STAT0),a
019B-                203
019B-AF              204 (  4)     xor a                  ; init RX buffer
019C-32 82 21        205 ( 13)     ld (rx0_buffer_cpt),a
019F-21 00 21        206 (  9)     ld hl,rx0_buffer
01A2-2B              207 (  4)     dec hl
01A3-22 80 21        208 ( 20)     ld (rx0_buffer_ptr),hl
01A6-                209
01A6-C9              210 (  9)     ret
01A7-                211
01A7-                212       ; initialize asci1
01A7-                213       asci1_init:
01A7-                214
01A7-                215           ; RE : Receiver Enable
01A7-                216           ; TE : Transmitter Enable
01A7-                217           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
01A7-3E 64           218 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
01A9-ED 39 01        219 ( 13)     out0 (CNTLA1),a
01AC-                220
01AC-                221           ; DR=0
01AC-3E 00           222 (  6)     ld a,0
01AE-ED 39 03        223 ( 13)     out0 (CNTLB1),a
01B1-                224
01B1-                225           ; BRG0 : Enable 16 bit BRG counter
01B1-                226           ; X1 ( + DR=0) : Clock mode = /1
01B1-3E 18           227 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
01B3-ED 39 13        228 ( 13)     out0 (ASEXT1),a
01B6-                229
01B6-                230           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
01B6-                231           ; TC = fphi/(2*baud rate*clock mode) - 2
01B6-                232           ; TC = 32000000/(2*9600*1) - 2
01B6-3E 81           233 (  6)     ld a,$81
01B8-ED 39 1C        234 ( 13)     out0 (ASTC1L),a
01BB-3E 06           235 (  6)     ld a,$06
01BD-ED 39 1D        236 ( 13)     out0 (ASTC1H),a
01C0-                237
01C0-                238           ; RIE : enable Rx Interrupt
01C0-3E 08           239 (  6)     ld a,STAT1_RIE
01C2-ED 39 05        240 ( 13)     out0 (STAT1),a
01C5-                241
01C5-AF              242 (  4)     xor a                  ; init RX buffer
01C6-32 82 21        243 ( 13)     ld (rx0_buffer_cpt),a
01C9-21 00 21        244 (  9)     ld hl,rx0_buffer
01CC-2B              245 (  4)     dec hl
01CD-22 80 21        246 ( 20)     ld (rx0_buffer_ptr),hl
01D0-                247
01D0-C9              248 (  9)     ret
01D1-                249
01D1-                250       ; put a string on asci0
01D1-                251       ; input : (hl) = address of null terminated string
01D1-                252       asci0_puts:
01D1-E5              253 ( 11)     push hl
01D2-F5              254 ( 11)     push af
01D3-                255
01D3-                256       asci0_puts_loop:
01D3-7E              257 (  6)     ld a,(hl)
01D4-F6 00           258 (  6)     or 0
01D6-28 06           259 ( 6+)     jr z,asci0_puts_exit
01D8-CD F1 01        260 ( 16)     call asci0_putc
01DB-23              261 (  4)     inc hl
01DC-18 F5           262 (  8)     jr asci0_puts_loop
01DE-                263
01DE-                264       asci0_puts_exit:
01DE-F1              265 (  9)     pop af
01DF-E1              266 (  9)     pop hl
01E0-C9              267 (  9)     ret
01E1-                268
01E1-                269       ; put a string on asci1
01E1-                270       ; input : (hl) = address of null terminated string
01E1-                271       asci1_puts:
01E1-E5              272 ( 11)     push hl
01E2-F5              273 ( 11)     push af
01E3-                274
01E3-                275       asci1_puts_loop:
01E3-7E              276 (  6)     ld a,(hl)
01E4-F6 00           277 (  6)     or 0
01E6-28 06           278 ( 6+)     jr z,asci1_puts_exit
01E8-CD FE 01        279 ( 16)     call asci1_putc
01EB-23              280 (  4)     inc hl
01EC-18 F5           281 (  8)     jr asci1_puts_loop
01EE-                282
01EE-                283       asci1_puts_exit:
01EE-F1              284 (  9)     pop af
01EF-E1              285 (  9)     pop hl
01F0-C9              286 (  9)     ret
01F1-                287
01F1-                288       ; put a char on asci0
01F1-                289       ; input : a = char ascii code
01F1-                290       asci0_putc:
01F1-F5              291 ( 11)     push af
01F2-                292       asci0_putc_wait:  ; wait for asci0 TX ready
01F2-                293
01F2-ED 38 04        294 ( 12)     in0 a,(STAT0) ; TDRE=1 -> empty
01F5-E6 02           295 (  6)     and STAT0_TDRE
01F7-28 F9           296 ( 6+)     jr Z,asci0_putc_wait
01F9-F1              297 (  9)     pop af
01FA-ED 39 06        298 ( 13)     out0 (TDR0),a ; output the char to asci0
01FD-                299
01FD-C9              300 (  9)     ret
01FE-                301
01FE-                302       ; put a char on asci1
01FE-                303       ; input : c = char ascii code
01FE-                304       asci1_putc:
01FE-F5              305 ( 11)     push af
01FF-                306
01FF-                307       asci1_putc_wait:  ; wait for asci0 TX ready
01FF-ED 38 05        308 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
0202-E6 02           309 (  6)     and STAT1_TDRE
0204-28 F9           310 ( 6+)     jr Z,asci1_putc_wait
0206-F1              311 (  9)     pop af
0207-ED 39 07        312 ( 13)     out0 (TDR1),a ; output the char to asci0
020A-                313
020A-                314
020A-C9              315 (  9)     ret
020B-                316
020B-                317       ; int asci0
020B-                318       int_asci0:
020B-F5              319 ( 11)     push af
020C-C5              320 ( 11)     push bc
020D-E5              321 ( 11)     push hl
020E-                322
020E-                323       int_asci0_test:
020E-ED 38 04        324 ( 12)     in0 a,(STAT0)                ; check if there is a char in the FIFO
0211-ED 64 80        325 (  9)     tst STAT0_RDRF
0214-28 29           326 ( 6+)     jr Z,int_asci0_exit
0216-                327
0216-ED 08 08        328 ( 12)     in0 c,(RDR0)
0219-                329
0219-                330           ; check for error
0219-E6 70           331 (  6)     and STAT0_OVRN|STAT0_PE|STAT0_FE
021B-28 0A           332 ( 6+)     jr Z,int_asci0_ok
021D-                333
021D-ED 38 00        334 ( 12)     in0 a,(CNTLA0)           ; clear error
0220-E6 F7           335 (  6)     and CNTLA0_EFR!$FF
0222-ED 39 00        336 ( 13)     out0 (CNTLA0),a
0225-18 E7           337 (  8)     jr int_asci0_test                    ; exit
0227-                338
0227-                339       int_asci0_ok:
0227-                340
0227-                341
0227-3A 82 21        342 ( 12)     ld a,(rx0_buffer_cpt)
022A-FE 7F           343 (  6)     cp RX_BUFFER_SIZE
022C-28 11           344 ( 6+)     jr Z,int_asci0_exit
022E-                345
022E-3C              346 (  4)     inc a
022F-32 82 21        347 ( 13)     ld (rx0_buffer_cpt),a
0232-                348
0232-2A 80 21        349 ( 15)     ld hl,(rx0_buffer_ptr)
0235-23              350 (  4)     inc hl
0236-22 80 21        351 ( 20)     ld (rx0_buffer_ptr),hl
0239-                352
0239-71              353 (  7)     ld (hl),c
023A-CD F1 01        354 ( 16)     call asci0_putc
023D-                355
023D-18 CF           356 (  8)     jr int_asci0_test           ; is there more characters ?
023F-                357
023F-                358       int_asci0_exit:
023F-E1              359 (  9)     pop hl
0240-C1              360 (  9)     pop bc
0241-F1              361 (  9)     pop af
0242-FB              362 (  3)     ei
0243-C9              363 (  9)     ret
0244-                364
0244-                365       ; int asci1
0244-                366       int_asci1:
0244-F5              367 ( 11)     push af
0245-C5              368 ( 11)     push bc
0246-E5              369 ( 11)     push hl
0247-                370
0247-                371       int_asci1_test:
0247-ED 38 05        372 ( 12)     in0 a,(STAT1)                ; check if there is a char in the FIFO
024A-ED 64 80        373 (  9)     tst STAT1_RDRF
024D-28 26           374 ( 6+)     jr Z,int_asci1_exit
024F-                375
024F-ED 08 09        376 ( 12)     in0 c,(RDR1)
0252-                377
0252-                378           ; check for error
0252-E6 70           379 (  6)     and STAT1_OVRN|STAT1_PE|STAT1_FE
0254-28 0A           380 ( 6+)     jr Z,int_asci1_ok
0256-                381
0256-ED 38 01        382 ( 12)     in0 a,(CNTLA1)           ; clear error
0259-E6 F7           383 (  6)     and CNTLA1_EFR!$FF
025B-ED 39 01        384 ( 13)     out0 (CNTLA1),a
025E-18 E7           385 (  8)     jr int_asci1_test                    ; exit
0260-                386
0260-                387       int_asci1_ok:
0260-                388
0260-3A 06 22        389 ( 12)     ld a,(rx1_buffer_cpt)
0263-FE 7F           390 (  6)     cp RX_BUFFER_SIZE
0265-28 0E           391 ( 6+)     jr Z,int_asci1_exit
0267-                392
0267-3C              393 (  4)     inc a
0268-32 06 22        394 ( 13)     ld (rx1_buffer_cpt),a
026B-                395
026B-2A 04 22        396 ( 15)     ld hl,(rx1_buffer_ptr)
026E-23              397 (  4)     inc hl
026F-22 04 22        398 ( 20)     ld (rx1_buffer_ptr),hl
0272-                399
0272-71              400 (  7)     ld (hl),c
0273-                401
0273-18 D2           402 (  8)     jr int_asci1_test           ; is there more characters ?
0275-                403
0275-                404       int_asci1_exit:
0275-E1              405 (  9)     pop hl
0276-C1              406 (  9)     pop bc
0277-F1              407 (  9)     pop af
0278-FB              408 (  3)     ei
0279-C9              409 (  9)     ret
027A-                410
027A-                411
027A-                412       asci0_getc:
027A-C5              413 ( 11)     push bc
027B-E5              414 ( 11)     push hl
027C-                415
027C-                416       asci0_getc_wait:
027C-3A 82 21        417 ( 12)     ld a,(rx0_buffer_cpt)
027F-FE 00           418 (  6)     cp 0
0281-28 F9           419 ( 6+)     jr Z,asci0_getc_wait
0283-                420
0283-3A 82 21        421 ( 12)     ld a,(rx0_buffer_cpt)   ; get  buffer counter
0286-FE 00           422 (  6)     cp 0                    ; if 0 : nothing to get
0288-28 0C           423 ( 6+)     jr Z,asci0_getc_exit    ; exit
028A-                424
028A-3D              425 (  4)     dec a
028B-32 82 21        426 ( 13)     ld (rx0_buffer_cpt),a
028E-2A 80 21        427 ( 15)     ld hl,(rx0_buffer_ptr)
0291-7E              428 (  6)     ld a,(hl)
0292-                429
0292-2B              430 (  4)     dec hl
0293-22 80 21        431 ( 20)     ld (rx0_buffer_ptr),hl
0296-                432
0296-                433       asci0_getc_exit:
0296-E1              434 (  9)     pop hl
0297-C1              435 (  9)     pop bc
0298-C9              436 (  9)     ret
0299-                437
0299-                438       asci1_getc:
0299-C5              439 ( 11)     push bc
029A-E5              440 ( 11)     push hl
029B-                441
029B-                442       asci1_getc_wait:
029B-3A 06 22        443 ( 12)     ld a,(rx1_buffer_cpt)
029E-FE 00           444 (  6)     cp 0
02A0-28 F9           445 ( 6+)     jr Z,asci1_getc_wait
02A2-                446
02A2-3A 06 22        447 ( 12)     ld a,(rx1_buffer_cpt)   ; get  buffer counter
02A5-FE 00           448 (  6)     cp 0                    ; if 0 : nothing to get
02A7-28 0C           449 ( 6+)     jr Z,asci1_getc_exit    ; exit
02A9-                450
02A9-3D              451 (  4)     dec a
02AA-32 06 22        452 ( 13)     ld (rx1_buffer_cpt),a
02AD-2A 04 22        453 ( 15)     ld hl,(rx1_buffer_ptr)
02B0-7E              454 (  6)     ld a,(hl)
02B1-                455
02B1-2B              456 (  4)     dec hl
02B2-22 04 22        457 ( 20)     ld (rx1_buffer_ptr),hl
02B5-                458
02B5-                459       asci1_getc_exit:
02B5-E1              460 (  9)     pop hl
02B6-C1              461 (  9)     pop bc
02B7-C9              462 (  9)     ret
02B8-                463
02B8-                464
02B8-                465
02B8-                466       int_noop:
02B8-ED 4D           467 (12+)     reti
02BA-                468
02BA-                469
02BA-1B 5B 32 4A 
     1B 5B 48 5A 
     31 38 30 20 
     43 50 55 20 
     2D 20 4D 6F 
     6E 69 74 6F 
     72 20 56 30 
     2E 31 0D 0A 
     0D 0A 00        470       str_welcome:    .db $1B,"[2J",$1B,"[H","Z180 CPU - Monitor V0.1",13,10,13,10,0
02DD-3F 20 00        471       str_prompt:     .db "? ",0
02E0-0D 0A 45 72 
     72 2E 0D 0A 
     00              472       str_error:       .db 13,10,"Err.",13,10,0
02E9-                473
2100-                474           .org $2100
2100-                475
007F-                476       RX_BUFFER_SIZE: .equ 127
2100-                477
2100-                478       rx0_buffer:     .bs RX_BUFFER_SIZE+1
2180-                479       rx0_buffer_ptr: .bs 2
2182-                480       rx0_buffer_cpt: .bs 2
2184-                481       rx1_buffer:     .bs RX_BUFFER_SIZE+1
2204-                482       rx1_buffer_ptr: .bs 2
2206-                483       rx1_buffer_cpt: .bs 2
2208-                484
2208-                485
