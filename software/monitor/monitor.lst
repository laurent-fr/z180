0000-                  7
0000-                  8           .include z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TF1        .equ $80
0040-            I   156       TCR_TF0        .equ $40
0020-            I   157       TCR_TE1        .equ $20
0010-            I   158       TCR_TE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0000-            I   208
0000-            I   209       ; Refresh
0000-            I   210       ; ---------------------------------------------------------------------------
0000-            I   211
0000-            I   212       ; Refresh Control Register (RCR: 36H)
0036-            I   213       RCR            .equ $36
0080-            I   214       RCR_REFE       .equ $80
0040-            I   215       RCR_REFW       .equ $40
0002-            I   216       RCR_CYC1       .equ $02
0001-            I   217       RCR_CYC0       .equ $01
0000-            I   218
0000-            I   219       ; MMU
0000-            I   220       ; ---------------------------------------------------------------------------
0000-            I   221
0000-            I   222       ; MMU Common Base Register (CBR: 38H)
0038-            I   223       CBR            .equ $38
0000-            I   224       ; MMU Bank Base Register (BBR: 39H)
0039-            I   225       BBR            .equ $39
0000-            I   226       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   227       CBAR           .equ $3A
0000-            I   228       ; I/O
0000-            I   229       ; ---------------------------------------------------------------------------
0000-            I   230
0000-            I   231       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   232       OMCR           .equ $3E
0000-            I   233
0080-            I   234       OMCR_M1E       .equ $80
0040-            I   235       OMCR_M1TE      .equ $40
0000-            I   236       ;OMCR_M1E       .equ $20
0000-            I   237
0000-            I   238       ; I/O Control Register (ICR: 3FH)
003F-            I   239       ICR            .equ $3F
0000-            I   240
0080-            I   241       ICR_IOA7       .equ $80
0040-            I   242       ICR_IOA6       .equ $40
0020-            I   243       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp mreset        ; RESET
0003-                 12
0003-                 13       rst08:
0008-                 14           .org $0008
0008-C3 83 01         15 (  9)     jp vdu_putc_term
000B-                 16
000B-                 17       rst10:
0010-                 18           .org $0010
0010-C3 43 02         19 (  9)     jp asci1_getc
0013-                 20
0013-                 21       rst18:
0018-                 22           .org $0018
0018-3A 06 22         23 ( 12)     ld a,(rx1_buffer_cpt)
001B-FE 00            24 (  6)     cp 0
001D-C9               25 (  9)     ret
001E-                 26
001E-                 27
0038-                 28           .org $0038
0038-C3 62 02         29 (  9)     jp int_noop    ; INT0
003B-                 30
0066-                 31           .org $0066
0066-C3 62 02         32 (  9)     jp int_noop    ; NMI
0069-                 33
0069-                 34       ; interrupt vector table
0080-                 35           .org $0080
0080-62 02            36           .dw int_noop    ; INT1
0082-62 02            37           .dw int_noop    ; INT2
0084-62 02            38           .dw int_noop    ; PRT0
0086-62 02            39           .dw int_noop    ; PRT1
0088-62 02            40           .dw int_noop    ; DMA0
008A-62 02            41           .dw int_noop    ; DMA1
008C-62 02            42           .dw int_noop    ; CSIO
008E-62 02            43           .dw int_noop   ; ASCI0
0090-09 02            44           .dw int_asci1    ; ASCI1
0092-                 45
0100-                 46           .org $0100
0100-                 47       mreset:
0100-                 48
0100-F3               49 (  3)     di ; disable interrupts
0101-                 50
0101-                 51           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-                 52           ; ld a,CMR_X2
0101-                 53           ; out0 (CMR),a
0101-                 54
0101-                 55           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0101-                 56           ; ld a,CCR_CD
0101-                 57           ; out0 (CCR),a
0101-                 58
0101-3E 00            59 (  6)     ld  a,0
0103-ED 39 36         60 ( 13)     out0 (RCR),a    ; Refresh disable
0106-                 61
0106-                 62           ; MMU
0106-                 63           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0106-                 64           ; $2000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0106-                 65           ; $0000-$1FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0106-                 66
0106-3E F2            67 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0108-ED 39 3A         68 ( 13)     out0 (CBAR),a
010B-3E 11            69 (  6)     ld a,$11 ; Common Area Base = $20000
010D-ED 39 38         70 ( 13)     out0 (CBR),a
0110-3E 7E            71 (  6)     ld a,$7E ; Bank Area Base = $80000
0112-ED 39 39         72 ( 13)     out0 (BBR),a
0115-                 73
0115-                 74           ; Stack pointer = $10FF
0115-31 FF 20         75 (  9)     ld sp,$20FF
0118-                 76
0118-                 77           ;call asci0_init
0118-CD DF 01         78 ( 16)     call asci1_init
011B-                 79
011B-                 80           ; setup interupts
011B-ED 56            81 (  6)     im 1    ; interrupt mode 1
011D-3E 00            82 (  6)     ld a,0  ; interrupts high order byte : 00H
011F-ED 47            83 (  6)     ld i,a
0121-3E 80            84 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
0123-ED 39 33         85 ( 13)     out0 (IL),a
0126-                 86
0126-FB               87 (  3)     ei      ; enable interrupts
0127-                 88
0127-                 89       main:
0127-                 90
0127-3E 6B            91 (  6)     ld a,$6B
0129-32 F0 FF         92 ( 13)     ld (VDU_ATTR),a
012C-                 93
012C-CD 3E 01         94 ( 16)     call vdu_cls
012F-                 95
012F-                 96
012F-                 97       loop:
012F-                 98
012F-3A 06 22         99 ( 12)     ld a,(rx1_buffer_cpt)
0132-FE 00           100 (  6)     cp 0
0134-28 F9           101 ( 6+)     jr z,loop
0136-                102
0136-CD 43 02        103 ( 16)     call asci1_getc
0139-CD 83 01        104 ( 16)     call vdu_putc_term
013C-                105
013C-18 F1           106 (  8)     jr loop
013E-                107
013E-                108
013E-                109
F000-                110       VDU_RAM  .equ $F000
013E-                111
FFF0-                112       VDU_ATTR .equ $FFF0
FFF1-                113       VDU_X    .equ $FFF1
FFF2-                114       VDU_Y    .equ $FFF2
FFF4-                115       VDU_PTR  .equ $FFF4
013E-                116
013E-                117       vdu_cls:
013E-11 D0 07        118 (  9)     ld de,2000     ; number of chars
0141-21 00 F0        119 (  9)     ld hl,VDU_RAM    ; pointer to srart of ram
0144-F5              120 ( 11)     push af
0145-3A F0 FF        121 ( 12)     ld a,(VDU_ATTR)  ; get color attribute
0148-4F              122 (  4)     ld c,a
0149-F1              123 (  9)     pop af
014A-                124       vdu_cls_loop:
014A-36 20           125 (  9)     ld (hl),$20     ; space char.
014C-23              126 (  4)     inc hl
014D-71              127 (  7)     ld (hl),c       ; set color attribute
014E-23              128 (  4)     inc hl
014F-1B              129 (  4)     dec de          ; update chars counter
0150-7A              130 (  4)     ld a,d         ; check if zero
0151-B3              131 (  4)     or e
0152-C2 4A 01        132 ( 6+)     jp nz,vdu_cls_loop
0155-3E 00           133 (  6)     ld a,0          ; home cursor
0157-32 F1 FF        134 ( 13)     ld (VDU_X),a
015A-32 F2 FF        135 ( 13)     ld (VDU_Y),a
015D-11 00 F0        136 (  9)     ld de,VDU_RAM
0160-ED 53 F4 FF     137 ( 20)     ld (VDU_PTR),de
0164-C9              138 (  9)     ret
0165-                139
0165-                140       vdu_scroll:
0165-21 A0 F0        141 (  9)     ld hl,VDU_RAM+160
0168-11 00 F0        142 (  9)     ld de,VDU_RAM
016B-01 00 0F        143 (  9)     ld bc,4000-160
016E-                144       vdu_scroll_loop:
016E-ED A0           145 ( 12)     ldi
0170-EA 6E 01        146 ( 6+)     jp pe,vdu_scroll_loop
0173-                147
0173-06 50           148 (  6)     ld b,80
0175-3A F0 FF        149 ( 12)     ld a,(VDU_ATTR)
0178-4F              150 (  4)     ld c,a
0179-                151       vdu_scroll_loop_line25:
0179-3E 20           152 (  6)     ld a,' '
017B-12              153 (  7)     ld (de),a
017C-13              154 (  4)     inc de
017D-79              155 (  4)     ld a,c
017E-12              156 (  7)     ld (de),a
017F-13              157 (  4)     inc de
0180-10 F7           158 ( 7+)     djnz vdu_scroll_loop_line25
0182-C9              159 (  9)     ret
0183-                160
0183-                161       vdu_putc_term:
0183-C5              162 ( 11)     push bc
0184-D5              163 ( 11)     push de
0185-ED 5B F4 FF     164 ( 18)     ld de,(VDU_PTR)
0189-FE 0D           165 (  6)     cp 13
018B-20 05           166 ( 6+)     jr nz,vdu_putc_term_print
018D-CD B2 01        167 ( 16)     call vdu_next_line
0190-18 03           168 (  8)     jr vdu_putc_term_exit
0192-                169
0192-                170       vdu_putc_term_print:
0192-CD 9C 01        171 ( 16)     call vdu_putc
0195-                172
0195-                173       vdu_putc_term_exit:
0195-ED 53 F4 FF     174 ( 20)     ld (VDU_PTR),de
0199-D1              175 (  9)     pop de
019A-C1              176 (  9)     pop bc
019B-C9              177 (  9)     ret
019C-                178
019C-                179       vdu_putc:
019C-12              180 (  7)     ld (de),a           ; put char in a to current video memory location
019D-13              181 (  4)     inc de              ; go to attribute
019E-3A F0 FF        182 ( 12)     ld a,(VDU_ATTR)     ; fetch attribute from VDU_ATTR
01A1-12              183 (  7)     ld (de),a           ; write attribute to video memory
01A2-13              184 (  4)     inc de              ; go to next char
01A3-3A F1 FF        185 ( 12)     ld a,(VDU_X)        ; get X position
01A6-3C              186 (  4)     inc a               ; increment
01A7-32 F1 FF        187 ( 13)     ld (VDU_X),a
01AA-FE 50           188 (  6)     cp 80              ; next line ?
01AC-20 03           189 ( 6+)     jr nz,vdu_putc_exit
01AE-CD B2 01        190 ( 16)     call vdu_next_line
01B1-                191
01B1-                192       vdu_putc_exit:
01B1-C9              193 (  9)     ret
01B2-                194
01B2-                195       vdu_next_line:
01B2-3E 00           196 (  6)     ld a,0              ; reset X
01B4-32 F1 FF        197 ( 13)     ld (VDU_X),a
01B7-3A F2 FF        198 ( 12)     ld a,(VDU_Y)        ; increment Y
01BA-3C              199 (  4)     inc a
01BB-32 F2 FF        200 ( 13)     ld (VDU_Y),a
01BE-FE 19           201 (  6)     cp 25               ; bottom of the screen ?
01C0-20 0B           202 ( 6+)     jr nz,vdu_next_line_exit
01C2-CD 65 01        203 ( 16)     call vdu_scroll
01C5-3E 18           204 (  6)     ld a,24             ; set Y to 24
01C7-32 F2 FF        205 ( 13)     ld (VDU_Y),a
01CA-                206
01CA-11 00 FF        207 (  9)     ld de,VDU_RAM+3840   ; set de to start of 24th line
01CD-                208       vdu_next_line_exit:
01CD-C9              209 (  9)     ret
01CE-                210
01CE-                211
01CE-                212       vdu_puts:
01CE-E5              213 ( 11)     push hl
01CF-                214       vdu_puts_loop:
01CF-7E              215 (  6)     ld a,(hl)
01D0-F6 00           216 (  6)     or 0
01D2-28 06           217 ( 6+)     jr z,vdu_puts_exit
01D4-CD 9C 01        218 ( 16)     call vdu_putc
01D7-23              219 (  4)     inc hl
01D8-18 F5           220 (  8)     jr vdu_puts_loop
01DA-                221
01DA-                222       vdu_puts_exit:
01DA-E1              223 (  9)     pop hl
01DB-C9              224 (  9)     ret
01DC-                225
01DC-C3 00 03        226 (  9)     jp $0300
01DF-                227
01DF-                228
01DF-                229
01DF-                230
01DF-                231
01DF-                232       ; -----------------------------------------------------------------
01DF-                233
01DF-                234
01DF-                235       ; initialize asci1
01DF-                236       asci1_init:
01DF-                237
01DF-                238           ; RE : Receiver Enable
01DF-                239           ; TE : Transmitter Enable
01DF-                240           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
01DF-3E 64           241 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
01E1-ED 39 01        242 ( 13)     out0 (CNTLA1),a
01E4-                243
01E4-                244           ; DR=0
01E4-3E 00           245 (  6)     ld a,0
01E6-ED 39 03        246 ( 13)     out0 (CNTLB1),a
01E9-                247
01E9-                248           ; BRG0 : Enable 16 bit BRG counter
01E9-                249           ; X1 ( + DR=0) : Clock mode = /1
01E9-3E 18           250 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
01EB-ED 39 13        251 ( 13)     out0 (ASEXT1),a
01EE-                252
01EE-                253           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
01EE-                254           ; TC = fphi/(2*baud rate*clock mode) - 2
01EE-                255           ; TC = 32000000/(2*9600*1) - 2
01EE-3E 81           256 (  6)     ld a,$81
01F0-ED 39 1C        257 ( 13)     out0 (ASTC1L),a
01F3-3E 06           258 (  6)     ld a,$06
01F5-ED 39 1D        259 ( 13)     out0 (ASTC1H),a
01F8-                260
01F8-                261           ; RIE : enable Rx Interrupt
01F8-3E 08           262 (  6)     ld a,STAT1_RIE
01FA-ED 39 05        263 ( 13)     out0 (STAT1),a
01FD-                264
01FD-AF              265 (  4)     xor a                  ; init RX buffer
01FE-32 82 21        266 ( 13)     ld (rx0_buffer_cpt),a
0201-21 00 21        267 (  9)     ld hl,rx0_buffer
0204-2B              268 (  4)     dec hl
0205-22 80 21        269 ( 20)     ld (rx0_buffer_ptr),hl
0208-                270
0208-C9              271 (  9)     ret
0209-                272
0209-                273       ; int asci1
0209-                274       int_asci1:
0209-                275       di
0209-F5              276 ( 11)     push af
020A-C5              277 ( 11)     push bc
020B-E5              278 ( 11)     push hl
020C-                279
020C-                280       int_asci1_test:
020C-ED 38 05        281 ( 12)     in0 a,(STAT1)                ; check if there is a char in the FIFO
020F-ED 64 80        282 (  9)     tst STAT1_RDRF
0212-28 26           283 ( 6+)     jr Z,int_asci1_exit
0214-                284
0214-ED 08 09        285 ( 12)     in0 c,(RDR1)
0217-                286
0217-                287           ; check for error
0217-E6 70           288 (  6)     and STAT1_OVRN|STAT1_PE|STAT1_FE
0219-28 0A           289 ( 6+)     jr Z,int_asci1_ok
021B-                290
021B-ED 38 01        291 ( 12)     in0 a,(CNTLA1)           ; clear error
021E-E6 F7           292 (  6)     and CNTLA1_EFR!$FF
0220-ED 39 01        293 ( 13)     out0 (CNTLA1),a
0223-18 E7           294 (  8)     jr int_asci1_test                    ; exit
0225-                295
0225-                296       int_asci1_ok:
0225-                297
0225-3A 06 22        298 ( 12)     ld a,(rx1_buffer_cpt)
0228-FE 7F           299 (  6)     cp RX_BUFFER_SIZE
022A-28 0E           300 ( 6+)     jr Z,int_asci1_exit
022C-                301
022C-3C              302 (  4)     inc a
022D-32 06 22        303 ( 13)     ld (rx1_buffer_cpt),a
0230-                304
0230-2A 04 22        305 ( 15)     ld hl,(rx1_buffer_ptr)
0233-23              306 (  4)     inc hl
0234-22 04 22        307 ( 20)     ld (rx1_buffer_ptr),hl
0237-                308
0237-71              309 (  7)     ld (hl),c
0238-                310
0238-18 D2           311 (  8)     jr int_asci1_test           ; is there more characters ?
023A-                312
023A-                313       int_asci1_exit:
023A-E1              314 (  9)     pop hl
023B-C1              315 (  9)     pop bc
023C-F1              316 (  9)     pop af
023D-FB              317 (  3)     ei
023E-C9              318 (  9)     ret
023F-                319
023F-                320
023F-                321       asci1_simple_getc:
023F-                322           ;in0 a,(STAT1)                ; check if there is a char in the FIFO
023F-                323           ;tst STAT1_RDRF
023F-                324           ;jr NZ,asci1_simple_getc
023F-ED 38 09        325 ( 12)     in0 a,(RDR1)
0242-C9              326 (  9)     ret
0243-                327
0243-                328       asci1_getc:
0243-C5              329 ( 11)     push bc
0244-E5              330 ( 11)     push hl
0245-                331
0245-                332       asci1_getc_wait:
0245-3A 06 22        333 ( 12)     ld a,(rx1_buffer_cpt)
0248-FE 00           334 (  6)     cp 0
024A-28 F9           335 ( 6+)     jr Z,asci1_getc_wait
024C-                336
024C-3A 06 22        337 ( 12)     ld a,(rx1_buffer_cpt)   ; get  buffer counter
024F-FE 00           338 (  6)     cp 0                    ; if 0 : nothing to get
0251-28 0C           339 ( 6+)     jr Z,asci1_getc_exit    ; exit
0253-                340
0253-3D              341 (  4)     dec a
0254-32 06 22        342 ( 13)     ld (rx1_buffer_cpt),a
0257-2A 04 22        343 ( 15)     ld hl,(rx1_buffer_ptr)
025A-7E              344 (  6)     ld a,(hl)
025B-                345
025B-2B              346 (  4)     dec hl
025C-22 04 22        347 ( 20)     ld (rx1_buffer_ptr),hl
025F-                348
025F-                349       asci1_getc_exit:
025F-E1              350 (  9)     pop hl
0260-C1              351 (  9)     pop bc
0261-C9              352 (  9)     ret
0262-                353
0262-                354
0262-                355
0262-                356       int_noop:
0262-ED 4D           357 (12+)     reti
0264-                358
0264-                359
0264-                360       ;str_welcome:    .db $1B,"[2J",$1B,"[H","Z180 CPU - Monitor V0.1",13,10,13,10,0
0264-                361       ;str_prompt:     .db "? ",0
0264-                362       ;str_error:       .db 13,10,"Err.",13,10,0
0264-                363
2100-                364           .org $2100
2100-                365
007F-                366       RX_BUFFER_SIZE: .equ 127
2100-                367
2100-                368       rx0_buffer:     .bs RX_BUFFER_SIZE+1
2180-                369       rx0_buffer_ptr: .bs 2
2182-                370       rx0_buffer_cpt: .bs 2
2184-                371       rx1_buffer:     .bs RX_BUFFER_SIZE+1
2204-                372       rx1_buffer_ptr: .bs 2
2206-                373       rx1_buffer_cpt: .bs 2
2208-                374
2208-                375
