0000-                  7
0000-                  8           .include z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TF1        .equ $80
0040-            I   156       TCR_TF0        .equ $40
0020-            I   157       TCR_TE1        .equ $20
0010-            I   158       TCR_TE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0000-            I   208
0000-            I   209       ; Refresh
0000-            I   210       ; ---------------------------------------------------------------------------
0000-            I   211
0000-            I   212       ; Refresh Control Register (RCR: 36H)
0036-            I   213       RCR            .equ $36
0080-            I   214       RCR_REFE       .equ $80
0040-            I   215       RCR_REFW       .equ $40
0002-            I   216       RCR_CYC1       .equ $02
0001-            I   217       RCR_CYC0       .equ $01
0000-            I   218
0000-            I   219       ; MMU
0000-            I   220       ; ---------------------------------------------------------------------------
0000-            I   221
0000-            I   222       ; MMU Common Base Register (CBR: 38H)
0038-            I   223       CBR            .equ $38
0000-            I   224       ; MMU Bank Base Register (BBR: 39H)
0039-            I   225       BBR            .equ $39
0000-            I   226       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   227       CBAR           .equ $3A
0000-            I   228       ; I/O
0000-            I   229       ; ---------------------------------------------------------------------------
0000-            I   230
0000-            I   231       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   232       OMCR           .equ $3E
0000-            I   233
0080-            I   234       OMCR_M1E       .equ $80
0040-            I   235       OMCR_M1TE      .equ $40
0000-            I   236       ;OMCR_M1E       .equ $20
0000-            I   237
0000-            I   238       ; I/O Control Register (ICR: 3FH)
003F-            I   239       ICR            .equ $3F
0000-            I   240
0080-            I   241       ICR_IOA7       .equ $80
0040-            I   242       ICR_IOA6       .equ $40
0020-            I   243       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp mreset        ; RESET
0003-                 12
0003-                 13       rst08:
0008-                 14           .org $0008
0008-C3 0B 02         15 (  9)     jp asci1_putc
000B-                 16
000B-                 17       rst10:
0010-                 18           .org $0010
0010-C3 A6 02         19 (  9)     jp asci1_getc
0013-                 20
0013-                 21       rst18:
0018-                 22           .org $0018
0018-3A 06 22         23 ( 12)     ld a,(rx1_buffer_cpt)
001B-FE 00            24 (  6)     cp 0
001D-C9               25 (  9)     ret
001E-                 26
001E-                 27
0038-                 28           .org $0038
0038-C3 C5 02         29 (  9)     jp int_noop    ; INT0
003B-                 30
0066-                 31           .org $0066
0066-C3 C5 02         32 (  9)     jp int_noop    ; NMI
0069-                 33
0069-                 34       ; interrupt vector table
0080-                 35           .org $0080
0080-C5 02            36           .dw int_noop    ; INT1
0082-C5 02            37           .dw int_noop    ; INT2
0084-C5 02            38           .dw int_noop    ; PRT0
0086-C5 02            39           .dw int_noop    ; PRT1
0088-C5 02            40           .dw int_noop    ; DMA0
008A-C5 02            41           .dw int_noop    ; DMA1
008C-C5 02            42           .dw int_noop    ; CSIO
008E-18 02            43           .dw int_asci0   ; ASCI0
0090-51 02            44           .dw int_asci1    ; ASCI1
0092-                 45
0100-                 46           .org $0100
0100-                 47       mreset:
0100-                 48
0100-F3               49 (  3)     di ; disable interrupts
0101-                 50
0101-                 51           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-3E 80            52 (  6)      ld a,CMR_X2
0103-ED 39 1E         53 ( 13)      out0 (CMR),a
0106-                 54
0106-                 55           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0106-3E 80            56 (  6)      ld a,CCR_CD
0108-ED 39 1F         57 ( 13)      out0 (CCR),a
010B-                 58
010B-3E 00            59 (  6)     ld  a,0
010D-ED 39 36         60 ( 13)     out0 (RCR),a    ; Refresh disable
0110-                 61
0110-                 62           ; MMU
0110-                 63           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0110-                 64           ; $2000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0110-                 65           ; $0000-$1FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0110-                 66
0110-3E F2            67 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0112-ED 39 3A         68 ( 13)     out0 (CBAR),a
0115-3E 11            69 (  6)     ld a,$11 ; Common Area Base = $20000
0117-ED 39 38         70 ( 13)     out0 (CBR),a
011A-3E 7E            71 (  6)     ld a,$7E ; Bank Area Base = $80000
011C-ED 39 39         72 ( 13)     out0 (BBR),a
011F-                 73
011F-                 74           ; Stack pointer = $10FF
011F-31 FF 20         75 (  9)     ld sp,$20FF
0122-                 76
0122-CD 8A 01         77 ( 16)     call asci0_init
0125-CD B4 01         78 ( 16)     call asci1_init
0128-                 79
0128-                 80           ; setup interupts
0128-ED 56            81 (  6)     im 1    ; interrupt mode 1
012A-3E 00            82 (  6)     ld a,0  ; interrupts high order byte : 00H
012C-ED 47            83 (  6)     ld i,a
012E-3E 80            84 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
0130-ED 39 33         85 ( 13)     out0 (IL),a
0133-                 86
0133-FB               87 (  3)     ei      ; enable interrupts
0134-                 88
0134-                 89       main:
0134-3E 41            90 (  6)     ld a,'A'
0136-CD 0B 02         91 ( 16)     call asci1_putc
0139-21 C7 02         92 (  9)     ld hl,str_welcome ; show welcome message
013C-CD EE 01         93 ( 16)     call asci1_puts
013F-                 94
013F-                 95           ; TEST VDU
013F-                 96           ;ld hl,$F000
013F-                 97           ;ld a,$55
013F-                 98           ;testvdu:
013F-                 99           ;ld (hl),a
013F-                100           ;jr testvdu
013F-                101           ;jp main
013F-                102           ; BASIC
013F-C3 00 03        103 (  9)     jp $0300
0142-                104
0142-                105       mprompt:
0142-21 EA 02        106 (  9)     ld hl,str_prompt ; show prompt
0145-CD DE 01        107 ( 16)     call asci0_puts
0148-                108
0148-                109       waitcommand:
0148-                110          ; call asci0_getc
0148-                111          ; ld c,a
0148-                112          ; call asci0_putc
0148-CD 18 02        113 ( 16)     call int_asci0
014B-C3 48 01        114 (  9)     jp waitcommand
014E-                115
014E-                116
014E-                117       ; -----------------------------------------------------------------
014E-                118
014E-                119       ; Load HEX file routine
014E-                120       hex_load:
014E-                121
014E-                122       hex_load_new_line:
014E-CD 87 02        123 ( 16)     call asci0_getc
0151-FE 3A           124 (  6)     cp ':'                  ; start of line ':'
0153-20 20           125 ( 6+)     jr NZ,hex_load_err
0155-CD 7C 01        126 ( 16)     call get_byte           ; first byte = number of bytes per line
0158-47              127 (  4)     ld b,a
0159-CD 7C 01        128 ( 16)     call get_byte           ; 2 bytes address
015C-67              129 (  4)     ld h,a
015D-CD 7C 01        130 ( 16)     call get_byte
0160-6F              131 (  4)     ld l,a
0161-CD 7C 01        132 ( 16)     call get_byte           ; line type
0164-FE 00           133 (  6)     cp 0
0166-20 0D           134 ( 6+)     jr NZ,hex_load_end
0168-                135
0168-0E 00           136 (  6)     ld c,0          ; checksum
016A-                137
016A-                138       hex_line_bytes:
016A-CD 7C 01        139 ( 16)     call get_byte
016D-77              140 (  7)     ld (hl),a
016E-23              141 (  4)     inc hl
016F-81              142 (  4)     add a,c
0170-4F              143 (  4)     ld c,a
0171-10 F7           144 ( 7+)     djnz hex_line_bytes
0173-                145
0173-                146
0173-ED 44           147 (  6)     neg c
0175-                148
0175-                149       hex_load_end:
0175-                150
0175-                151       hex_load_err:
0175-21 ED 02        152 (  9)     ld hl,str_error
0178-CD DE 01        153 ( 16)     call asci0_puts
017B-C9              154 (  9)     ret
017C-                155
017C-                156       get_byte:
017C-CD 87 02        157 ( 16)     call asci0_getc
017F-51              158 (  4)     ld d,c
0180-CD 87 02        159 ( 16)     call asci0_getc
0183-59              160 (  4)     ld e,c
0184-CD 88 01        161 ( 16)     call ascii_to_byte
0187-C9              162 (  9)     ret
0188-                163
0188-                164       ; in : 2 ascii chars in de
0188-                165       ; out : a = byte value
0188-                166       ascii_to_byte:
0188-7A              167 (  4)     ld a,d
0189-                168
0189-C9              169 (  9)     ret
018A-                170
018A-                171       ; -----------------------------------------------------------------
018A-                172
018A-                173       ; initialize asci0
018A-                174       asci0_init:
018A-                175
018A-                176           ; RE : Receiver Enable
018A-                177           ; TE : Transmitter Enable
018A-                178           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
018A-3E 64           179 (  6)     ld a,CNTLA0_RE|CNTLA0_TE|CNTLA0_MOD2
018C-ED 39 00        180 ( 13)     out0 (CNTLA0),a
018F-                181
018F-                182           ; DR=0
018F-3E 00           183 (  6)     ld a,0
0191-ED 39 02        184 ( 13)     out0 (CNTLB0),a
0194-                185
0194-                186           ; BRG0 : Enable 16 bit BRG counter
0194-                187           ; X1 ( + DR=0) : Clock mode = /1
0194-3E 18           188 (  6)     ld a,ASEXT0_BRG0|ASEXT0_X1
0196-ED 39 12        189 ( 13)     out0 (ASEXT0),a
0199-                190
0199-                191           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
0199-                192           ; TC = fphi/(2*baud rate*clock mode) - 2
0199-                193           ; TC = 32000000/(2*9600*1) - 2
0199-3E 81           194 (  6)     ld a,$81
019B-ED 39 1A        195 ( 13)     out0 (ASTC0L),a
019E-3E 06           196 (  6)     ld a,$06
01A0-ED 39 1B        197 ( 13)     out0 (ASTC0H),a
01A3-                198
01A3-                199           ; RIE : enable Rx Interrupt
01A3-3E 08           200 (  6)     ld a,STAT0_RIE
01A5-ED 39 04        201 ( 13)     out0 (STAT0),a
01A8-                202
01A8-AF              203 (  4)     xor a                  ; init RX buffer
01A9-32 82 21        204 ( 13)     ld (rx0_buffer_cpt),a
01AC-21 00 21        205 (  9)     ld hl,rx0_buffer
01AF-2B              206 (  4)     dec hl
01B0-22 80 21        207 ( 20)     ld (rx0_buffer_ptr),hl
01B3-                208
01B3-C9              209 (  9)     ret
01B4-                210
01B4-                211       ; initialize asci1
01B4-                212       asci1_init:
01B4-                213
01B4-                214           ; RE : Receiver Enable
01B4-                215           ; TE : Transmitter Enable
01B4-                216           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
01B4-3E 64           217 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
01B6-ED 39 01        218 ( 13)     out0 (CNTLA1),a
01B9-                219
01B9-                220           ; DR=0
01B9-3E 00           221 (  6)     ld a,0
01BB-ED 39 03        222 ( 13)     out0 (CNTLB1),a
01BE-                223
01BE-                224           ; BRG0 : Enable 16 bit BRG counter
01BE-                225           ; X1 ( + DR=0) : Clock mode = /1
01BE-3E 18           226 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
01C0-ED 39 13        227 ( 13)     out0 (ASEXT1),a
01C3-                228
01C3-                229           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
01C3-                230           ; TC = fphi/(2*baud rate*clock mode) - 2
01C3-                231           ; TC = 32000000/(2*9600*1) - 2
01C3-3E 81           232 (  6)     ld a,$81
01C5-ED 39 1C        233 ( 13)     out0 (ASTC1L),a
01C8-3E 06           234 (  6)     ld a,$06
01CA-ED 39 1D        235 ( 13)     out0 (ASTC1H),a
01CD-                236
01CD-                237           ; RIE : enable Rx Interrupt
01CD-3E 08           238 (  6)     ld a,STAT1_RIE
01CF-ED 39 05        239 ( 13)     out0 (STAT1),a
01D2-                240
01D2-AF              241 (  4)     xor a                  ; init RX buffer
01D3-32 82 21        242 ( 13)     ld (rx0_buffer_cpt),a
01D6-21 00 21        243 (  9)     ld hl,rx0_buffer
01D9-2B              244 (  4)     dec hl
01DA-22 80 21        245 ( 20)     ld (rx0_buffer_ptr),hl
01DD-                246
01DD-C9              247 (  9)     ret
01DE-                248
01DE-                249       ; put a string on asci0
01DE-                250       ; input : (hl) = address of null terminated string
01DE-                251       asci0_puts:
01DE-E5              252 ( 11)     push hl
01DF-F5              253 ( 11)     push af
01E0-                254
01E0-                255       asci0_puts_loop:
01E0-7E              256 (  6)     ld a,(hl)
01E1-F6 00           257 (  6)     or 0
01E3-28 06           258 ( 6+)     jr z,asci0_puts_exit
01E5-CD FE 01        259 ( 16)     call asci0_putc
01E8-23              260 (  4)     inc hl
01E9-18 F5           261 (  8)     jr asci0_puts_loop
01EB-                262
01EB-                263       asci0_puts_exit:
01EB-F1              264 (  9)     pop af
01EC-E1              265 (  9)     pop hl
01ED-C9              266 (  9)     ret
01EE-                267
01EE-                268       ; put a string on asci1
01EE-                269       ; input : (hl) = address of null terminated string
01EE-                270       asci1_puts:
01EE-E5              271 ( 11)     push hl
01EF-F5              272 ( 11)     push af
01F0-                273
01F0-                274       asci1_puts_loop:
01F0-7E              275 (  6)     ld a,(hl)
01F1-F6 00           276 (  6)     or 0
01F3-28 06           277 ( 6+)     jr z,asci1_puts_exit
01F5-CD 0B 02        278 ( 16)     call asci1_putc
01F8-23              279 (  4)     inc hl
01F9-18 F5           280 (  8)     jr asci1_puts_loop
01FB-                281
01FB-                282       asci1_puts_exit:
01FB-F1              283 (  9)     pop af
01FC-E1              284 (  9)     pop hl
01FD-C9              285 (  9)     ret
01FE-                286
01FE-                287       ; put a char on asci0
01FE-                288       ; input : a = char ascii code
01FE-                289       asci0_putc:
01FE-F5              290 ( 11)     push af
01FF-                291       asci0_putc_wait:  ; wait for asci0 TX ready
01FF-                292
01FF-ED 38 04        293 ( 12)     in0 a,(STAT0) ; TDRE=1 -> empty
0202-E6 02           294 (  6)     and STAT0_TDRE
0204-28 F9           295 ( 6+)     jr Z,asci0_putc_wait
0206-F1              296 (  9)     pop af
0207-ED 39 06        297 ( 13)     out0 (TDR0),a ; output the char to asci0
020A-                298
020A-C9              299 (  9)     ret
020B-                300
020B-                301       ; put a char on asci1
020B-                302       ; input : c = char ascii code
020B-                303       asci1_putc:
020B-F5              304 ( 11)     push af
020C-                305
020C-                306       asci1_putc_wait:  ; wait for asci0 TX ready
020C-ED 38 05        307 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
020F-E6 02           308 (  6)     and STAT1_TDRE
0211-28 F9           309 ( 6+)     jr Z,asci1_putc_wait
0213-F1              310 (  9)     pop af
0214-ED 39 07        311 ( 13)     out0 (TDR1),a ; output the char to asci0
0217-                312
0217-                313
0217-C9              314 (  9)     ret
0218-                315
0218-                316       ; int asci0
0218-                317       int_asci0:
0218-F5              318 ( 11)     push af
0219-C5              319 ( 11)     push bc
021A-E5              320 ( 11)     push hl
021B-                321
021B-                322       int_asci0_test:
021B-ED 38 04        323 ( 12)     in0 a,(STAT0)                ; check if there is a char in the FIFO
021E-ED 64 80        324 (  9)     tst STAT0_RDRF
0221-28 29           325 ( 6+)     jr Z,int_asci0_exit
0223-                326
0223-ED 08 08        327 ( 12)     in0 c,(RDR0)
0226-                328
0226-                329           ; check for error
0226-E6 70           330 (  6)     and STAT0_OVRN|STAT0_PE|STAT0_FE
0228-28 0A           331 ( 6+)     jr Z,int_asci0_ok
022A-                332
022A-ED 38 00        333 ( 12)     in0 a,(CNTLA0)           ; clear error
022D-E6 F7           334 (  6)     and CNTLA0_EFR!$FF
022F-ED 39 00        335 ( 13)     out0 (CNTLA0),a
0232-18 E7           336 (  8)     jr int_asci0_test                    ; exit
0234-                337
0234-                338       int_asci0_ok:
0234-                339
0234-                340
0234-3A 82 21        341 ( 12)     ld a,(rx0_buffer_cpt)
0237-FE 7F           342 (  6)     cp RX_BUFFER_SIZE
0239-28 11           343 ( 6+)     jr Z,int_asci0_exit
023B-                344
023B-3C              345 (  4)     inc a
023C-32 82 21        346 ( 13)     ld (rx0_buffer_cpt),a
023F-                347
023F-2A 80 21        348 ( 15)     ld hl,(rx0_buffer_ptr)
0242-23              349 (  4)     inc hl
0243-22 80 21        350 ( 20)     ld (rx0_buffer_ptr),hl
0246-                351
0246-71              352 (  7)     ld (hl),c
0247-CD FE 01        353 ( 16)     call asci0_putc
024A-                354
024A-18 CF           355 (  8)     jr int_asci0_test           ; is there more characters ?
024C-                356
024C-                357       int_asci0_exit:
024C-E1              358 (  9)     pop hl
024D-C1              359 (  9)     pop bc
024E-F1              360 (  9)     pop af
024F-FB              361 (  3)     ei
0250-C9              362 (  9)     ret
0251-                363
0251-                364       ; int asci1
0251-                365       int_asci1:
0251-F5              366 ( 11)     push af
0252-C5              367 ( 11)     push bc
0253-E5              368 ( 11)     push hl
0254-                369
0254-                370       int_asci1_test:
0254-ED 38 05        371 ( 12)     in0 a,(STAT1)                ; check if there is a char in the FIFO
0257-ED 64 80        372 (  9)     tst STAT1_RDRF
025A-28 26           373 ( 6+)     jr Z,int_asci1_exit
025C-                374
025C-ED 08 09        375 ( 12)     in0 c,(RDR1)
025F-                376
025F-                377           ; check for error
025F-E6 70           378 (  6)     and STAT1_OVRN|STAT1_PE|STAT1_FE
0261-28 0A           379 ( 6+)     jr Z,int_asci1_ok
0263-                380
0263-ED 38 01        381 ( 12)     in0 a,(CNTLA1)           ; clear error
0266-E6 F7           382 (  6)     and CNTLA1_EFR!$FF
0268-ED 39 01        383 ( 13)     out0 (CNTLA1),a
026B-18 E7           384 (  8)     jr int_asci1_test                    ; exit
026D-                385
026D-                386       int_asci1_ok:
026D-                387
026D-3A 06 22        388 ( 12)     ld a,(rx1_buffer_cpt)
0270-FE 7F           389 (  6)     cp RX_BUFFER_SIZE
0272-28 0E           390 ( 6+)     jr Z,int_asci1_exit
0274-                391
0274-3C              392 (  4)     inc a
0275-32 06 22        393 ( 13)     ld (rx1_buffer_cpt),a
0278-                394
0278-2A 04 22        395 ( 15)     ld hl,(rx1_buffer_ptr)
027B-23              396 (  4)     inc hl
027C-22 04 22        397 ( 20)     ld (rx1_buffer_ptr),hl
027F-                398
027F-71              399 (  7)     ld (hl),c
0280-                400
0280-18 D2           401 (  8)     jr int_asci1_test           ; is there more characters ?
0282-                402
0282-                403       int_asci1_exit:
0282-E1              404 (  9)     pop hl
0283-C1              405 (  9)     pop bc
0284-F1              406 (  9)     pop af
0285-FB              407 (  3)     ei
0286-C9              408 (  9)     ret
0287-                409
0287-                410
0287-                411       asci0_getc:
0287-C5              412 ( 11)     push bc
0288-E5              413 ( 11)     push hl
0289-                414
0289-                415       asci0_getc_wait:
0289-3A 82 21        416 ( 12)     ld a,(rx0_buffer_cpt)
028C-FE 00           417 (  6)     cp 0
028E-28 F9           418 ( 6+)     jr Z,asci0_getc_wait
0290-                419
0290-3A 82 21        420 ( 12)     ld a,(rx0_buffer_cpt)   ; get  buffer counter
0293-FE 00           421 (  6)     cp 0                    ; if 0 : nothing to get
0295-28 0C           422 ( 6+)     jr Z,asci0_getc_exit    ; exit
0297-                423
0297-3D              424 (  4)     dec a
0298-32 82 21        425 ( 13)     ld (rx0_buffer_cpt),a
029B-2A 80 21        426 ( 15)     ld hl,(rx0_buffer_ptr)
029E-7E              427 (  6)     ld a,(hl)
029F-                428
029F-2B              429 (  4)     dec hl
02A0-22 80 21        430 ( 20)     ld (rx0_buffer_ptr),hl
02A3-                431
02A3-                432       asci0_getc_exit:
02A3-E1              433 (  9)     pop hl
02A4-C1              434 (  9)     pop bc
02A5-C9              435 (  9)     ret
02A6-                436
02A6-                437       asci1_getc:
02A6-C5              438 ( 11)     push bc
02A7-E5              439 ( 11)     push hl
02A8-                440
02A8-                441       asci1_getc_wait:
02A8-3A 06 22        442 ( 12)     ld a,(rx1_buffer_cpt)
02AB-FE 00           443 (  6)     cp 0
02AD-28 F9           444 ( 6+)     jr Z,asci1_getc_wait
02AF-                445
02AF-3A 06 22        446 ( 12)     ld a,(rx1_buffer_cpt)   ; get  buffer counter
02B2-FE 00           447 (  6)     cp 0                    ; if 0 : nothing to get
02B4-28 0C           448 ( 6+)     jr Z,asci1_getc_exit    ; exit
02B6-                449
02B6-3D              450 (  4)     dec a
02B7-32 06 22        451 ( 13)     ld (rx1_buffer_cpt),a
02BA-2A 04 22        452 ( 15)     ld hl,(rx1_buffer_ptr)
02BD-7E              453 (  6)     ld a,(hl)
02BE-                454
02BE-2B              455 (  4)     dec hl
02BF-22 04 22        456 ( 20)     ld (rx1_buffer_ptr),hl
02C2-                457
02C2-                458       asci1_getc_exit:
02C2-E1              459 (  9)     pop hl
02C3-C1              460 (  9)     pop bc
02C4-C9              461 (  9)     ret
02C5-                462
02C5-                463
02C5-                464
02C5-                465       int_noop:
02C5-ED 4D           466 (12+)     reti
02C7-                467
02C7-                468
02C7-1B 5B 32 4A 
     1B 5B 48 5A 
     31 38 30 20 
     43 50 55 20 
     2D 20 4D 6F 
     6E 69 74 6F 
     72 20 56 30 
     2E 31 0D 0A 
     0D 0A 00        469       str_welcome:    .db $1B,"[2J",$1B,"[H","Z180 CPU - Monitor V0.1",13,10,13,10,0
02EA-3F 20 00        470       str_prompt:     .db "? ",0
02ED-0D 0A 45 72 
     72 2E 0D 0A 
     00              471       str_error:       .db 13,10,"Err.",13,10,0
02F6-                472
2100-                473           .org $2100
2100-                474
007F-                475       RX_BUFFER_SIZE: .equ 127
2100-                476
2100-                477       rx0_buffer:     .bs RX_BUFFER_SIZE+1
2180-                478       rx0_buffer_ptr: .bs 2
2182-                479       rx0_buffer_cpt: .bs 2
2184-                480       rx1_buffer:     .bs RX_BUFFER_SIZE+1
2204-                481       rx1_buffer_ptr: .bs 2
2206-                482       rx1_buffer_cpt: .bs 2
2208-                483
2208-                484
