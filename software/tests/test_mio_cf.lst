0000-                  7
0008-                  8       CLOCK       .equ    8
0080-                  9       INT_BASE    .equ    $0080
0000-                 10
0000-                 11           .include ../include/z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TIF1        .equ $80
0040-            I   156       TCR_TIF0        .equ $40
0020-            I   157       TCR_TIE1        .equ $20
0010-            I   158       TCR_TIE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0034-            I   208       ITC             .equ $34
0000-            I   209
0080-            I   210       ITC_TRAP        .equ $80
0040-            I   211       ITC_UFO         .equ $40
0004-            I   212       ITC_ITE2        .equ $04
0002-            I   213       ITC_ITE1        .equ $02
0001-            I   214       ITC_ITE0        .equ $01
0000-            I   215
0000-            I   216
0000-            I   217       ; Refresh
0000-            I   218       ; ---------------------------------------------------------------------------
0000-            I   219
0000-            I   220       ; Refresh Control Register (RCR: 36H)
0036-            I   221       RCR            .equ $36
0080-            I   222       RCR_REFE       .equ $80
0040-            I   223       RCR_REFW       .equ $40
0002-            I   224       RCR_CYC1       .equ $02
0001-            I   225       RCR_CYC0       .equ $01
0000-            I   226
0000-            I   227       ; MMU
0000-            I   228       ; ---------------------------------------------------------------------------
0000-            I   229
0000-            I   230       ; MMU Common Base Register (CBR: 38H)
0038-            I   231       CBR            .equ $38
0000-            I   232       ; MMU Bank Base Register (BBR: 39H)
0039-            I   233       BBR            .equ $39
0000-            I   234       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   235       CBAR           .equ $3A
0000-            I   236       ; I/O
0000-            I   237       ; ---------------------------------------------------------------------------
0000-            I   238
0000-            I   239       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   240       OMCR           .equ $3E
0000-            I   241
0080-            I   242       OMCR_M1E       .equ $80
0040-            I   243       OMCR_M1TE      .equ $40
0000-            I   244       ;OMCR_M1E       .equ $20
0000-            I   245
0000-            I   246       ; I/O Control Register (ICR: 3FH)
003F-            I   247       ICR            .equ $3F
0000-            I   248
0080-            I   249       ICR_IOA7       .equ $80
0040-            I   250       ICR_IOA6       .equ $40
0020-            I   251       ICR_IOSTP      .equ $20
0000-                 12
0000-                 13           .org $0000
0000-C3 00 01         14 (  9)     jp mreset        ; RESET
0003-                 15
0038-                 16          .org $0038
0038-C3 52 01         17 (  9)     jp int_noop    ; INT0
003B-                 18
0066-                 19           .org $0066
0066-C3 52 01         20 (  9)     jp int_noop    ; NMI
0069-                 21
0069-                 22       ; interrupt vector table
0080-                 23           .org $0080
0080-52 01            24           .dw int_noop    ; INT1
0082-52 01            25           .dw int_noop    ; INT2
0084-52 01            26           .dw int_noop    ; PRT0
0086-52 01            27           .dw int_noop    ; PRT1
0088-52 01            28           .dw int_noop    ; DMA0
008A-52 01            29           .dw int_noop    ; DMA1
008C-52 01            30           .dw int_noop    ; CSIO
008E-52 01            31           .dw int_noop   ; ASCI0
0090-52 01            32           .dw int_noop    ; ASCI1
0092-                 33
0100-                 34           .org $0100
0100-                 35       mreset:
0100-                 36
0100-F3               37 (  3)     di ; disable interrupts
0101-                 38
0101-                 39           ; MMU
0101-                 40           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0101-                 41           ; $8000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0101-                 42           ; $0000-$7FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0101-                 43
0101-3E F2            44 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0103-ED 39 3A         45 ( 13)     out0 (CBAR),a
0106-3E 11            46 (  6)     ld a,$11 ; Common Area Base = $20000
0108-ED 39 38         47 ( 13)     out0 (CBR),a
010B-3E 7E            48 (  6)     ld a,$7E ; Bank Area Base = $80000
010D-ED 39 39         49 ( 13)     out0 (BBR),a
0110-                 50
0110-                 51
0110-31 FF 20         52 (  9)     ld sp,$20FF ; Stack pointer = $20FF
0113-                 53
0113-CD 6E 03         54 ( 16)     call _util_init_cpu
0116-                 55
0116-CD 25 02         56 ( 16)     call _asci1_init
0119-                 57
0119-                 58           ;ei      ; enable interrupts
0119-                 59
0119-                 60
0119-                 61       main:
0119-                 62
0119-21 76 01         63 (  9)     ld hl,str_welcome
011C-CD A6 02         64 ( 16)     call _asci1_puts
011F-                 65
011F-                 66       test:
011F-ED 38 8F         67 ( 12)     in0 a,($88+7)
0122-                 68         ;  call _util_byte_to_ascii_hex
0122-                 69         ;  ld a,b
0122-                 70         ;  call _asci1_putc
0122-                 71         ;  ld a,c
0122-                 72         ;  call _asci1_putc
0122-                 73
0122-                 74       ;    out0 ($88),a
0122-C3 1F 01         75 (  9)     jp test
0125-                 76
0125-CD 63 01         77 ( 16)     call test_data_sector
0128-                 78
0128-CD B6 02         79 ( 16)     call _cf_init
012B-                 80
012B-                 81           ;ld hl,lba_addr
012B-                 82           ;call _cf_load_lba
012B-                 83           ;ld ix,sector
012B-                 84           ;call _cf_write_sector
012B-                 85
012B-CD 54 01         86 ( 16)     call zero_sector
012E-                 87
012E-21 72 01         88 (  9)     ld hl,lba_addr
0131-CD 2E 03         89 ( 16)     call _cf_load_lba
0134-DD 21 00 81      90 ( 12)     ld ix,sector
0138-                 91         ;  call _cf_read_sector
0138-                 92
0138-21 00 81         93 (  9)     ld hl,sector
013B-                 94
013B-11 00 02         95 (  9)     ld de,512
013E-                 96       display_sector_loop:
013E-7E               97 (  6)     ld a,(hl)
013F-23               98 (  4)     inc hl
0140-CD 4D 03         99 ( 16)     call _util_byte_to_ascii_hex
0143-78              100 (  4)     ld a,b
0144-CD 99 02        101 ( 16)     call _asci1_putc
0147-79              102 (  4)     ld a,c
0148-CD 99 02        103 ( 16)     call _asci1_putc
014B-1B              104 (  4)     dec de
014C-                105
014C-7A              106 (  4)     ld a,d
014D-B3              107 (  4)     or e
014E-20 EE           108 ( 6+)     jr nz,display_sector_loop
0150-                109
0150-                110       loop:
0150-18 FE           111 (  8)     jr loop
0152-                112
0152-                113       int_noop:
0152-FB              114 (  3)     ei
0153-C9              115 (  9)     ret
0154-                116
0154-                117       zero_sector:
0154-21 00 81        118 (  9)     ld hl,sector
0157-11 00 02        119 (  9)     ld de,512
015A-                120       zero_sector_loop:
015A-AF              121 (  4)     xor a
015B-23              122 (  4)     inc hl
015C-77              123 (  7)     ld (hl),a
015D-1B              124 (  4)     dec de
015E-7A              125 (  4)     ld a,d
015F-B3              126 (  4)     or e
0160-20 F8           127 ( 6+)     jr nz,zero_sector_loop
0162-C9              128 (  9)     ret
0163-                129
0163-                130       test_data_sector:
0163-21 00 81        131 (  9)     ld hl,sector
0166-11 00 02        132 (  9)     ld de,512
0169-                133       test_data_sector_loop:
0169-7B              134 (  4)     ld a,e
016A-23              135 (  4)     inc hl
016B-77              136 (  7)     ld (hl),a
016C-1B              137 (  4)     dec de
016D-7A              138 (  4)     ld a,d
016E-B3              139 (  4)     or e
016F-20 F8           140 ( 6+)     jr nz,test_data_sector_loop
0171-C9              141 (  9)     ret
0172-                142
0172-                143
0172-00 00 00 00     144       lba_addr    .db 0,0,0,0
0176-                145
0176-1B 5B 32 4A 
     1B 5B 48 54 
     65 73 74 20 
     43 6F 6D 70 
     61 63 74 2D 
     46 6C 61 73 
     68 0D 0A 0D 
     0A 00           146       str_welcome:    .db $1B,"[2J",$1B,"[H","Test Compact-Flash",13,10,13,10,0
0194-                147
0000-                148           .SM ram
8F00-                149           .ORG $8F00
8F00-                150
0194-                151           .SM code
0194-                152           .include ../bios/bios_asci.asm
0194-            I     1       ; ASCI
0194-            I     2       ; ----------------------------------------------------------------------------
0194-            I     3
0194-            I     4       ; init ASCI0
0194-            I     5       ; input : none
0194-            I     6       ; output : none
0194-            I     7       _asci0_init:
0194-            I     8           ; RE : Receiver Enable
0194-            I     9           ; TE : Transmitter Enable
0194-            I    10           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
0194-3E 64       I    11 (  6)     ld a,CNTLA0_RE|CNTLA0_TE|CNTLA0_MOD2
0196-ED 39 00    I    12 ( 13)     out0 (CNTLA0),a
0199-            I    13
0199-            I    14           ; DR=0
0199-3E 00       I    15 (  6)     ld a,0
019B-ED 39 02    I    16 ( 13)     out0 (CNTLB0),a
019E-            I    17
019E-            I    18           ; BRG0 : Enable 16 bit BRG counter
019E-            I    19           ; X1 ( + DR=0) : Clock mode = /1
019E-3E 18       I    20 (  6)     ld a,ASEXT0_BRG0|ASEXT0_X1
01A0-ED 39 12    I    21 ( 13)     out0 (ASEXT0),a
01A3-            I    22
01A3-            I    23           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
01A3-            I    24           ; TC = fphi/(2*baud rate*clock mode) - 2
01A3-            I    25           ; TC = 32000000/(2*9600*1) - 2
01A3-            IS   26           .DO CLOCK=32
01A3-            IS   27           ld  hl,$0681
01A3-            I    28           .EL
01A3-            IS   29           .DO CLOCK=16
01A3-            IS   30           ld hl,$033F
01A3-            I    31           .EL
01A3-21 9F 01    I    32 (  9)     ld hl,$019F
01A6-            I    33           .FI
01A6-            I    34           .FI
01A6-ED 29 1A    I    35 ( 13)     out0 (ASTC0L),l
01A9-ED 21 1B    I    36 ( 13)     out0 (ASTC0H),h
01AC-            I    37
01AC-            I    38           ; RIE : enable Rx Interrupt
01AC-3E 08       I    39 (  6)     ld a,STAT0_RIE
01AE-ED 39 04    I    40 ( 13)     out0 (STAT0),a
01B1-            I    41
01B1-AF          I    42 (  4)     xor a                  ; init RX buffer
01B2-32 00 8F    I    43 ( 13)     ld (asci0_buffer_pos),a
01B5-            I    44
01B5-C9          I    45 (  9)     ret
01B6-            I    46
01B6-            I    47       ; INT ASCI0
01B6-            I    48       ; put received char in ASCI0 RX buffer
01B6-            I    49       _int_asci0:
01B6-F5          I    50 ( 11)     push af
01B7-C5          I    51 ( 11)     push bc
01B8-D5          I    52 ( 11)     push de
01B9-E5          I    53 ( 11)     push hl
01BA-            I    54
01BA-            I    55       _int_asci0_test:
01BA-ED 38 04    I    56 ( 12)     in0 a,(STAT0)                ; check if there is a char in the FIFO
01BD-ED 64 80    I    57 (  9)     tst STAT0_RDRF
01C0-28 21       I    58 ( 6+)     jr Z,_int_asci0_exit
01C2-            I    59
01C2-ED 08 08    I    60 ( 12)     in0 c,(RDR0)                ; c <- received char
01C5-            I    61
01C5-            I    62           ; check for error
01C5-E6 70       I    63 (  6)     and STAT0_OVRN|STAT0_PE|STAT0_FE
01C7-28 0A       I    64 ( 6+)     jr Z,_int_asci0_ok
01C9-            I    65
01C9-ED 38 00    I    66 ( 12)     in0 a,(CNTLA0)           ; clear error
01CC-E6 F7       I    67 (  6)     and CNTLA0_EFR!$FF
01CE-ED 39 00    I    68 ( 13)     out0 (CNTLA0),a
01D1-18 E7       I    69 (  8)     jr _int_asci0_test                    ; exit
01D3-            I    70
01D3-            I    71       _int_asci0_ok:
01D3-16 00       I    72 (  6)     ld d,0                      ; hl <- asci0_buffer+(asci0_buffer_pos)
01D5-3A 00 8F    I    73 ( 12)     ld a,(asci0_buffer_pos)
01D8-5F          I    74 (  4)     ld e,a
01D9-21 01 8F    I    75 (  9)     ld hl,asci0_buffer
01DC-19          I    76 (  7)     add hl,de
01DD-            I    77
01DD-3C          I    78 (  4)     inc a                       ; ; inc kbd_buffer_pos
01DE-32 00 8F    I    79 ( 13)     ld (asci0_buffer_pos),a
01E1-            I    80
01E1-79          I    81 (  4)     ld a,c                      ; a <- received char
01E2-77          I    82 (  7)     ld (hl),a                   ; save it to asci0_buffer+(asci0_buffer_pos)
01E3-            I    83
01E3-            I    84       _int_asci0_exit:
01E3-E1          I    85 (  9)     pop hl
01E4-D1          I    86 (  9)     pop de
01E5-C1          I    87 (  9)     pop bc
01E6-F1          I    88 (  9)     pop af
01E7-FB          I    89 (  3)     ei
01E8-C9          I    90 (  9)     ret
01E9-            I    91
01E9-            I    92       ; get a char on ASCI0 RX buffer
01E9-            I    93       ; input : none
01E9-            I    94       ; output : a <- received char
01E9-            I    95       _asci0_getc:
01E9-E5          I    96 ( 11)     push hl
01EA-D5          I    97 ( 11)     push de
01EB-            I    98
01EB-3A 00 8F    I    99 ( 12)     ld a,(asci0_buffer_pos)     ; load buffer position
01EE-F6 00       I   100 (  6)     or 0
01F0-CA FF 01    I   101 ( 6+)     jp  Z,_asci0_getc_exit      ; exit if 0
01F3-            I   102
01F3-3D          I   103 (  4)     dec a                       ; decrement and update buffer position
01F4-32 00 8F    I   104 ( 13)     ld (asci0_buffer_pos),a
01F7-            I   105
01F7-16 00       I   106 (  6)     ld d,0                      ; get char in buffer
01F9-5F          I   107 (  4)     ld e,a
01FA-21 01 8F    I   108 (  9)     ld hl,asci0_buffer
01FD-19          I   109 (  7)     add hl,de
01FE-7E          I   110 (  6)     ld a,(hl)                   ; into A register
01FF-            I   111
01FF-            I   112       _asci0_getc_exit:
01FF-            I   113
01FF-D1          I   114 (  9)     pop de
0200-E1          I   115 (  9)     pop hl
0201-C9          I   116 (  9)     ret
0202-            I   117
0202-            I   118       ; check if rx buffer is empty
0202-            I   119       ; input : NONE
0202-            I   120       ; output : flag=Z if empty
0202-            I   121       _asci0_rx_empty:
0202-3A 00 8F    I   122 ( 12)     ld a,(asci0_buffer_pos)
0205-FE 00       I   123 (  6)     cp 0
0207-C9          I   124 (  9)     ret
0208-            I   125
0208-            I   126       ; put a char on asci0
0208-            I   127       ; input : a = char ascii code
0208-            I   128       ; output : none
0208-            I   129       _asci0_putc:
0208-F5          I   130 ( 11)     push af
0209-            I   131
0209-            I   132       _asci0_putc_wait:  ; wait for asci0 TX ready
0209-ED 38 04    I   133 ( 12)     in0 a,(STAT0) ; TDRE=1 -> empty
020C-E6 02       I   134 (  6)     and STAT0_TDRE
020E-28 F9       I   135 ( 6+)     jr Z,_asci0_putc_wait
0210-            I   136
0210-F1          I   137 (  9)     pop af
0211-ED 39 06    I   138 ( 13)     out0 (TDR0),a ; output the char to asci0
0214-            I   139
0214-C9          I   140 (  9)     ret
0215-            I   141
0215-            I   142       ; put a string on asci0
0215-            I   143       ; input : (hl) = address of null terminated string
0215-            I   144       ; output : none
0215-            I   145       _asci0_puts:
0215-E5          I   146 ( 11)     push hl
0216-F5          I   147 ( 11)     push af
0217-            I   148
0217-            I   149       _asci0_puts_loop:
0217-7E          I   150 (  6)     ld a,(hl)
0218-F6 00       I   151 (  6)     or 0
021A-28 06       I   152 ( 6+)     jr z,_asci0_puts_exit
021C-CD 08 02    I   153 ( 16)     call _asci0_putc
021F-23          I   154 (  4)     inc hl
0220-18 F5       I   155 (  8)     jr _asci0_puts_loop
0222-            I   156
0222-            I   157       _asci0_puts_exit:
0222-F1          I   158 (  9)     pop af
0223-E1          I   159 (  9)     pop hl
0224-C9          I   160 (  9)     ret
0225-            I   161
0225-            I   162       _asci1_init:
0225-            I   163           ; RE : Receiver Enable
0225-            I   164           ; TE : Transmitter Enable
0225-            I   165           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
0225-3E 64       I   166 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
0227-ED 39 01    I   167 ( 13)     out0 (CNTLA1),a
022A-            I   168
022A-            I   169           ; DR=0
022A-3E 00       I   170 (  6)     ld a,0
022C-ED 39 03    I   171 ( 13)     out0 (CNTLB1),a
022F-            I   172
022F-            I   173           ; BRG0 : Enable 16 bit BRG counter
022F-            I   174           ; X1 ( + DR=0) : Clock mode = /1
022F-3E 18       I   175 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
0231-ED 39 13    I   176 ( 13)     out0 (ASEXT1),a
0234-            I   177
0234-            I   178           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
0234-            I   179           ; TC = fphi/(2*baud rate*clock mode) - 2
0234-            I   180           ; TC = 32000000/(2*9600*1) - 2
0234-            IS  181           .DO CLOCK=32
0234-            IS  182           ld  hl,$0681 ; 9603 bauds
0234-            I   183           .EL
0234-            IS  184           .DO CLOCK=16
0234-            IS  185           ld hl,$033F ; 9604 bauds
0234-            I   186           .EL
0234-21 9F 01    I   187 (  9)     ld hl,$019F ; 9592 bauds
0237-            I   188           .FI
0237-            I   189           .FI
0237-ED 29 1C    I   190 ( 13)     out0 (ASTC1L),l
023A-ED 21 1D    I   191 ( 13)     out0 (ASTC1H),h
023D-            I   192
023D-            I   193           ; RIE : enable Rx Interrupt
023D-3E 08       I   194 (  6)     ld a,STAT1_RIE
023F-ED 39 05    I   195 ( 13)     out0 (STAT1),a
0242-            I   196
0242-AF          I   197 (  4)     xor a                  ; init RX buffer
0243-32 41 8F    I   198 ( 13)     ld (asci1_buffer_pos),a
0246-            I   199
0246-C9          I   200 (  9)     ret
0247-            I   201
0247-            I   202       _int_asci1:
0247-F5          I   203 ( 11)     push af
0248-C5          I   204 ( 11)     push bc
0249-D5          I   205 ( 11)     push de
024A-E5          I   206 ( 11)     push hl
024B-            I   207
024B-            I   208       _int_asci1_test:
024B-ED 38 05    I   209 ( 12)     in0 a,(STAT1)                ; check if there is a char in the FIFO
024E-ED 64 80    I   210 (  9)     tst STAT1_RDRF
0251-28 21       I   211 ( 6+)     jr Z,_int_asci1_exit
0253-            I   212
0253-ED 08 09    I   213 ( 12)     in0 c,(RDR1)                ; c <- received char
0256-            I   214
0256-            I   215           ; check for error
0256-E6 70       I   216 (  6)     and STAT1_OVRN|STAT1_PE|STAT1_FE
0258-28 0A       I   217 ( 6+)     jr Z,_int_asci1_ok
025A-            I   218
025A-ED 38 01    I   219 ( 12)     in0 a,(CNTLA1)           ; clear error
025D-E6 F7       I   220 (  6)     and CNTLA1_EFR!$FF
025F-ED 39 01    I   221 ( 13)     out0 (CNTLA1),a
0262-18 E7       I   222 (  8)     jr _int_asci1_test                    ; exit
0264-            I   223
0264-            I   224       _int_asci1_ok:
0264-16 00       I   225 (  6)     ld d,0                      ; hl <- asci0_buffer+(asci0_buffer_pos)
0266-3A 41 8F    I   226 ( 12)     ld a,(asci1_buffer_pos)
0269-5F          I   227 (  4)     ld e,a
026A-21 42 8F    I   228 (  9)     ld hl,asci1_buffer
026D-19          I   229 (  7)     add hl,de
026E-            I   230
026E-3C          I   231 (  4)     inc a                       ; ; inc kbd_buffer_pos
026F-32 41 8F    I   232 ( 13)     ld (asci1_buffer_pos),a
0272-            I   233
0272-79          I   234 (  4)     ld a,c                      ; a <- received char
0273-77          I   235 (  7)     ld (hl),a                   ; save it to  asci1_buffer+(asci1_buffer_pos)
0274-            I   236
0274-            I   237       _int_asci1_exit:
0274-E1          I   238 (  9)     pop hl
0275-D1          I   239 (  9)     pop de
0276-C1          I   240 (  9)     pop bc
0277-F1          I   241 (  9)     pop af
0278-FB          I   242 (  3)     ei
0279-C9          I   243 (  9)     ret
027A-            I   244
027A-            I   245       _asci1_getc:
027A-E5          I   246 ( 11)     push hl
027B-D5          I   247 ( 11)     push de
027C-            I   248
027C-3A 41 8F    I   249 ( 12)     ld a,(asci1_buffer_pos)     ; load buffer position
027F-F6 00       I   250 (  6)     or 0
0281-CA 90 02    I   251 ( 6+)     jp  Z,_asci1_getc_exit      ; exit if 0
0284-            I   252
0284-3D          I   253 (  4)     dec a                       ; decrement and update buffer position
0285-32 41 8F    I   254 ( 13)     ld (asci1_buffer_pos),a
0288-            I   255
0288-16 00       I   256 (  6)     ld d,0                      ; get char in buffer
028A-5F          I   257 (  4)     ld e,a
028B-21 42 8F    I   258 (  9)     ld hl,asci1_buffer
028E-19          I   259 (  7)     add hl,de
028F-7E          I   260 (  6)     ld a,(hl)                   ; into A register
0290-            I   261
0290-            I   262       _asci1_getc_exit:
0290-            I   263
0290-D1          I   264 (  9)     pop de
0291-E1          I   265 (  9)     pop hl
0292-C9          I   266 (  9)     ret
0293-            I   267
0293-            I   268       ; check if rx buffer is empty
0293-            I   269       ; input : NONE
0293-            I   270       ; output : flag=Z if empty
0293-            I   271       _asci1_rx_empty:
0293-3A 41 8F    I   272 ( 12)     ld a,(asci1_buffer_pos)
0296-FE 00       I   273 (  6)     cp 0
0298-C9          I   274 (  9)     ret
0299-            I   275
0299-            I   276       ; put a char on asci1
0299-            I   277       ; input : a = char ascii code
0299-            I   278       ; output : none
0299-            I   279       _asci1_putc:
0299-F5          I   280 ( 11)     push af
029A-            I   281
029A-            I   282       _asci1_putc_wait:  ; wait for asci0 TX ready
029A-ED 38 05    I   283 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
029D-E6 02       I   284 (  6)     and STAT1_TDRE
029F-28 F9       I   285 ( 6+)     jr Z,_asci1_putc_wait
02A1-            I   286
02A1-F1          I   287 (  9)     pop af
02A2-ED 39 07    I   288 ( 13)     out0 (TDR1),a ; output the char to asci0
02A5-            I   289
02A5-C9          I   290 (  9)     ret
02A6-            I   291
02A6-            I   292       ; put a string on asci1
02A6-            I   293       ; input : (hl) = address of null terminated string
02A6-            I   294       ; output : none
02A6-            I   295       _asci1_puts:
02A6-E5          I   296 ( 11)     push hl
02A7-F5          I   297 ( 11)     push af
02A8-            I   298
02A8-            I   299       _asci1_puts_loop:
02A8-7E          I   300 (  6)     ld a,(hl)
02A9-F6 00       I   301 (  6)     or 0
02AB-28 06       I   302 ( 6+)     jr z,_asci1_puts_exit
02AD-CD 99 02    I   303 ( 16)     call _asci1_putc
02B0-23          I   304 (  4)     inc hl
02B1-18 F5       I   305 (  8)     jr _asci1_puts_loop
02B3-            I   306
02B3-            I   307       _asci1_puts_exit:
02B3-F1          I   308 (  9)     pop af
02B4-E1          I   309 (  9)     pop hl
02B5-C9          I   310 (  9)     ret
02B6-            I   311
02B6-            I   312       ; RAM
8F00-            I   313           .SM ram
8F00-            I   314
8F00-            I   315       asci0_buffer_pos:   .bs 1
8F01-            I   316       asci0_buffer:       .bs 64
8F41-            I   317       asci1_buffer_pos:   .bs 1
8F42-            I   318       asci1_buffer:       .bs 64
8F82-            I   319
02B6-            I   320           .SM code
02B6-                153           .include ../bios/bios_cf.asm
02B6-            I     1       ; CF
02B6-            I     2       ; ----------------------------------------------------------------------------
02B6-            I     3
0088-            I     4       CF_BASE .EQU $88
02B6-            I     5
0088-            I     6       CF_DATA_REG             .EQU    CF_BASE+0       ; Data Register
0089-            I     7       CF_ERROR_REG        .EQU        CF_BASE+1       ; Error Register (Read)
0089-            I     8       CF_FEATURE_REG      .EQU    CF_BASE+1   ; Feature Register (Write)
008A-            I     9       CF_SECTOR_COUNT_REG .EQU    CF_BASE+2   ; Sector count register
008B-            I    10       CF_SECTOR_NUM_REG   .EQU    CF_BASE+3   ; Sector number
008B-            I    11       CF_LBA_B0           .EQU    CF_BASE+3   ; LBA byte 0 LSB (bits 07..00)
008C-            I    12       CF_CYL_LOW_REG      .EQU    CF_BASE+4   ; Cylinder low register
008C-            I    13       CF_LBA_B1           .EQU    CF_BASE+4   ; LBA byte 1 (bits 15..08)
008D-            I    14       CF_CYL_HIGH_REG     .EQU    CF_BASE+5   ; Cylinder high register
008D-            I    15       CF_LBA_B2           .EQU    CF_BASE+5   ; LBA byte 3 (bits 23..16)
008E-            I    16       CF_DRIVE_HEAD_REG   .EQU    CF_BASE+6   ; Drive head register
008E-            I    17       CF_LBA_B3           .EQU    CF_BASE+6   ; LBA byte 4 MSB (bits 27..24)
008F-            I    18       CF_STATUS_REG       .EQU    CF_BASE+7   ; Status register (read)
008F-            I    19       CF_COMMAND_REG      .EQU    CF_BASE+7   ; Command Reg (write)
02B6-            I    20
02B6-            I    21
0004-            I    22       CF_CMD_RESET        .EQU    $04
0020-            I    23       CF_CMD_READ_SECTOR  .EQU    $20
0030-            I    24       CF_CMD_WRITE_SECTOR .EQU    $30
00EF-            I    25       CF_CMD_SET_FEATURE  .EQU    $EF
02B6-            I    26
0001-            I    27       CF_FEATURE_8BIT     .EQU    $01
0082-            I    28       CF_FEATURE_NOCACHE  .EQU    $82
02B6-            I    29
02B6-            I    30       _cf_init:
02B6-F5          I    31 ( 11)     push af
02B7-            I    32
02B7-            I    33           ; reset command
02B7-3E 04       I    34 (  6)     ld      a,CF_CMD_RESET
02B9-ED 39 8F    I    35 ( 13)     out0    (CF_COMMAND_REG),a
02BC-            I    36
02BC-            I    37           ; set lba mode
02BC-CD 22 03    I    38 ( 16)     call    _cf_wait
02BF-3E E0       I    39 (  6)     ld      a,%11100000 ; bit 7=1 , bit 6= set LBA mode, bit 5=1
02C1-ED 39 8E    I    40 ( 13)     out0    (CF_LBA_B3),a
02C4-            I    41
02C4-            I    42           ; set 8 bits mode
02C4-CD 22 03    I    43 ( 16)     call    _cf_wait
02C7-3E 01       I    44 (  6)         ld      a,CF_FEATURE_8BIT
02C9-ED 39 89    I    45 ( 13)         out0    (CF_FEATURE_REG),a
02CC-3E EF       I    46 (  6)         ld      a,CF_CMD_SET_FEATURE
02CE-ED 39 8F    I    47 ( 13)         out0    (CF_COMMAND_REG),a
02D1-            I    48
02D1-            I    49           ; no write cache
02D1-CD 22 03    I    50 ( 16)     call    _cf_wait
02D4-3E 82       I    51 (  6)         ld      a,CF_FEATURE_NOCACHE
02D6-ED 39 89    I    52 ( 13)         out0    (CF_FEATURE_REG),a
02D9-3E EF       I    53 (  6)         ld      a,CF_CMD_SET_FEATURE
02DB-ED 39 8F    I    54 ( 13)         out0    (CF_COMMAND_REG),a
02DE-            I    55
02DE-F1          I    56 (  9)     pop af
02DF-C9          I    57 (  9)     ret
02E0-            I    58
02E0-            I    59       ; read 512 bits into (ix)
02E0-            I    60       ; input : (ix) destination address
02E0-            I    61       ; output : (ix) points to the next 512 bytes
02E0-            I    62       _cf_read_sector:
02E0-F5          I    63 ( 11)     push af
02E1-C5          I    64 ( 11)     push bc
02E2-            I    65
02E2-CD 22 03    I    66 ( 16)     call _cf_wait
02E5-            I    67
02E5-3E 20       I    68 (  6)     ld      a,CF_CMD_READ_SECTOR
02E7-ED 39 8F    I    69 ( 13)         out0    (CF_COMMAND_REG),a
02EA-            I    70
02EA-CD 22 03    I    71 ( 16)         call _cf_wait
02ED-            I    72
02ED-01 00 02    I    73 (  9)     ld  bc,512
02F0-            I    74       _cf_read_sector_loop:
02F0-ED 38 88    I    75 ( 12)     in0         a,(CF_DATA_REG)
02F3-DD 77 00    I    76 ( 15)     ld      (ix),a
02F6-DD 23       I    77 (  7)     inc     ix
02F8-0B          I    78 (  4)     dec bc
02F9-78          I    79 (  4)     ld a,b
02FA-B1          I    80 (  4)     or c
02FB-C2 F0 02    I    81 ( 6+)     jp nz,_cf_read_sector_loop
02FE-            I    82
02FE-C1          I    83 (  9)     pop bc
02FF-F1          I    84 (  9)     pop af
0300-C9          I    85 (  9)     ret
0301-            I    86
0301-            I    87       ; write 512 bits at (ix)
0301-            I    88       ; input : (ix) source address
0301-            I    89       ; output : (ix) points to the next 512 bytes
0301-            I    90       _cf_write_sector:
0301-F5          I    91 ( 11)     push af
0302-C5          I    92 ( 11)     push bc
0303-            I    93
0303-CD 22 03    I    94 ( 16)     call _cf_wait
0306-            I    95
0306-3E 30       I    96 (  6)     ld      a,CF_CMD_WRITE_SECTOR
0308-ED 39 8F    I    97 ( 13)         out0    (CF_COMMAND_REG),a
030B-            I    98
030B-CD 22 03    I    99 ( 16)         call _cf_wait
030E-            I   100
030E-01 00 02    I   101 (  9)     ld  bc,512
0311-            I   102       _cf_write_sector_loop:
0311-DD 7E 00    I   103 ( 14)     ld      a,(ix)
0314-ED 39 88    I   104 ( 13)     out0        (CF_DATA_REG),a
0317-DD 23       I   105 (  7)     inc     ix
0319-0B          I   106 (  4)     dec bc
031A-78          I   107 (  4)     ld a,b
031B-B1          I   108 (  4)     or c
031C-C2 11 03    I   109 ( 6+)     jp nz,_cf_write_sector_loop
031F-            I   110
031F-C1          I   111 (  9)     pop bc
0320-F1          I   112 (  9)     pop af
0321-C9          I   113 (  9)     ret
0322-            I   114
0322-            I   115       _cf_wait:
0322-F5          I   116 ( 11)                 push af
0323-            I   117       _cf_wait_loop:
0323-ED 38 8F    I   118 ( 12)                 in0     a,(CF_STATUS_REG)
0326-E6 80       I   119 (  6)                 and     $80
0328-FE 80       I   120 (  6)                 cp          $80
032A-28 F7       I   121 ( 6+)                 jr      z,_cf_wait_loop
032C-            I   122
032C-F1          I   123 (  9)                 pop     af
032D-C9          I   124 (  9)                 ret
032E-            I   125
032E-            I   126       ; input : (hl) address of LBA_B0
032E-            I   127       _cf_load_lba:
032E-F5          I   128 ( 11)     push af
032F-E5          I   129 ( 11)     push hl
0330-            I   130
0330-            I   131           ; set LBA address
0330-7E          I   132 (  6)     ld a,(hl)
0331-ED 39 8B    I   133 ( 13)     out0 (CF_LBA_B0),a
0334-23          I   134 (  4)     inc hl
0335-7E          I   135 (  6)     ld a,(hl)
0336-ED 39 8C    I   136 ( 13)     out0 (CF_LBA_B1),a
0339-23          I   137 (  4)     inc hl
033A-7E          I   138 (  6)     ld a,(hl)
033B-ED 39 8D    I   139 ( 13)     out0 (CF_LBA_B2),a
033E-23          I   140 (  4)     inc hl
033F-7E          I   141 (  6)     ld a,(hl)
0340-F6 E0       I   142 (  6)     or %11100000    ; bit 7=1 , bit 6= set LBA mode, bit 5=1
0342-ED 39 8E    I   143 ( 13)     out0 (CF_LBA_B3),a
0345-            I   144
0345-            I   145           ; read 1 sector
0345-3E 01       I   146 (  6)     ld a,1
0347-ED 39 8A    I   147 ( 13)         out0 (CF_SECTOR_COUNT_REG),a
034A-            I   148
034A-E1          I   149 (  9)     pop hl
034B-F1          I   150 (  9)     pop af
034C-C9          I   151 (  9)     ret
034D-            I   152
034D-            I   153
8F82-            I   154           .SM ram
8F82-            I   155
8F82-04 00       I   156       cf_lba .dw 4
8F84-            I   157
034D-            I   158           .SM code
034D-                154           .include ../bios/bios_util.asm
034D-            I     1       ; UTIL
034D-            I     2       ; ----------------------------------------------------------------------------
034D-            I     3
034D-            I     4       ; convert a byte to ASCII hex
034D-            I     5       ; input : a = number to conver
034D-            I     6       ; output : bc = 2 ascii bytes
034D-            I     7       _util_byte_to_ascii_hex:
034D-F5          I     8 ( 11)     push af
034E-            I     9
034E-47          I    10 (  4)     ld b,a
034F-E6 0F       I    11 (  6)     and $0F                     ; get lower 4 bits
0351-            I    12
0351-C6 30       I    13 (  6)     add '0'                        ; convert to ascii hex
0353-FE 3A       I    14 (  6)     cp ':'
0355-DA 5A 03    I    15 ( 6+)     jp C,_util_btah_1_AF
0358-C6 07       I    16 (  6)     add 'A'-':'
035A-            I    17       _util_btah_1_AF:
035A-            I    18
035A-4F          I    19 (  4)     ld c,a                  ; c <- ascii hex of lower 4 bits
035B-            I    20
035B-78          I    21 (  4)     ld a,b              ; get upper 4 bits
035C-0F          I    22 (  3)     rrca
035D-0F          I    23 (  3)     rrca
035E-0F          I    24 (  3)     rrca
035F-0F          I    25 (  3)     rrca
0360-E6 0F       I    26 (  6)     and $0F
0362-            I    27
0362-C6 30       I    28 (  6)     add '0'                   ; convert to ascii hex
0364-FE 3A       I    29 (  6)     cp ':'
0366-DA 6B 03    I    30 ( 6+)     jp C,_util_btah_2_AF
0369-C6 07       I    31 (  6)     add 'A'-':'
036B-            I    32       _util_btah_2_af:
036B-            I    33
036B-47          I    34 (  4)     ld b,a              ; b <- asci hex of upper 4 bits
036C-            I    35
036C-F1          I    36 (  9)     pop af
036D-C9          I    37 (  9)     ret
036E-            I    38
036E-            I    39
036E-            I    40       _util_init_cpu:
036E-            I    41
036E-            IS   42           .DO CLOCK>8
036E-            IS   43           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
036E-            IS   44           ld a,CMR_X2
036E-            IS   45           out0 (CMR),a
036E-            I    46           .FI
036E-            I    47
036E-            IS   48           .DO CLOCK>16
036E-            IS   49           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
036E-            IS   50           ld a,CCR_CD
036E-            IS   51           out0 (CCR),a
036E-            I    52           .FI
036E-            I    53
036E-AF          I    54 (  4)     xor a
036F-ED 39 36    I    55 ( 13)     out0 (RCR),a    ; Refresh disable
0372-            I    56
0372-            I    57           ; setup interrupts
0372-ED 56       I    58 (  6)     im 1    ; interrupt mode 1
0374-3E 00       I    59 (  6)     ld a,INT_BASE>>8  ; interrupts high order byte : 00H
0376-ED 47       I    60 (  6)     ld i,a
0378-3E 80       I    61 (  6)     ld a,INT_BASE&$FF ; interrupts low order byte : 80H
037A-ED 39 33    I    62 ( 13)     out0 (IL),a
037D-            I    63
037D-            I    64
037D-C9          I    65 (  9)     ret
037E-                155
8100-                156           .org $8100
8100-                157
8100-                158       sector  .bs 512
