0000-                  7
0008-                  8       CLOCK       .equ    8
0080-                  9       INT_BASE    .equ    $0080
0000-                 10
0000-                 11           .include ../include/z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TIF1        .equ $80
0040-            I   156       TCR_TIF0        .equ $40
0020-            I   157       TCR_TIE1        .equ $20
0010-            I   158       TCR_TIE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0034-            I   208       ITC             .equ $34
0000-            I   209
0080-            I   210       ITC_TRAP        .equ $80
0040-            I   211       ITC_UFO         .equ $40
0004-            I   212       ITC_ITE2        .equ $04
0002-            I   213       ITC_ITE1        .equ $02
0001-            I   214       ITC_ITE0        .equ $01
0000-            I   215
0000-            I   216
0000-            I   217       ; Refresh
0000-            I   218       ; ---------------------------------------------------------------------------
0000-            I   219
0000-            I   220       ; Refresh Control Register (RCR: 36H)
0036-            I   221       RCR            .equ $36
0080-            I   222       RCR_REFE       .equ $80
0040-            I   223       RCR_REFW       .equ $40
0002-            I   224       RCR_CYC1       .equ $02
0001-            I   225       RCR_CYC0       .equ $01
0000-            I   226
0000-            I   227       ; MMU
0000-            I   228       ; ---------------------------------------------------------------------------
0000-            I   229
0000-            I   230       ; MMU Common Base Register (CBR: 38H)
0038-            I   231       CBR            .equ $38
0000-            I   232       ; MMU Bank Base Register (BBR: 39H)
0039-            I   233       BBR            .equ $39
0000-            I   234       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   235       CBAR           .equ $3A
0000-            I   236       ; I/O
0000-            I   237       ; ---------------------------------------------------------------------------
0000-            I   238
0000-            I   239       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   240       OMCR           .equ $3E
0000-            I   241
0080-            I   242       OMCR_M1E       .equ $80
0040-            I   243       OMCR_M1TE      .equ $40
0000-            I   244       ;OMCR_M1E       .equ $20
0000-            I   245
0000-            I   246       ; I/O Control Register (ICR: 3FH)
003F-            I   247       ICR            .equ $3F
0000-            I   248
0080-            I   249       ICR_IOA7       .equ $80
0040-            I   250       ICR_IOA6       .equ $40
0020-            I   251       ICR_IOSTP      .equ $20
0000-                 12
0000-                 13           .org $0000
0000-C3 00 01         14 (  9)     jp mreset        ; RESET
0003-                 15
0038-                 16          .org $0038
0038-C3 5C 01         17 (  9)     jp int_noop    ; INT0
003B-                 18
0066-                 19           .org $0066
0066-C3 5C 01         20 (  9)     jp int_noop    ; NMI
0069-                 21
0069-                 22       ; interrupt vector table
0080-                 23           .org $0080
0080-5C 01            24           .dw int_noop    ; INT1
0082-5C 01            25           .dw int_noop    ; INT2
0084-5C 01            26           .dw int_noop    ; PRT0
0086-5C 01            27           .dw int_noop    ; PRT1
0088-5C 01            28           .dw int_noop    ; DMA0
008A-5C 01            29           .dw int_noop    ; DMA1
008C-5C 01            30           .dw int_noop    ; CSIO
008E-5C 01            31           .dw int_noop   ; ASCI0
0090-5C 01            32           .dw int_noop    ; ASCI1
0092-                 33
0100-                 34           .org $0100
0100-                 35       mreset:
0100-                 36
0100-F3               37 (  3)     di ; disable interrupts
0101-                 38
0101-                 39           ; MMU
0101-                 40           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0101-                 41           ; $8000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0101-                 42           ; $0000-$7FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0101-                 43
0101-3E F2            44 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0103-ED 39 3A         45 ( 13)     out0 (CBAR),a
0106-3E 11            46 (  6)     ld a,$11 ; Common Area Base = $20000
0108-ED 39 38         47 ( 13)     out0 (CBR),a
010B-3E 7E            48 (  6)     ld a,$7E ; Bank Area Base = $80000
010D-ED 39 39         49 ( 13)     out0 (BBR),a
0110-                 50
0110-                 51
0110-31 FF 20         52 (  9)     ld sp,$20FF ; Stack pointer = $20FF
0113-                 53
0113-CD 78 03         54 ( 16)     call _util_init_cpu
0116-                 55
0116-CD 2F 02         56 ( 16)     call _asci1_init
0119-                 57
0119-                 58           ;ei      ; enable interrupts
0119-                 59
0119-                 60
0119-                 61       main:
0119-                 62
0119-21 80 01         63 (  9)     ld hl,str_welcome
011C-CD B0 02         64 ( 16)     call _asci1_puts
011F-                 65
011F-                 66       ;test:
011F-                 67       ;    in0 a,($88+7)
011F-                 68       ;    call _util_byte_to_ascii_hex
011F-                 69       ;    ld a,b
011F-                 70       ;    call _asci1_putc
011F-                 71       ;    ld a,c
011F-                 72       ;    call _asci1_putc
011F-                 73
011F-                 74       ;    out0 ($88),a
011F-                 75       ;    jp test
011F-                 76
011F-                 77
011F-                 78
011F-CD C0 02         79 ( 16)     call _cf_init
0122-                 80
0122-CD 6D 01         81 ( 16)     call test_data_sector
0125-                 82
0125-21 7C 01         83 (  9)     ld hl,lba_addr
0128-CD 38 03         84 ( 16)     call _cf_load_lba
012B-DD 21 00 81      85 ( 12)     ld ix,sector
012F-CD 0B 03         86 ( 16)     call _cf_write_sector
0132-                 87
0132-CD 5E 01         88 ( 16)     call zero_sector
0135-                 89
0135-21 7C 01         90 (  9)     ld hl,lba_addr
0138-CD 38 03         91 ( 16)     call _cf_load_lba
013B-DD 21 00 81      92 ( 12)     ld ix,sector
013F-CD EA 02         93 ( 16)     call _cf_read_sector
0142-                 94
0142-21 00 81         95 (  9)     ld hl,sector
0145-                 96
0145-11 00 02         97 (  9)     ld de,512
0148-                 98       display_sector_loop:
0148-7E               99 (  6)     ld a,(hl)
0149-23              100 (  4)     inc hl
014A-CD 57 03        101 ( 16)     call _util_byte_to_ascii_hex
014D-78              102 (  4)     ld a,b
014E-CD A3 02        103 ( 16)     call _asci1_putc
0151-79              104 (  4)     ld a,c
0152-CD A3 02        105 ( 16)     call _asci1_putc
0155-1B              106 (  4)     dec de
0156-                107
0156-7A              108 (  4)     ld a,d
0157-B3              109 (  4)     or e
0158-20 EE           110 ( 6+)     jr nz,display_sector_loop
015A-                111
015A-                112       loop:
015A-18 FE           113 (  8)     jr loop
015C-                114
015C-                115       int_noop:
015C-FB              116 (  3)     ei
015D-C9              117 (  9)     ret
015E-                118
015E-                119       zero_sector:
015E-21 00 81        120 (  9)     ld hl,sector
0161-11 00 02        121 (  9)     ld de,512
0164-                122       zero_sector_loop:
0164-AF              123 (  4)     xor a
0165-23              124 (  4)     inc hl
0166-77              125 (  7)     ld (hl),a
0167-1B              126 (  4)     dec de
0168-7A              127 (  4)     ld a,d
0169-B3              128 (  4)     or e
016A-20 F8           129 ( 6+)     jr nz,zero_sector_loop
016C-C9              130 (  9)     ret
016D-                131
016D-                132       test_data_sector:
016D-21 00 81        133 (  9)     ld hl,sector
0170-11 00 02        134 (  9)     ld de,512
0173-                135       test_data_sector_loop:
0173-7B              136 (  4)     ld a,e
0174-23              137 (  4)     inc hl
0175-77              138 (  7)     ld (hl),a
0176-1B              139 (  4)     dec de
0177-7A              140 (  4)     ld a,d
0178-B3              141 (  4)     or e
0179-20 F8           142 ( 6+)     jr nz,test_data_sector_loop
017B-C9              143 (  9)     ret
017C-                144
017C-                145
017C-00 00 00 00     146       lba_addr    .db 0,0,0,0
0180-                147
0180-1B 5B 32 4A 
     1B 5B 48 54 
     65 73 74 20 
     43 6F 6D 70 
     61 63 74 2D 
     46 6C 61 73 
     68 0D 0A 0D 
     0A 00           148       str_welcome:    .db $1B,"[2J",$1B,"[H","Test Compact-Flash",13,10,13,10,0
019E-                149
0000-                150           .SM ram
8F00-                151           .ORG $8F00
8F00-                152
019E-                153           .SM code
019E-                154           .include ../bios/bios_asci.asm
019E-            I     1       ; ASCI
019E-            I     2       ; ----------------------------------------------------------------------------
019E-            I     3
019E-            I     4       ; init ASCI0
019E-            I     5       ; input : none
019E-            I     6       ; output : none
019E-            I     7       _asci0_init:
019E-            I     8           ; RE : Receiver Enable
019E-            I     9           ; TE : Transmitter Enable
019E-            I    10           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
019E-3E 64       I    11 (  6)     ld a,CNTLA0_RE|CNTLA0_TE|CNTLA0_MOD2
01A0-ED 39 00    I    12 ( 13)     out0 (CNTLA0),a
01A3-            I    13
01A3-            I    14           ; DR=0
01A3-3E 00       I    15 (  6)     ld a,0
01A5-ED 39 02    I    16 ( 13)     out0 (CNTLB0),a
01A8-            I    17
01A8-            I    18           ; BRG0 : Enable 16 bit BRG counter
01A8-            I    19           ; X1 ( + DR=0) : Clock mode = /1
01A8-3E 18       I    20 (  6)     ld a,ASEXT0_BRG0|ASEXT0_X1
01AA-ED 39 12    I    21 ( 13)     out0 (ASEXT0),a
01AD-            I    22
01AD-            I    23           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
01AD-            I    24           ; TC = fphi/(2*baud rate*clock mode) - 2
01AD-            I    25           ; TC = 32000000/(2*9600*1) - 2
01AD-            IS   26           .DO CLOCK=32
01AD-            IS   27           ld  hl,$0681
01AD-            I    28           .EL
01AD-            IS   29           .DO CLOCK=16
01AD-            IS   30           ld hl,$033F
01AD-            I    31           .EL
01AD-21 9F 01    I    32 (  9)     ld hl,$019F
01B0-            I    33           .FI
01B0-            I    34           .FI
01B0-ED 29 1A    I    35 ( 13)     out0 (ASTC0L),l
01B3-ED 21 1B    I    36 ( 13)     out0 (ASTC0H),h
01B6-            I    37
01B6-            I    38           ; RIE : enable Rx Interrupt
01B6-3E 08       I    39 (  6)     ld a,STAT0_RIE
01B8-ED 39 04    I    40 ( 13)     out0 (STAT0),a
01BB-            I    41
01BB-AF          I    42 (  4)     xor a                  ; init RX buffer
01BC-32 00 8F    I    43 ( 13)     ld (asci0_buffer_pos),a
01BF-            I    44
01BF-C9          I    45 (  9)     ret
01C0-            I    46
01C0-            I    47       ; INT ASCI0
01C0-            I    48       ; put received char in ASCI0 RX buffer
01C0-            I    49       _int_asci0:
01C0-F5          I    50 ( 11)     push af
01C1-C5          I    51 ( 11)     push bc
01C2-D5          I    52 ( 11)     push de
01C3-E5          I    53 ( 11)     push hl
01C4-            I    54
01C4-            I    55       _int_asci0_test:
01C4-ED 38 04    I    56 ( 12)     in0 a,(STAT0)                ; check if there is a char in the FIFO
01C7-ED 64 80    I    57 (  9)     tst STAT0_RDRF
01CA-28 21       I    58 ( 6+)     jr Z,_int_asci0_exit
01CC-            I    59
01CC-ED 08 08    I    60 ( 12)     in0 c,(RDR0)                ; c <- received char
01CF-            I    61
01CF-            I    62           ; check for error
01CF-E6 70       I    63 (  6)     and STAT0_OVRN|STAT0_PE|STAT0_FE
01D1-28 0A       I    64 ( 6+)     jr Z,_int_asci0_ok
01D3-            I    65
01D3-ED 38 00    I    66 ( 12)     in0 a,(CNTLA0)           ; clear error
01D6-E6 F7       I    67 (  6)     and CNTLA0_EFR!$FF
01D8-ED 39 00    I    68 ( 13)     out0 (CNTLA0),a
01DB-18 E7       I    69 (  8)     jr _int_asci0_test                    ; exit
01DD-            I    70
01DD-            I    71       _int_asci0_ok:
01DD-16 00       I    72 (  6)     ld d,0                      ; hl <- asci0_buffer+(asci0_buffer_pos)
01DF-3A 00 8F    I    73 ( 12)     ld a,(asci0_buffer_pos)
01E2-5F          I    74 (  4)     ld e,a
01E3-21 01 8F    I    75 (  9)     ld hl,asci0_buffer
01E6-19          I    76 (  7)     add hl,de
01E7-            I    77
01E7-3C          I    78 (  4)     inc a                       ; ; inc kbd_buffer_pos
01E8-32 00 8F    I    79 ( 13)     ld (asci0_buffer_pos),a
01EB-            I    80
01EB-79          I    81 (  4)     ld a,c                      ; a <- received char
01EC-77          I    82 (  7)     ld (hl),a                   ; save it to asci0_buffer+(asci0_buffer_pos)
01ED-            I    83
01ED-            I    84       _int_asci0_exit:
01ED-E1          I    85 (  9)     pop hl
01EE-D1          I    86 (  9)     pop de
01EF-C1          I    87 (  9)     pop bc
01F0-F1          I    88 (  9)     pop af
01F1-FB          I    89 (  3)     ei
01F2-C9          I    90 (  9)     ret
01F3-            I    91
01F3-            I    92       ; get a char on ASCI0 RX buffer
01F3-            I    93       ; input : none
01F3-            I    94       ; output : a <- received char
01F3-            I    95       _asci0_getc:
01F3-E5          I    96 ( 11)     push hl
01F4-D5          I    97 ( 11)     push de
01F5-            I    98
01F5-3A 00 8F    I    99 ( 12)     ld a,(asci0_buffer_pos)     ; load buffer position
01F8-F6 00       I   100 (  6)     or 0
01FA-CA 09 02    I   101 ( 6+)     jp  Z,_asci0_getc_exit      ; exit if 0
01FD-            I   102
01FD-3D          I   103 (  4)     dec a                       ; decrement and update buffer position
01FE-32 00 8F    I   104 ( 13)     ld (asci0_buffer_pos),a
0201-            I   105
0201-16 00       I   106 (  6)     ld d,0                      ; get char in buffer
0203-5F          I   107 (  4)     ld e,a
0204-21 01 8F    I   108 (  9)     ld hl,asci0_buffer
0207-19          I   109 (  7)     add hl,de
0208-7E          I   110 (  6)     ld a,(hl)                   ; into A register
0209-            I   111
0209-            I   112       _asci0_getc_exit:
0209-            I   113
0209-D1          I   114 (  9)     pop de
020A-E1          I   115 (  9)     pop hl
020B-C9          I   116 (  9)     ret
020C-            I   117
020C-            I   118       ; check if rx buffer is empty
020C-            I   119       ; input : NONE
020C-            I   120       ; output : flag=Z if empty
020C-            I   121       _asci0_rx_empty:
020C-3A 00 8F    I   122 ( 12)     ld a,(asci0_buffer_pos)
020F-FE 00       I   123 (  6)     cp 0
0211-C9          I   124 (  9)     ret
0212-            I   125
0212-            I   126       ; put a char on asci0
0212-            I   127       ; input : a = char ascii code
0212-            I   128       ; output : none
0212-            I   129       _asci0_putc:
0212-F5          I   130 ( 11)     push af
0213-            I   131
0213-            I   132       _asci0_putc_wait:  ; wait for asci0 TX ready
0213-ED 38 04    I   133 ( 12)     in0 a,(STAT0) ; TDRE=1 -> empty
0216-E6 02       I   134 (  6)     and STAT0_TDRE
0218-28 F9       I   135 ( 6+)     jr Z,_asci0_putc_wait
021A-            I   136
021A-F1          I   137 (  9)     pop af
021B-ED 39 06    I   138 ( 13)     out0 (TDR0),a ; output the char to asci0
021E-            I   139
021E-C9          I   140 (  9)     ret
021F-            I   141
021F-            I   142       ; put a string on asci0
021F-            I   143       ; input : (hl) = address of null terminated string
021F-            I   144       ; output : none
021F-            I   145       _asci0_puts:
021F-E5          I   146 ( 11)     push hl
0220-F5          I   147 ( 11)     push af
0221-            I   148
0221-            I   149       _asci0_puts_loop:
0221-7E          I   150 (  6)     ld a,(hl)
0222-F6 00       I   151 (  6)     or 0
0224-28 06       I   152 ( 6+)     jr z,_asci0_puts_exit
0226-CD 12 02    I   153 ( 16)     call _asci0_putc
0229-23          I   154 (  4)     inc hl
022A-18 F5       I   155 (  8)     jr _asci0_puts_loop
022C-            I   156
022C-            I   157       _asci0_puts_exit:
022C-F1          I   158 (  9)     pop af
022D-E1          I   159 (  9)     pop hl
022E-C9          I   160 (  9)     ret
022F-            I   161
022F-            I   162       _asci1_init:
022F-            I   163           ; RE : Receiver Enable
022F-            I   164           ; TE : Transmitter Enable
022F-            I   165           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
022F-3E 64       I   166 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
0231-ED 39 01    I   167 ( 13)     out0 (CNTLA1),a
0234-            I   168
0234-            I   169           ; DR=0
0234-3E 00       I   170 (  6)     ld a,0
0236-ED 39 03    I   171 ( 13)     out0 (CNTLB1),a
0239-            I   172
0239-            I   173           ; BRG0 : Enable 16 bit BRG counter
0239-            I   174           ; X1 ( + DR=0) : Clock mode = /1
0239-3E 18       I   175 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
023B-ED 39 13    I   176 ( 13)     out0 (ASEXT1),a
023E-            I   177
023E-            I   178           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
023E-            I   179           ; TC = fphi/(2*baud rate*clock mode) - 2
023E-            I   180           ; TC = 32000000/(2*9600*1) - 2
023E-            IS  181           .DO CLOCK=32
023E-            IS  182           ld  hl,$0681 ; 9603 bauds
023E-            I   183           .EL
023E-            IS  184           .DO CLOCK=16
023E-            IS  185           ld hl,$033F ; 9604 bauds
023E-            I   186           .EL
023E-21 9F 01    I   187 (  9)     ld hl,$019F ; 9592 bauds
0241-            I   188           .FI
0241-            I   189           .FI
0241-ED 29 1C    I   190 ( 13)     out0 (ASTC1L),l
0244-ED 21 1D    I   191 ( 13)     out0 (ASTC1H),h
0247-            I   192
0247-            I   193           ; RIE : enable Rx Interrupt
0247-3E 08       I   194 (  6)     ld a,STAT1_RIE
0249-ED 39 05    I   195 ( 13)     out0 (STAT1),a
024C-            I   196
024C-AF          I   197 (  4)     xor a                  ; init RX buffer
024D-32 41 8F    I   198 ( 13)     ld (asci1_buffer_pos),a
0250-            I   199
0250-C9          I   200 (  9)     ret
0251-            I   201
0251-            I   202       _int_asci1:
0251-F5          I   203 ( 11)     push af
0252-C5          I   204 ( 11)     push bc
0253-D5          I   205 ( 11)     push de
0254-E5          I   206 ( 11)     push hl
0255-            I   207
0255-            I   208       _int_asci1_test:
0255-ED 38 05    I   209 ( 12)     in0 a,(STAT1)                ; check if there is a char in the FIFO
0258-ED 64 80    I   210 (  9)     tst STAT1_RDRF
025B-28 21       I   211 ( 6+)     jr Z,_int_asci1_exit
025D-            I   212
025D-ED 08 09    I   213 ( 12)     in0 c,(RDR1)                ; c <- received char
0260-            I   214
0260-            I   215           ; check for error
0260-E6 70       I   216 (  6)     and STAT1_OVRN|STAT1_PE|STAT1_FE
0262-28 0A       I   217 ( 6+)     jr Z,_int_asci1_ok
0264-            I   218
0264-ED 38 01    I   219 ( 12)     in0 a,(CNTLA1)           ; clear error
0267-E6 F7       I   220 (  6)     and CNTLA1_EFR!$FF
0269-ED 39 01    I   221 ( 13)     out0 (CNTLA1),a
026C-18 E7       I   222 (  8)     jr _int_asci1_test                    ; exit
026E-            I   223
026E-            I   224       _int_asci1_ok:
026E-16 00       I   225 (  6)     ld d,0                      ; hl <- asci0_buffer+(asci0_buffer_pos)
0270-3A 41 8F    I   226 ( 12)     ld a,(asci1_buffer_pos)
0273-5F          I   227 (  4)     ld e,a
0274-21 42 8F    I   228 (  9)     ld hl,asci1_buffer
0277-19          I   229 (  7)     add hl,de
0278-            I   230
0278-3C          I   231 (  4)     inc a                       ; ; inc kbd_buffer_pos
0279-32 41 8F    I   232 ( 13)     ld (asci1_buffer_pos),a
027C-            I   233
027C-79          I   234 (  4)     ld a,c                      ; a <- received char
027D-77          I   235 (  7)     ld (hl),a                   ; save it to  asci1_buffer+(asci1_buffer_pos)
027E-            I   236
027E-            I   237       _int_asci1_exit:
027E-E1          I   238 (  9)     pop hl
027F-D1          I   239 (  9)     pop de
0280-C1          I   240 (  9)     pop bc
0281-F1          I   241 (  9)     pop af
0282-FB          I   242 (  3)     ei
0283-C9          I   243 (  9)     ret
0284-            I   244
0284-            I   245       _asci1_getc:
0284-E5          I   246 ( 11)     push hl
0285-D5          I   247 ( 11)     push de
0286-            I   248
0286-3A 41 8F    I   249 ( 12)     ld a,(asci1_buffer_pos)     ; load buffer position
0289-F6 00       I   250 (  6)     or 0
028B-CA 9A 02    I   251 ( 6+)     jp  Z,_asci1_getc_exit      ; exit if 0
028E-            I   252
028E-3D          I   253 (  4)     dec a                       ; decrement and update buffer position
028F-32 41 8F    I   254 ( 13)     ld (asci1_buffer_pos),a
0292-            I   255
0292-16 00       I   256 (  6)     ld d,0                      ; get char in buffer
0294-5F          I   257 (  4)     ld e,a
0295-21 42 8F    I   258 (  9)     ld hl,asci1_buffer
0298-19          I   259 (  7)     add hl,de
0299-7E          I   260 (  6)     ld a,(hl)                   ; into A register
029A-            I   261
029A-            I   262       _asci1_getc_exit:
029A-            I   263
029A-D1          I   264 (  9)     pop de
029B-E1          I   265 (  9)     pop hl
029C-C9          I   266 (  9)     ret
029D-            I   267
029D-            I   268       ; check if rx buffer is empty
029D-            I   269       ; input : NONE
029D-            I   270       ; output : flag=Z if empty
029D-            I   271       _asci1_rx_empty:
029D-3A 41 8F    I   272 ( 12)     ld a,(asci1_buffer_pos)
02A0-FE 00       I   273 (  6)     cp 0
02A2-C9          I   274 (  9)     ret
02A3-            I   275
02A3-            I   276       ; put a char on asci1
02A3-            I   277       ; input : a = char ascii code
02A3-            I   278       ; output : none
02A3-            I   279       _asci1_putc:
02A3-F5          I   280 ( 11)     push af
02A4-            I   281
02A4-            I   282       _asci1_putc_wait:  ; wait for asci0 TX ready
02A4-ED 38 05    I   283 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
02A7-E6 02       I   284 (  6)     and STAT1_TDRE
02A9-28 F9       I   285 ( 6+)     jr Z,_asci1_putc_wait
02AB-            I   286
02AB-F1          I   287 (  9)     pop af
02AC-ED 39 07    I   288 ( 13)     out0 (TDR1),a ; output the char to asci0
02AF-            I   289
02AF-C9          I   290 (  9)     ret
02B0-            I   291
02B0-            I   292       ; put a string on asci1
02B0-            I   293       ; input : (hl) = address of null terminated string
02B0-            I   294       ; output : none
02B0-            I   295       _asci1_puts:
02B0-E5          I   296 ( 11)     push hl
02B1-F5          I   297 ( 11)     push af
02B2-            I   298
02B2-            I   299       _asci1_puts_loop:
02B2-7E          I   300 (  6)     ld a,(hl)
02B3-F6 00       I   301 (  6)     or 0
02B5-28 06       I   302 ( 6+)     jr z,_asci1_puts_exit
02B7-CD A3 02    I   303 ( 16)     call _asci1_putc
02BA-23          I   304 (  4)     inc hl
02BB-18 F5       I   305 (  8)     jr _asci1_puts_loop
02BD-            I   306
02BD-            I   307       _asci1_puts_exit:
02BD-F1          I   308 (  9)     pop af
02BE-E1          I   309 (  9)     pop hl
02BF-C9          I   310 (  9)     ret
02C0-            I   311
02C0-            I   312       ; RAM
8F00-            I   313           .SM ram
8F00-            I   314
8F00-            I   315       asci0_buffer_pos:   .bs 1
8F01-            I   316       asci0_buffer:       .bs 64
8F41-            I   317       asci1_buffer_pos:   .bs 1
8F42-            I   318       asci1_buffer:       .bs 64
8F82-            I   319
02C0-            I   320           .SM code
02C0-                155           .include ../bios/bios_cf.asm
02C0-            I     1       ; CF
02C0-            I     2       ; ----------------------------------------------------------------------------
02C0-            I     3
0088-            I     4       CF_BASE .EQU $88
02C0-            I     5
0088-            I     6       CF_DATA_REG             .EQU    CF_BASE+0       ; Data Register
0089-            I     7       CF_ERROR_REG        .EQU        CF_BASE+1       ; Error Register (Read)
0089-            I     8       CF_FEATURE_REG      .EQU    CF_BASE+1   ; Feature Register (Write)
008A-            I     9       CF_SECTOR_COUNT_REG .EQU    CF_BASE+2   ; Sector count register
008B-            I    10       CF_SECTOR_NUM_REG   .EQU    CF_BASE+3   ; Sector number
008B-            I    11       CF_LBA_B0           .EQU    CF_BASE+3   ; LBA byte 0 LSB (bits 07..00)
008C-            I    12       CF_CYL_LOW_REG      .EQU    CF_BASE+4   ; Cylinder low register
008C-            I    13       CF_LBA_B1           .EQU    CF_BASE+4   ; LBA byte 1 (bits 15..08)
008D-            I    14       CF_CYL_HIGH_REG     .EQU    CF_BASE+5   ; Cylinder high register
008D-            I    15       CF_LBA_B2           .EQU    CF_BASE+5   ; LBA byte 3 (bits 23..16)
008E-            I    16       CF_DRIVE_HEAD_REG   .EQU    CF_BASE+6   ; Drive head register
008E-            I    17       CF_LBA_B3           .EQU    CF_BASE+6   ; LBA byte 4 MSB (bits 27..24)
008F-            I    18       CF_STATUS_REG       .EQU    CF_BASE+7   ; Status register (read)
008F-            I    19       CF_COMMAND_REG      .EQU    CF_BASE+7   ; Command Reg (write)
02C0-            I    20
02C0-            I    21
0004-            I    22       CF_CMD_RESET        .EQU    $04
0020-            I    23       CF_CMD_READ_SECTOR  .EQU    $20
0030-            I    24       CF_CMD_WRITE_SECTOR .EQU    $30
00EF-            I    25       CF_CMD_SET_FEATURE  .EQU    $EF
02C0-            I    26
0001-            I    27       CF_FEATURE_8BIT     .EQU    $01
0082-            I    28       CF_FEATURE_NOCACHE  .EQU    $82
02C0-            I    29
02C0-            I    30       _cf_init:
02C0-F5          I    31 ( 11)     push af
02C1-            I    32
02C1-            I    33           ; reset command
02C1-3E 04       I    34 (  6)     ld      a,CF_CMD_RESET
02C3-ED 39 8F    I    35 ( 13)     out0    (CF_COMMAND_REG),a
02C6-            I    36
02C6-            I    37           ; set lba mode
02C6-CD 2C 03    I    38 ( 16)     call    _cf_wait
02C9-3E E0       I    39 (  6)     ld      a,%11100000 ; bit 7=1 , bit 6= set LBA mode, bit 5=1
02CB-ED 39 8E    I    40 ( 13)     out0    (CF_LBA_B3),a
02CE-            I    41
02CE-            I    42           ; set 8 bits mode
02CE-CD 2C 03    I    43 ( 16)     call    _cf_wait
02D1-3E 01       I    44 (  6)         ld      a,CF_FEATURE_8BIT
02D3-ED 39 89    I    45 ( 13)         out0    (CF_FEATURE_REG),a
02D6-3E EF       I    46 (  6)         ld      a,CF_CMD_SET_FEATURE
02D8-ED 39 8F    I    47 ( 13)         out0    (CF_COMMAND_REG),a
02DB-            I    48
02DB-            I    49           ; no write cache
02DB-CD 2C 03    I    50 ( 16)     call    _cf_wait
02DE-3E 82       I    51 (  6)         ld      a,CF_FEATURE_NOCACHE
02E0-ED 39 89    I    52 ( 13)         out0    (CF_FEATURE_REG),a
02E3-3E EF       I    53 (  6)         ld      a,CF_CMD_SET_FEATURE
02E5-ED 39 8F    I    54 ( 13)         out0    (CF_COMMAND_REG),a
02E8-            I    55
02E8-F1          I    56 (  9)     pop af
02E9-C9          I    57 (  9)     ret
02EA-            I    58
02EA-            I    59       ; read 512 bits into (ix)
02EA-            I    60       ; input : (ix) destination address
02EA-            I    61       ; output : (ix) points to the next 512 bytes
02EA-            I    62       _cf_read_sector:
02EA-F5          I    63 ( 11)     push af
02EB-C5          I    64 ( 11)     push bc
02EC-            I    65
02EC-CD 2C 03    I    66 ( 16)     call _cf_wait
02EF-            I    67
02EF-3E 20       I    68 (  6)     ld      a,CF_CMD_READ_SECTOR
02F1-ED 39 8F    I    69 ( 13)         out0    (CF_COMMAND_REG),a
02F4-            I    70
02F4-CD 2C 03    I    71 ( 16)         call _cf_wait
02F7-            I    72
02F7-01 00 02    I    73 (  9)     ld  bc,512
02FA-            I    74       _cf_read_sector_loop:
02FA-ED 38 88    I    75 ( 12)     in0         a,(CF_DATA_REG)
02FD-DD 77 00    I    76 ( 15)     ld      (ix),a
0300-DD 23       I    77 (  7)     inc     ix
0302-0B          I    78 (  4)     dec bc
0303-78          I    79 (  4)     ld a,b
0304-B1          I    80 (  4)     or c
0305-C2 FA 02    I    81 ( 6+)     jp nz,_cf_read_sector_loop
0308-            I    82
0308-C1          I    83 (  9)     pop bc
0309-F1          I    84 (  9)     pop af
030A-C9          I    85 (  9)     ret
030B-            I    86
030B-            I    87       ; write 512 bits at (ix)
030B-            I    88       ; input : (ix) source address
030B-            I    89       ; output : (ix) points to the next 512 bytes
030B-            I    90       _cf_write_sector:
030B-F5          I    91 ( 11)     push af
030C-C5          I    92 ( 11)     push bc
030D-            I    93
030D-CD 2C 03    I    94 ( 16)     call _cf_wait
0310-            I    95
0310-3E 30       I    96 (  6)     ld      a,CF_CMD_WRITE_SECTOR
0312-ED 39 8F    I    97 ( 13)         out0    (CF_COMMAND_REG),a
0315-            I    98
0315-CD 2C 03    I    99 ( 16)         call _cf_wait
0318-            I   100
0318-01 00 02    I   101 (  9)     ld  bc,512
031B-            I   102       _cf_write_sector_loop:
031B-DD 7E 00    I   103 ( 14)     ld      a,(ix)
031E-ED 39 88    I   104 ( 13)     out0        (CF_DATA_REG),a
0321-DD 23       I   105 (  7)     inc     ix
0323-0B          I   106 (  4)     dec bc
0324-78          I   107 (  4)     ld a,b
0325-B1          I   108 (  4)     or c
0326-C2 1B 03    I   109 ( 6+)     jp nz,_cf_write_sector_loop
0329-            I   110
0329-C1          I   111 (  9)     pop bc
032A-F1          I   112 (  9)     pop af
032B-C9          I   113 (  9)     ret
032C-            I   114
032C-            I   115       _cf_wait:
032C-F5          I   116 ( 11)                 push af
032D-            I   117       _cf_wait_loop:
032D-ED 38 8F    I   118 ( 12)                 in0     a,(CF_STATUS_REG)
0330-E6 80       I   119 (  6)                 and     $80
0332-FE 80       I   120 (  6)                 cp          $80
0334-28 F7       I   121 ( 6+)                 jr      z,_cf_wait_loop
0336-            I   122
0336-F1          I   123 (  9)                 pop     af
0337-C9          I   124 (  9)                 ret
0338-            I   125
0338-            I   126       ; input : (hl) address of LBA_B0
0338-            I   127       _cf_load_lba:
0338-F5          I   128 ( 11)     push af
0339-E5          I   129 ( 11)     push hl
033A-            I   130
033A-            I   131           ; set LBA address
033A-7E          I   132 (  6)     ld a,(hl)
033B-ED 39 8B    I   133 ( 13)     out0 (CF_LBA_B0),a
033E-23          I   134 (  4)     inc hl
033F-7E          I   135 (  6)     ld a,(hl)
0340-ED 39 8C    I   136 ( 13)     out0 (CF_LBA_B1),a
0343-23          I   137 (  4)     inc hl
0344-7E          I   138 (  6)     ld a,(hl)
0345-ED 39 8D    I   139 ( 13)     out0 (CF_LBA_B2),a
0348-23          I   140 (  4)     inc hl
0349-7E          I   141 (  6)     ld a,(hl)
034A-F6 E0       I   142 (  6)     or %11100000    ; bit 7=1 , bit 6= set LBA mode, bit 5=1
034C-ED 39 8E    I   143 ( 13)     out0 (CF_LBA_B3),a
034F-            I   144
034F-            I   145           ; read 1 sector
034F-3E 01       I   146 (  6)     ld a,1
0351-ED 39 8A    I   147 ( 13)         out0 (CF_SECTOR_COUNT_REG),a
0354-            I   148
0354-E1          I   149 (  9)     pop hl
0355-F1          I   150 (  9)     pop af
0356-C9          I   151 (  9)     ret
0357-            I   152
0357-            I   153
8F82-            I   154           .SM ram
8F82-            I   155
8F82-04 00       I   156       cf_lba .dw 4
8F84-            I   157
0357-            I   158           .SM code
0357-                156           .include ../bios/bios_util.asm
0357-            I     1       ; UTIL
0357-            I     2       ; ----------------------------------------------------------------------------
0357-            I     3
0357-            I     4       ; convert a byte to ASCII hex
0357-            I     5       ; input : a = number to conver
0357-            I     6       ; output : bc = 2 ascii bytes
0357-            I     7       _util_byte_to_ascii_hex:
0357-F5          I     8 ( 11)     push af
0358-            I     9
0358-47          I    10 (  4)     ld b,a
0359-E6 0F       I    11 (  6)     and $0F                     ; get lower 4 bits
035B-            I    12
035B-C6 30       I    13 (  6)     add '0'                        ; convert to ascii hex
035D-FE 3A       I    14 (  6)     cp ':'
035F-DA 64 03    I    15 ( 6+)     jp C,_util_btah_1_AF
0362-C6 07       I    16 (  6)     add 'A'-':'
0364-            I    17       _util_btah_1_AF:
0364-            I    18
0364-4F          I    19 (  4)     ld c,a                  ; c <- ascii hex of lower 4 bits
0365-            I    20
0365-78          I    21 (  4)     ld a,b              ; get upper 4 bits
0366-0F          I    22 (  3)     rrca
0367-0F          I    23 (  3)     rrca
0368-0F          I    24 (  3)     rrca
0369-0F          I    25 (  3)     rrca
036A-E6 0F       I    26 (  6)     and $0F
036C-            I    27
036C-C6 30       I    28 (  6)     add '0'                   ; convert to ascii hex
036E-FE 3A       I    29 (  6)     cp ':'
0370-DA 75 03    I    30 ( 6+)     jp C,_util_btah_2_AF
0373-C6 07       I    31 (  6)     add 'A'-':'
0375-            I    32       _util_btah_2_af:
0375-            I    33
0375-47          I    34 (  4)     ld b,a              ; b <- asci hex of upper 4 bits
0376-            I    35
0376-F1          I    36 (  9)     pop af
0377-C9          I    37 (  9)     ret
0378-            I    38
0378-            I    39
0378-            I    40       _util_init_cpu:
0378-            I    41
0378-            IS   42           .DO CLOCK>8
0378-            IS   43           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0378-            IS   44           ld a,CMR_X2
0378-            IS   45           out0 (CMR),a
0378-            I    46           .FI
0378-            I    47
0378-            IS   48           .DO CLOCK>16
0378-            IS   49           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0378-            IS   50           ld a,CCR_CD
0378-            IS   51           out0 (CCR),a
0378-            I    52           .FI
0378-            I    53
0378-AF          I    54 (  4)     xor a
0379-ED 39 36    I    55 ( 13)     out0 (RCR),a    ; Refresh disable
037C-            I    56
037C-            I    57           ; setup interrupts
037C-ED 56       I    58 (  6)     im 1    ; interrupt mode 1
037E-3E 00       I    59 (  6)     ld a,INT_BASE>>8  ; interrupts high order byte : 00H
0380-ED 47       I    60 (  6)     ld i,a
0382-3E 80       I    61 (  6)     ld a,INT_BASE&$FF ; interrupts low order byte : 80H
0384-ED 39 33    I    62 ( 13)     out0 (IL),a
0387-            I    63
0387-            I    64
0387-C9          I    65 (  9)     ret
0388-                157
8100-                158           .org $8100
8100-                159
8100-                160       sector  .bs 512
