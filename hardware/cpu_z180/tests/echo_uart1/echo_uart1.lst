0000-                  7
0000-                  8           .include ../../../../include/z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TF1        .equ $80
0040-            I   156       TCR_TF0        .equ $40
0020-            I   157       TCR_TE1        .equ $20
0010-            I   158       TCR_TE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0000-            I   208
0000-            I   209       ; Refresh
0000-            I   210       ; ---------------------------------------------------------------------------
0000-            I   211
0000-            I   212       ; Refresh Control Register (RCR: 36H)
0036-            I   213       RCR            .equ $36
0080-            I   214       RCR_REFE       .equ $80
0040-            I   215       RCR_REFW       .equ $40
0002-            I   216       RCR_CYC1       .equ $02
0001-            I   217       RCR_CYC0       .equ $01
0000-            I   218
0000-            I   219       ; MMU
0000-            I   220       ; ---------------------------------------------------------------------------
0000-            I   221
0000-            I   222       ; MMU Common Base Register (CBR: 38H)
0038-            I   223       CBR            .equ $38
0000-            I   224       ; MMU Bank Base Register (BBR: 39H)
0039-            I   225       BBR            .equ $39
0000-            I   226       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   227       CBAR           .equ $3A
0000-            I   228       ; I/O
0000-            I   229       ; ---------------------------------------------------------------------------
0000-            I   230
0000-            I   231       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   232       OMCR           .equ $3E
0000-            I   233
0080-            I   234       OMCR_M1E       .equ $80
0040-            I   235       OMCR_M1TE      .equ $40
0000-            I   236       ;OMCR_M1E       .equ $20
0000-            I   237
0000-            I   238       ; I/O Control Register (ICR: 3FH)
003F-            I   239       ICR            .equ $3F
0000-            I   240
0080-            I   241       ICR_IOA7       .equ $80
0040-            I   242       ICR_IOA6       .equ $40
0020-            I   243       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp mreset        ; RESET
0003-                 12
0038-                 13           .org $0038
0038-C3 79 02         14 (  9)     jp int_noop    ; INT0
003B-                 15
0066-                 16           .org $0066
0066-C3 79 02         17 (  9)     jp int_noop    ; NMI
0069-                 18
0069-                 19       ; interrupt vector table
0080-                 20           .org $0080
0080-79 02            21           .dw int_noop    ; INT1
0082-79 02            22           .dw int_noop    ; INT2
0084-79 02            23           .dw int_noop    ; PRT0
0086-79 02            24           .dw int_noop    ; PRT1
0088-79 02            25           .dw int_noop    ; DMA0
008A-79 02            26           .dw int_noop    ; DMA1
008C-79 02            27           .dw int_noop    ; CSIO
008E-CC 01            28           .dw int_asci0   ; ASCI0
0090-05 02            29           .dw int_asci1    ; ASCI1
0092-                 30
0100-                 31           .org $0100
0100-                 32       mreset:
0100-                 33
0100-F3               34 (  3)     di ; disable interrupts
0101-                 35
0101-                 36           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-3E 80            37 (  6)     ld a,CMR_X2
0103-ED 39 1E         38 ( 13)     out0 (CMR),a
0106-                 39
0106-                 40           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0106-                 41           ;ld a,CCR_CD
0106-                 42           ;out0 (CCR),a
0106-                 43
0106-3E 00            44 (  6)     ld  a,0
0108-ED 39 36         45 ( 13)     out0 (RCR),a    ; Refresh disable
010B-                 46
010B-                 47           ; MMU
010B-                 48           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
010B-                 49           ; $2000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
010B-                 50           ; $0000-$1FFF = ROM ( $00000 - $01FFF ) - Common Area 0
010B-                 51
010B-3E F2            52 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
010D-ED 39 3A         53 ( 13)     out0 (CBAR),a
0110-3E 11            54 (  6)     ld a,$11 ; Common Area Base = $20000
0112-ED 39 38         55 ( 13)     out0 (CBR),a
0115-3E 7E            56 (  6)     ld a,$7E ; Bank Area Base = $80000
0117-ED 39 39         57 ( 13)     out0 (BBR),a
011A-                 58
011A-                 59           ; Stack pointer = $10FF
011A-31 FF 20         60 (  9)     ld sp,$20FF
011D-                 61
011D-CD 3E 01         62 ( 16)     call asci0_init
0120-CD 68 01         63 ( 16)     call asci1_init
0123-                 64
0123-                 65           ; setup interupts
0123-ED 56            66 (  6)     im 1    ; interrupt mode 1
0125-3E 00            67 (  6)     ld a,0  ; interrupts high order byte : 00H
0127-ED 47            68 (  6)     ld i,a
0129-3E 80            69 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
012B-ED 39 33         70 ( 13)     out0 (IL),a
012E-                 71
012E-FB               72 (  3)     ei      ; enable interrupts
012F-                 73
012F-                 74       main:
012F-21 7B 02         75 (  9)     ld hl,str_welcome ; show welcome message
0132-CD A2 01         76 ( 16)     call asci1_puts
0135-                 77
0135-                 78       loop:
0135-CD 5A 02         79 ( 16)     call asci1_getc
0138-                 80
0138-CD BF 01         81 ( 16)    call asci1_putc
013B-C3 35 01         82 (  9)     jp loop
013E-                 83
013E-                 84
013E-                 85
013E-                 86
013E-                 87       ; -----------------------------------------------------------------
013E-                 88
013E-                 89       ; initialize asci0
013E-                 90       asci0_init:
013E-                 91
013E-                 92           ; RE : Receiver Enable
013E-                 93           ; TE : Transmitter Enable
013E-                 94           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
013E-3E 64            95 (  6)     ld a,CNTLA0_RE|CNTLA0_TE|CNTLA0_MOD2
0140-ED 39 00         96 ( 13)     out0 (CNTLA0),a
0143-                 97
0143-                 98           ; DR=0
0143-3E 00            99 (  6)     ld a,0
0145-ED 39 02        100 ( 13)     out0 (CNTLB0),a
0148-                101
0148-                102           ; BRG0 : Enable 16 bit BRG counter
0148-                103           ; X1 ( + DR=0) : Clock mode = /1
0148-3E 18           104 (  6)     ld a,ASEXT0_BRG0|ASEXT0_X1
014A-ED 39 12        105 ( 13)     out0 (ASEXT0),a
014D-                106
014D-                107           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
014D-                108           ; TC = fphi/(2*baud rate*clock mode) - 2
014D-                109           ; TC = 32000000/(2*9600*1) - 2
014D-3E 81           110 (  6)     ld a,$81
014F-ED 39 1A        111 ( 13)     out0 (ASTC0L),a
0152-3E 06           112 (  6)     ld a,$06
0154-ED 39 1B        113 ( 13)     out0 (ASTC0H),a
0157-                114
0157-                115           ; RIE : enable Rx Interrupt
0157-3E 08           116 (  6)     ld a,STAT0_RIE
0159-ED 39 04        117 ( 13)     out0 (STAT0),a
015C-                118
015C-AF              119 (  4)     xor a                  ; init RX buffer
015D-32 82 21        120 ( 13)     ld (rx0_buffer_cpt),a
0160-21 00 21        121 (  9)     ld hl,rx0_buffer
0163-2B              122 (  4)     dec hl
0164-22 80 21        123 ( 20)     ld (rx0_buffer_ptr),hl
0167-                124
0167-C9              125 (  9)     ret
0168-                126
0168-                127       ; initialize asci1
0168-                128       asci1_init:
0168-                129
0168-                130           ; RE : Receiver Enable
0168-                131           ; TE : Transmitter Enable
0168-                132           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
0168-3E 64           133 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
016A-ED 39 01        134 ( 13)     out0 (CNTLA1),a
016D-                135
016D-                136           ; DR=0
016D-3E 00           137 (  6)     ld a,0
016F-ED 39 03        138 ( 13)     out0 (CNTLB1),a
0172-                139
0172-                140           ; BRG0 : Enable 16 bit BRG counter
0172-                141           ; X1 ( + DR=0) : Clock mode = /1
0172-3E 18           142 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
0174-ED 39 13        143 ( 13)     out0 (ASEXT1),a
0177-                144
0177-                145           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
0177-                146           ; TC = fphi/(2*baud rate*clock mode) - 2
0177-                147           ; TC = 32000000/(2*9600*1) - 2
0177-3E 81           148 (  6)     ld a,$81
0179-ED 39 1C        149 ( 13)     out0 (ASTC1L),a
017C-3E 06           150 (  6)     ld a,$06
017E-ED 39 1D        151 ( 13)     out0 (ASTC1H),a
0181-                152
0181-                153           ; RIE : enable Rx Interrupt
0181-3E 08           154 (  6)     ld a,STAT1_RIE
0183-ED 39 05        155 ( 13)     out0 (STAT1),a
0186-                156
0186-AF              157 (  4)     xor a                  ; init RX buffer
0187-32 82 21        158 ( 13)     ld (rx0_buffer_cpt),a
018A-21 00 21        159 (  9)     ld hl,rx0_buffer
018D-2B              160 (  4)     dec hl
018E-22 80 21        161 ( 20)     ld (rx0_buffer_ptr),hl
0191-                162
0191-C9              163 (  9)     ret
0192-                164
0192-                165       ; put a string on asci0
0192-                166       ; input : (hl) = address of null terminated string
0192-                167       asci0_puts:
0192-E5              168 ( 11)     push hl
0193-F5              169 ( 11)     push af
0194-                170
0194-                171       asci0_puts_loop:
0194-7E              172 (  6)     ld a,(hl)
0195-F6 00           173 (  6)     or 0
0197-28 06           174 ( 6+)     jr z,asci0_puts_exit
0199-CD B2 01        175 ( 16)     call asci0_putc
019C-23              176 (  4)     inc hl
019D-18 F5           177 (  8)     jr asci0_puts_loop
019F-                178
019F-                179       asci0_puts_exit:
019F-F1              180 (  9)     pop af
01A0-E1              181 (  9)     pop hl
01A1-C9              182 (  9)     ret
01A2-                183
01A2-                184       ; put a string on asci1
01A2-                185       ; input : (hl) = address of null terminated string
01A2-                186       asci1_puts:
01A2-E5              187 ( 11)     push hl
01A3-F5              188 ( 11)     push af
01A4-                189
01A4-                190       asci1_puts_loop:
01A4-7E              191 (  6)     ld a,(hl)
01A5-F6 00           192 (  6)     or 0
01A7-28 06           193 ( 6+)     jr z,asci1_puts_exit
01A9-CD BF 01        194 ( 16)     call asci1_putc
01AC-23              195 (  4)     inc hl
01AD-18 F5           196 (  8)     jr asci1_puts_loop
01AF-                197
01AF-                198       asci1_puts_exit:
01AF-F1              199 (  9)     pop af
01B0-E1              200 (  9)     pop hl
01B1-C9              201 (  9)     ret
01B2-                202
01B2-                203       ; put a char on asci0
01B2-                204       ; input : a = char ascii code
01B2-                205       asci0_putc:
01B2-F5              206 ( 11)     push af
01B3-                207       asci0_putc_wait:  ; wait for asci0 TX ready
01B3-                208
01B3-ED 38 04        209 ( 12)     in0 a,(STAT0) ; TDRE=1 -> empty
01B6-E6 02           210 (  6)     and STAT0_TDRE
01B8-28 F9           211 ( 6+)     jr Z,asci0_putc_wait
01BA-F1              212 (  9)     pop af
01BB-ED 39 06        213 ( 13)     out0 (TDR0),a ; output the char to asci0
01BE-                214
01BE-C9              215 (  9)     ret
01BF-                216
01BF-                217       ; put a char on asci1
01BF-                218       ; input : a = char ascii code
01BF-                219       asci1_putc:
01BF-F5              220 ( 11)     push af
01C0-                221
01C0-                222       asci1_putc_wait:  ; wait for asci0 TX ready
01C0-ED 38 05        223 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
01C3-E6 02           224 (  6)     and STAT1_TDRE
01C5-28 F9           225 ( 6+)     jr Z,asci1_putc_wait
01C7-F1              226 (  9)     pop af
01C8-ED 39 07        227 ( 13)     out0 (TDR1),a ; output the char to asci0
01CB-                228
01CB-                229
01CB-C9              230 (  9)     ret
01CC-                231
01CC-                232       ; int asci0
01CC-                233       int_asci0:
01CC-F5              234 ( 11)     push af
01CD-C5              235 ( 11)     push bc
01CE-E5              236 ( 11)     push hl
01CF-                237
01CF-                238       int_asci0_test:
01CF-ED 38 04        239 ( 12)     in0 a,(STAT0)                ; check if there is a char in the FIFO
01D2-ED 64 80        240 (  9)     tst STAT0_RDRF
01D5-28 29           241 ( 6+)     jr Z,int_asci0_exit
01D7-                242
01D7-ED 08 08        243 ( 12)     in0 c,(RDR0)
01DA-                244
01DA-                245           ; check for error
01DA-E6 70           246 (  6)     and STAT0_OVRN|STAT0_PE|STAT0_FE
01DC-28 0A           247 ( 6+)     jr Z,int_asci0_ok
01DE-                248
01DE-ED 38 00        249 ( 12)     in0 a,(CNTLA0)           ; clear error
01E1-E6 F7           250 (  6)     and CNTLA0_EFR!$FF
01E3-ED 39 00        251 ( 13)     out0 (CNTLA0),a
01E6-18 E7           252 (  8)     jr int_asci0_test                    ; exit
01E8-                253
01E8-                254       int_asci0_ok:
01E8-                255
01E8-                256
01E8-3A 82 21        257 ( 12)     ld a,(rx0_buffer_cpt)
01EB-FE 7F           258 (  6)     cp RX_BUFFER_SIZE
01ED-28 11           259 ( 6+)     jr Z,int_asci0_exit
01EF-                260
01EF-3C              261 (  4)     inc a
01F0-32 82 21        262 ( 13)     ld (rx0_buffer_cpt),a
01F3-                263
01F3-2A 80 21        264 ( 15)     ld hl,(rx0_buffer_ptr)
01F6-23              265 (  4)     inc hl
01F7-22 80 21        266 ( 20)     ld (rx0_buffer_ptr),hl
01FA-                267
01FA-71              268 (  7)     ld (hl),c
01FB-CD B2 01        269 ( 16)     call asci0_putc
01FE-                270
01FE-18 CF           271 (  8)     jr int_asci0_test           ; is there more characters ?
0200-                272
0200-                273       int_asci0_exit:
0200-E1              274 (  9)     pop hl
0201-C1              275 (  9)     pop bc
0202-F1              276 (  9)     pop af
0203-FB              277 (  3)     ei
0204-C9              278 (  9)     ret
0205-                279
0205-                280       ; int asci1
0205-                281       int_asci1:
0205-F5              282 ( 11)     push af
0206-C5              283 ( 11)     push bc
0207-E5              284 ( 11)     push hl
0208-                285
0208-                286       int_asci1_test:
0208-ED 38 05        287 ( 12)     in0 a,(STAT1)                ; check if there is a char in the FIFO
020B-ED 64 80        288 (  9)     tst STAT1_RDRF
020E-28 26           289 ( 6+)     jr Z,int_asci1_exit
0210-                290
0210-ED 08 09        291 ( 12)     in0 c,(RDR1)
0213-                292
0213-                293           ; check for error
0213-E6 70           294 (  6)     and STAT1_OVRN|STAT1_PE|STAT1_FE
0215-28 0A           295 ( 6+)     jr Z,int_asci1_ok
0217-                296
0217-ED 38 01        297 ( 12)     in0 a,(CNTLA1)           ; clear error
021A-E6 F7           298 (  6)     and CNTLA1_EFR!$FF
021C-ED 39 01        299 ( 13)     out0 (CNTLA1),a
021F-18 E7           300 (  8)     jr int_asci1_test                    ; exit
0221-                301
0221-                302       int_asci1_ok:
0221-                303
0221-3A 06 22        304 ( 12)     ld a,(rx1_buffer_cpt)
0224-FE 7F           305 (  6)     cp RX_BUFFER_SIZE
0226-28 0E           306 ( 6+)     jr Z,int_asci1_exit
0228-                307
0228-3C              308 (  4)     inc a
0229-32 06 22        309 ( 13)     ld (rx1_buffer_cpt),a
022C-                310
022C-2A 04 22        311 ( 15)     ld hl,(rx1_buffer_ptr)
022F-23              312 (  4)     inc hl
0230-22 04 22        313 ( 20)     ld (rx1_buffer_ptr),hl
0233-                314
0233-71              315 (  7)     ld (hl),c
0234-                316
0234-18 D2           317 (  8)     jr int_asci1_test           ; is there more characters ?
0236-                318
0236-                319       int_asci1_exit:
0236-E1              320 (  9)     pop hl
0237-C1              321 (  9)     pop bc
0238-F1              322 (  9)     pop af
0239-FB              323 (  3)     ei
023A-C9              324 (  9)     ret
023B-                325
023B-                326
023B-                327       asci0_getc:
023B-C5              328 ( 11)     push bc
023C-E5              329 ( 11)     push hl
023D-                330
023D-                331       asci0_getc_wait:
023D-3A 82 21        332 ( 12)     ld a,(rx0_buffer_cpt)
0240-FE 00           333 (  6)     cp 0
0242-28 F9           334 ( 6+)     jr Z,asci0_getc_wait
0244-                335
0244-3A 82 21        336 ( 12)     ld a,(rx0_buffer_cpt)   ; get  buffer counter
0247-FE 00           337 (  6)     cp 0                    ; if 0 : nothing to get
0249-28 0C           338 ( 6+)     jr Z,asci0_getc_exit    ; exit
024B-                339
024B-3D              340 (  4)     dec a
024C-32 82 21        341 ( 13)     ld (rx0_buffer_cpt),a
024F-2A 80 21        342 ( 15)     ld hl,(rx0_buffer_ptr)
0252-7E              343 (  6)     ld a,(hl)
0253-                344
0253-2B              345 (  4)     dec hl
0254-22 80 21        346 ( 20)     ld (rx0_buffer_ptr),hl
0257-                347
0257-                348       asci0_getc_exit:
0257-E1              349 (  9)     pop hl
0258-C1              350 (  9)     pop bc
0259-C9              351 (  9)     ret
025A-                352
025A-                353       asci1_getc:
025A-C5              354 ( 11)     push bc
025B-E5              355 ( 11)     push hl
025C-                356
025C-                357       asci1_getc_wait:
025C-3A 06 22        358 ( 12)     ld a,(rx1_buffer_cpt)
025F-FE 00           359 (  6)     cp 0
0261-28 F9           360 ( 6+)     jr Z,asci1_getc_wait
0263-                361
0263-3A 06 22        362 ( 12)     ld a,(rx1_buffer_cpt)   ; get  buffer counter
0266-FE 00           363 (  6)     cp 0                    ; if 0 : nothing to get
0268-28 0C           364 ( 6+)     jr Z,asci1_getc_exit    ; exit
026A-                365
026A-3D              366 (  4)     dec a
026B-32 06 22        367 ( 13)     ld (rx1_buffer_cpt),a
026E-2A 04 22        368 ( 15)     ld hl,(rx1_buffer_ptr)
0271-7E              369 (  6)     ld a,(hl)
0272-                370
0272-2B              371 (  4)     dec hl
0273-22 04 22        372 ( 20)     ld (rx1_buffer_ptr),hl
0276-                373
0276-                374       asci1_getc_exit:
0276-E1              375 (  9)     pop hl
0277-C1              376 (  9)     pop bc
0278-C9              377 (  9)     ret
0279-                378
0279-                379
0279-                380
0279-                381       int_noop:
0279-ED 4D           382 (12+)     reti
027B-                383
027B-                384
027B-1B 5B 32 4A 
     1B 5B 48 45 
     63 68 6F 20 
     54 65 73 74 
     20 55 41 52 
     54 31 0D 0A 
     0D 0A 00        385       str_welcome:    .db $1B,"[2J",$1B,"[H","Echo Test UART1",13,10,13,10,0
0296-                386
2100-                387           .org $2100
2100-                388
007F-                389       RX_BUFFER_SIZE: .equ 127
2100-                390
2100-                391       rx0_buffer:     .bs RX_BUFFER_SIZE+1
2180-                392       rx0_buffer_ptr: .bs 2
2182-                393       rx0_buffer_cpt: .bs 2
2184-                394       rx1_buffer:     .bs RX_BUFFER_SIZE+1
2204-                395       rx1_buffer_ptr: .bs 2
2206-                396       rx1_buffer_cpt: .bs 2
2208-                397
2208-                398
