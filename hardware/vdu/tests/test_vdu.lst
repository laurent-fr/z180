0000-                  7
0000-                  8           .include ../../../include/z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TF1        .equ $80
0040-            I   156       TCR_TF0        .equ $40
0020-            I   157       TCR_TE1        .equ $20
0010-            I   158       TCR_TE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0034-            I   208       ITC             .equ $34
0000-            I   209
0080-            I   210       ITC_TRAP        .equ $80
0040-            I   211       ITC_UFO         .equ $40
0004-            I   212       ITC_ITE2        .equ $04
0002-            I   213       ITC_ITE1        .equ $02
0001-            I   214       ITC_ITE0        .equ $01
0000-            I   215
0000-            I   216
0000-            I   217       ; Refresh
0000-            I   218       ; ---------------------------------------------------------------------------
0000-            I   219
0000-            I   220       ; Refresh Control Register (RCR: 36H)
0036-            I   221       RCR            .equ $36
0080-            I   222       RCR_REFE       .equ $80
0040-            I   223       RCR_REFW       .equ $40
0002-            I   224       RCR_CYC1       .equ $02
0001-            I   225       RCR_CYC0       .equ $01
0000-            I   226
0000-            I   227       ; MMU
0000-            I   228       ; ---------------------------------------------------------------------------
0000-            I   229
0000-            I   230       ; MMU Common Base Register (CBR: 38H)
0038-            I   231       CBR            .equ $38
0000-            I   232       ; MMU Bank Base Register (BBR: 39H)
0039-            I   233       BBR            .equ $39
0000-            I   234       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   235       CBAR           .equ $3A
0000-            I   236       ; I/O
0000-            I   237       ; ---------------------------------------------------------------------------
0000-            I   238
0000-            I   239       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   240       OMCR           .equ $3E
0000-            I   241
0080-            I   242       OMCR_M1E       .equ $80
0040-            I   243       OMCR_M1TE      .equ $40
0000-            I   244       ;OMCR_M1E       .equ $20
0000-            I   245
0000-            I   246       ; I/O Control Register (ICR: 3FH)
003F-            I   247       ICR            .equ $3F
0000-            I   248
0080-            I   249       ICR_IOA7       .equ $80
0040-            I   250       ICR_IOA6       .equ $40
0020-            I   251       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp mreset        ; RESET
0003-                 12
0038-                 13           .org $0038
0038-C3 0E 02         14 (  9)     jp int_noop    ; INT0
003B-                 15
0066-                 16           .org $0066
0066-C3 0E 02         17 (  9)     jp int_noop    ; NMI
0069-                 18
0069-                 19       ; interrupt vector table
0080-                 20           .org $0080
0080-0E 02            21           .dw int_noop    ; INT1
0082-0E 02            22           .dw int_noop    ; INT2
0084-0E 02            23           .dw int_noop    ; PRT0
0086-0E 02            24           .dw int_noop    ; PRT1
0088-0E 02            25           .dw int_noop    ; DMA0
008A-0E 02            26           .dw int_noop    ; DMA1
008C-0E 02            27           .dw int_noop    ; CSIO
008E-0E 02            28           .dw int_noop   ; ASCI0
0090-0E 02            29           .dw int_noop    ; ASCI1
0092-                 30
0100-                 31           .org $0100
0100-                 32       mreset:
0100-                 33
0100-F3               34 (  3)     di ; disable interrupts
0101-                 35
0101-                 36           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-                 37           ;ld a,CMR_X2
0101-                 38           ;out0 (CMR),a
0101-                 39
0101-                 40           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0101-                 41           ;ld a,CCR_CD
0101-                 42           ;out0 (CCR),a
0101-                 43
0101-3E 00            44 (  6)     ld  a,0
0103-ED 39 36         45 ( 13)     out0 (RCR),a    ; Refresh disable
0106-                 46
0106-                 47           ; MMU
0106-                 48           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0106-                 49           ; $2000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0106-                 50           ; $0000-$1FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0106-                 51
0106-3E F2            52 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0108-ED 39 3A         53 ( 13)     out0 (CBAR),a
010B-3E 11            54 (  6)     ld a,$11 ; Common Area Base = $20000
010D-ED 39 38         55 ( 13)     out0 (CBR),a
0110-3E 7E            56 (  6)     ld a,$7E ; Bank Area Base = $80000
0112-ED 39 39         57 ( 13)     out0 (BBR),a
0115-                 58
0115-                 59           ; Stack pointer = $10FF
0115-31 FF 20         60 (  9)     ld sp,$20FF
0118-                 61
0118-CD D7 01         62 ( 16)     call asci1_init
011B-                 63
011B-                 64           ; setup interupts
011B-ED 56            65 (  6)     im 1    ; interrupt mode 1
011D-3E 00            66 (  6)     ld a,0  ; interrupts high order byte : 00H
011F-ED 47            67 (  6)     ld i,a
0121-3E 80            68 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
0123-ED 39 33         69 ( 13)     out0 (IL),a
0126-                 70
0126-                 71           ; enable INT1
0126-3E 02            72 (  6)     ld a,ITC_ITE1
0128-ED 39 34         73 ( 13)     out0 (ITC),a
012B-                 74
012B-FB               75 (  3)    ei      ; enable interrupts
012C-                 76
0080-                 77       KBD_DATA    .equ $80
0081-                 78       KBD_STATUS  .equ $81
012C-                 79
0090-                 80       RTC_SECOND_1 .equ $90
0091-                 81       RTC_SECOND_10 .equ $91
0092-                 82       RTC_MINUTE_1 .equ $92
0093-                 83       RTC_MINUTE_10 .equ $93
0094-                 84       RTC_HOUR_1 .equ $94
0095-                 85       RTC_HOUR_10 .equ $95
009D-                 86       RTC_REGD .equ $9D
009E-                 87       RTC_REGE .equ $9E
009F-                 88       RTC_REGF .equ $9F
012C-                 89
012C-                 90
012C-                 91       main:
012C-                 92           ;ld hl,str_welcome ; show welcome message
012C-                 93           ;call asci1_puts
012C-                 94
012C-3E 0F            95 (  6)     ld a,$0F
012E-32 F0 FF         96 ( 13)     ld (VDU_ATTR),a
0131-                 97
0131-CD 10 02         98 ( 16)     call vdu_cls
0134-21 B0 02         99 (  9)     ld hl,str_welcome
0137-CD A2 02        100 ( 16)     call vdu_puts
013A-                101
013A-3E 0B           102 (  6)     ld a,$0b
013C-32 F0 FF        103 ( 13)     ld (VDU_ATTR),a
013F-                104
013F-3E 05           105 (  6)     ld a,5
0141-ED 39 91        106 ( 13)     out0 (RTC_SECOND_10),a
0144-                107           ;out0 (RTC_MINUTE_10),a
0144-                108
0144-                109           ; palette
0144-11 40 F1        110 (  9)     ld de,VDU_RAM+320
0147-3E 00           111 (  6)     ld a,0
0149-32 F1 FF        112 ( 13)     ld (VDU_X),a
014C-3E 02           113 (  6)     ld a,2
014E-32 F2 FF        114 ( 13)     ld (VDU_Y),a
0151-                115
0151-06 0F           116 (  6)     ld b,15
0153-                117       palette_loop:
0153-78              118 (  4)     ld a,b
0154-87              119 (  4)     add a,a
0155-87              120 (  4)     add a,a
0156-87              121 (  4)     add a,a
0157-87              122 (  4)     add a,a
0158-32 F0 FF        123 ( 13)     ld (VDU_ATTR),a
015B-78              124 (  4)     ld a,b
015C-C6 30           125 (  6)     add a,'0'
015E-CD 6E 02        126 ( 16)     call vdu_putc
0161-3E 20           127 (  6)     ld a,' '
0163-CD 6E 02        128 ( 16)     call vdu_putc
0166-CD 6E 02        129 ( 16)     call vdu_putc
0169-CD 6E 02        130 ( 16)     call vdu_putc
016C-CD 6E 02        131 ( 16)     call vdu_putc
016F-10 E2           132 ( 7+)     djnz palette_loop
0171-                133
0171-3E 0B           134 (  6)     ld a,$0b
0173-32 F0 FF        135 ( 13)     ld (VDU_ATTR),a
0176-                136
0176-3E 00           137 (  6)     ld a,0
0178-ED 39 9D        138 ( 13)     out0 (RTC_REGD),a
017B-ED 39 9E        139 ( 13)     out0 (RTC_REGE),a
017E-ED 39 9F        140 ( 13)     out0 (RTC_REGF),a
0181-                141
0181-                142       loop:
0181-                143         ;in0 a,(RTC_SECOND_10)
0181-                144         ; and a,$0f
0181-                145         ;  add a,'0'
0181-                146         ;  ld (VDU_RAM),a
0181-                147         ;jp loop
0181-                148
0181-11 80 F2        149 (  9)     ld de,VDU_RAM+640
0184-3E 00           150 (  6)     ld a,0
0186-32 F1 FF        151 ( 13)     ld (VDU_X),a
0189-3E 04           152 (  6)     ld a,4
018B-32 F2 FF        153 ( 13)     ld (VDU_Y),a
018E-                154
018E-ED 38 95        155 ( 12)     in0 a,(RTC_HOUR_10)
0191-E6 03           156 (  6)     and a,$03
0193-C6 30           157 (  6)     add a,'0'
0195-CD 6E 02        158 ( 16)     call vdu_putc
0198-                159
0198-ED 38 94        160 ( 12)     in0 a,(RTC_HOUR_1)
019B-E6 0F           161 (  6)     and a,$0f
019D-C6 30           162 (  6)     add a,'0'
019F-CD 6E 02        163 ( 16)     call vdu_putc
01A2-                164
01A2-3E 3A           165 (  6)     ld a,':'
01A4-CD 6E 02        166 ( 16)     call vdu_putc
01A7-                167
01A7-ED 38 93        168 ( 12)     in0 a,(RTC_MINUTE_10)
01AA-E6 0F           169 (  6)     and a,$0f
01AC-C6 30           170 (  6)     add a,'0'
01AE-CD 6E 02        171 ( 16)     call vdu_putc
01B1-                172
01B1-ED 38 92        173 ( 12)     in0 a,(RTC_MINUTE_1)
01B4-E6 0F           174 (  6)     and a,$0f
01B6-C6 30           175 (  6)     add a,'0'
01B8-CD 6E 02        176 ( 16)     call vdu_putc
01BB-                177
01BB-3E 3A           178 (  6)     ld a,':'
01BD-CD 6E 02        179 ( 16)     call vdu_putc
01C0-                180
01C0-ED 38 91        181 ( 12)     in0 a,(RTC_SECOND_10)
01C3-E6 0F           182 (  6)     and a,$0f
01C5-C6 30           183 (  6)     add a,'0'
01C7-CD 6E 02        184 ( 16)     call vdu_putc
01CA-                185
01CA-ED 38 90        186 ( 12)     in0 a,(RTC_SECOND_1)
01CD-E6 0F           187 (  6)     and a,$0f
01CF-C6 30           188 (  6)     add a,'0'
01D1-CD 6E 02        189 ( 16)     call vdu_putc
01D4-                190
01D4-C3 81 01        191 (  9)     jp loop
01D7-                192
01D7-                193
01D7-                194
01D7-                195
01D7-                196
01D7-                197       ; -----------------------------------------------------------------
01D7-                198
01D7-                199       ; initialize asci1
01D7-                200       asci1_init:
01D7-                201
01D7-                202           ; RE : Receiver Enable
01D7-                203           ; TE : Transmitter Enable
01D7-                204           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
01D7-3E 64           205 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
01D9-ED 39 01        206 ( 13)     out0 (CNTLA1),a
01DC-                207
01DC-                208           ; DR=0
01DC-3E 00           209 (  6)     ld a,0
01DE-ED 39 03        210 ( 13)     out0 (CNTLB1),a
01E1-                211
01E1-                212           ; BRG0 : Enable 16 bit BRG counter
01E1-                213           ; X1 ( + DR=0) : Clock mode = /1
01E1-3E 18           214 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
01E3-ED 39 13        215 ( 13)     out0 (ASEXT1),a
01E6-                216
01E6-                217           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
01E6-                218           ; TC = fphi/(2*baud rate*clock mode) - 2
01E6-                219           ; TC = 32000000/(2*9600*1) - 2
01E6-3E 81           220 (  6)     ld a,$81
01E8-ED 39 1C        221 ( 13)     out0 (ASTC1L),a
01EB-3E 06           222 (  6)     ld a,$06
01ED-ED 39 1D        223 ( 13)     out0 (ASTC1H),a
01F0-                224
01F0-C9              225 (  9)     ret
01F1-                226
01F1-                227       ; put a string on asci1
01F1-                228       ; input : (hl) = address of null terminated string
01F1-                229       asci1_puts:
01F1-E5              230 ( 11)     push hl
01F2-F5              231 ( 11)     push af
01F3-                232
01F3-                233       asci1_puts_loop:
01F3-7E              234 (  6)     ld a,(hl)
01F4-F6 00           235 (  6)     or 0
01F6-28 06           236 ( 6+)     jr z,asci1_puts_exit
01F8-CD 01 02        237 ( 16)     call asci1_putc
01FB-23              238 (  4)     inc hl
01FC-18 F5           239 (  8)     jr asci1_puts_loop
01FE-                240
01FE-                241       asci1_puts_exit:
01FE-F1              242 (  9)     pop af
01FF-E1              243 (  9)     pop hl
0200-C9              244 (  9)     ret
0201-                245
0201-                246
0201-                247
0201-                248       ; put a char on asci1
0201-                249       ; input : a = char ascii code
0201-                250       asci1_putc:
0201-F5              251 ( 11)     push af
0202-                252
0202-                253       asci1_putc_wait:  ; wait for asci0 TX ready
0202-ED 38 05        254 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
0205-E6 02           255 (  6)     and STAT1_TDRE
0207-28 F9           256 ( 6+)     jr Z,asci1_putc_wait
0209-F1              257 (  9)     pop af
020A-ED 39 07        258 ( 13)     out0 (TDR1),a ; output the char to asci0
020D-C9              259 (  9)     ret
020E-                260
020E-                261
020E-                262       int_noop:
020E-FB              263 (  3)     ei
020F-C9              264 (  9)     ret
0210-                265
0210-                266
0210-                267           .include ../../../include/vdu.asm
0210-            I     1
0210-            I     2
0210-            I     3
F000-            I     4       VDU_RAM  .equ $F000
0210-            I     5
FFF0-            I     6       VDU_ATTR .equ $FFF0
FFF1-            I     7       VDU_X    .equ $FFF1
FFF2-            I     8       VDU_Y    .equ $FFF2
FFF4-            I     9       VDU_PTR  .equ $FFF4
0210-            I    10
0210-            I    11       vdu_cls:
0210-11 D0 07    I    12 (  9)     ld de,2000     ; number of chars
0213-21 00 F0    I    13 (  9)     ld hl,VDU_RAM    ; pointer to srart of ram
0216-F5          I    14 ( 11)     push af
0217-3A F0 FF    I    15 ( 12)     ld a,(VDU_ATTR)  ; get color attribute
021A-4F          I    16 (  4)     ld c,a
021B-F1          I    17 (  9)     pop af
021C-            I    18       vdu_cls_loop:
021C-36 20       I    19 (  9)     ld (hl),$20     ; space char.
021E-23          I    20 (  4)     inc hl
021F-71          I    21 (  7)     ld (hl),c       ; set color attribute
0220-23          I    22 (  4)     inc hl
0221-1B          I    23 (  4)     dec de          ; update chars counter
0222-7A          I    24 (  4)     ld a,d         ; check if zero
0223-B3          I    25 (  4)     or e
0224-C2 1C 02    I    26 ( 6+)     jp nz,vdu_cls_loop
0227-3E 00       I    27 (  6)     ld a,0          ; home cursor
0229-32 F1 FF    I    28 ( 13)     ld (VDU_X),a
022C-32 F2 FF    I    29 ( 13)     ld (VDU_Y),a
022F-11 00 F0    I    30 (  9)     ld de,VDU_RAM
0232-ED 53 F4 FF I    31 ( 20)     ld (VDU_PTR),de
0236-C9          I    32 (  9)     ret
0237-            I    33
0237-            I    34       vdu_scroll:
0237-21 A0 F0    I    35 (  9)     ld hl,VDU_RAM+160
023A-11 00 F0    I    36 (  9)     ld de,VDU_RAM
023D-01 00 0F    I    37 (  9)     ld bc,4000-160
0240-            I    38       vdu_scroll_loop:
0240-ED A0       I    39 ( 12)     ldi
0242-EA 40 02    I    40 ( 6+)     jp pe,vdu_scroll_loop
0245-            I    41
0245-06 50       I    42 (  6)     ld b,80
0247-3A F0 FF    I    43 ( 12)     ld a,(VDU_ATTR)
024A-4F          I    44 (  4)     ld c,a
024B-            I    45       vdu_scroll_loop_line25:
024B-3E 20       I    46 (  6)     ld a,' '
024D-12          I    47 (  7)     ld (de),a
024E-13          I    48 (  4)     inc de
024F-79          I    49 (  4)     ld a,c
0250-12          I    50 (  7)     ld (de),a
0251-13          I    51 (  4)     inc de
0252-10 F7       I    52 ( 7+)     djnz vdu_scroll_loop_line25
0254-C9          I    53 (  9)     ret
0255-            I    54
0255-            I    55       vdu_putc_term:
0255-C5          I    56 ( 11)     push bc
0256-D5          I    57 ( 11)     push de
0257-ED 5B F4 FF I    58 ( 18)     ld de,(VDU_PTR)
025B-FE 0D       I    59 (  6)     cp 13
025D-20 05       I    60 ( 6+)     jr nz,vdu_putc_term_print
025F-CD 86 02    I    61 ( 16)     call vdu_next_line
0262-18 03       I    62 (  8)     jr vdu_putc_term_exit
0264-            I    63
0264-            I    64       vdu_putc_term_print:
0264-CD 6E 02    I    65 ( 16)     call vdu_putc
0267-            I    66
0267-            I    67       vdu_putc_term_exit:
0267-ED 53 F4 FF I    68 ( 20)     ld (VDU_PTR),de
026B-D1          I    69 (  9)     pop de
026C-C1          I    70 (  9)     pop bc
026D-C9          I    71 (  9)     ret
026E-            I    72
026E-            I    73       vdu_putc:
026E-F5          I    74 ( 11)     push af
026F-12          I    75 (  7)     ld (de),a           ; put char in a to current video memory location
0270-13          I    76 (  4)     inc de              ; go to attribute
0271-3A F0 FF    I    77 ( 12)     ld a,(VDU_ATTR)     ; fetch attribute from VDU_ATTR
0274-12          I    78 (  7)     ld (de),a           ; write attribute to video memory
0275-13          I    79 (  4)     inc de              ; go to next char
0276-3A F1 FF    I    80 ( 12)     ld a,(VDU_X)        ; get X position
0279-3C          I    81 (  4)     inc a               ; increment
027A-32 F1 FF    I    82 ( 13)     ld (VDU_X),a
027D-FE 50       I    83 (  6)     cp 80              ; next line ?
027F-20 03       I    84 ( 6+)     jr nz,vdu_putc_exit
0281-CD 86 02    I    85 ( 16)     call vdu_next_line
0284-            I    86
0284-            I    87       vdu_putc_exit:
0284-F1          I    88 (  9)     pop af
0285-C9          I    89 (  9)     ret
0286-            I    90
0286-            I    91       vdu_next_line:
0286-3E 00       I    92 (  6)     ld a,0              ; reset X
0288-32 F1 FF    I    93 ( 13)     ld (VDU_X),a
028B-3A F2 FF    I    94 ( 12)     ld a,(VDU_Y)        ; increment Y
028E-3C          I    95 (  4)     inc a
028F-32 F2 FF    I    96 ( 13)     ld (VDU_Y),a
0292-FE 19       I    97 (  6)     cp 25               ; bottom of the screen ?
0294-20 0B       I    98 ( 6+)     jr nz,vdu_next_line_exit
0296-CD 37 02    I    99 ( 16)     call vdu_scroll
0299-3E 18       I   100 (  6)     ld a,24             ; set Y to 24
029B-32 F2 FF    I   101 ( 13)     ld (VDU_Y),a
029E-            I   102
029E-11 00 FF    I   103 (  9)     ld de,VDU_RAM+3840   ; set de to start of 24th line
02A1-            I   104       vdu_next_line_exit:
02A1-C9          I   105 (  9)     ret
02A2-            I   106
02A2-            I   107
02A2-            I   108       vdu_puts:
02A2-E5          I   109 ( 11)     push hl
02A3-            I   110       vdu_puts_loop:
02A3-7E          I   111 (  6)     ld a,(hl)
02A4-F6 00       I   112 (  6)     or 0
02A6-28 06       I   113 ( 6+)     jr z,vdu_puts_exit
02A8-CD 6E 02    I   114 ( 16)     call vdu_putc
02AB-23          I   115 (  4)     inc hl
02AC-18 F5       I   116 (  8)     jr vdu_puts_loop
02AE-            I   117
02AE-            I   118       vdu_puts_exit:
02AE-E1          I   119 (  9)     pop hl
02AF-C9          I   120 (  9)     ret
02B0-            I   121
02B0-                268
02B0-                269
02B0-                270
02B0-5A 31 38 30 
     20 43 50 55 
     20 2D 20 54 
     65 73 74 20 
     56 44 55 00     271       str_welcome:    .db "Z180 CPU - Test VDU",0
02C4-                272
2100-                273           .org $2100
2100-                274
2100-                275
