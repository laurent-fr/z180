0000-                  7
0000-                  8           .include ../../../../include/z180_defs.asm
0000-            I     1       ; ------------------------------------
0000-            I     2       ; Z180 constants
0000-            I     3       ; ------------------------------------
0000-            I     4
0000-            I     5       ; ASCI
0000-            I     6       ; ----------
0000-            I     7
0000-            I     8       ; ASCI Control Register A 0 (CNTLA0: 00H)
0000-            I     9       CNTLA0         .equ $00
0000-            I    10
0080-            I    11       CNTLA0_MPE     .equ $80
0040-            I    12       CNTLA0_RE      .equ $40
0020-            I    13       CNTLA0_TE      .equ $20
0010-            I    14       CNTLA0_RTS0    .equ $10
0008-            I    15       CNTLA0_EFR     .equ $08
0004-            I    16       CNTLA0_MOD2    .equ $04
0002-            I    17       CNTLA0_MOD1    .equ $02
0001-            I    18       CNTLA0_MOD0    .equ $01
0000-            I    19
0000-            I    20       ; ASCI Control Register A 1 (CNTLA1: 01H)
0001-            I    21       CNTLA1         .equ $01
0000-            I    22
0080-            I    23       CNTLA1_MPE     .equ $80
0040-            I    24       CNTLA1_RE      .equ $40
0020-            I    25       CNTLA1_TE      .equ $20
0010-            I    26       CNTLA1_CKA1D   .equ $10
0008-            I    27       CNTLA1_EFR     .equ $08
0004-            I    28       CNTLA1_MOD2    .equ $04
0002-            I    29       CNTLA1_MOD1    .equ $02
0001-            I    30       CNTLA1_MOD0    .equ $01
0000-            I    31
0000-            I    32       ; ASCI Control Register B 0 (CNTLB0: 02H)
0002-            I    33       CNTLB0         .equ $02
0000-            I    34
0080-            I    35       CNTLB0_MPBT    .equ $80
0040-            I    36       CNTLB0_MP      .equ $40
0020-            I    37       CNTLB0_CTS     .equ $20
0010-            I    38       CNTLB0_PEO     .equ $10
0008-            I    39       CNTLB0_DR      .equ $08
0004-            I    40       CNTLB0_SS2     .equ $04
0002-            I    41       CNTLB0_SS1     .equ $02
0001-            I    42       CNTLB0_SS0     .equ $01
0000-            I    43
0000-            I    44       ; ASCI Control Register B 1 (CNTLB1: 03H)
0003-            I    45       CNTLB1         .equ $03
0000-            I    46
0080-            I    47       CNTLB1_MPBT    .equ $80
0040-            I    48       CNTLB1_MP      .equ $40
0020-            I    49       CNTLB1_CTS     .equ $20
0010-            I    50       CNTLB1_PEO     .equ $10
0008-            I    51       CNTLB1_DR      .equ $08
0004-            I    52       CNTLB1_SS2     .equ $04
0002-            I    53       CNTLB1_SS1     .equ $02
0001-            I    54       CNTLB1_SS0     .equ $01
0000-            I    55
0000-            I    56       ; ASCI Status Register 0 (STAT0: 04H)
0004-            I    57       STAT0          .equ $04
0000-            I    58
0080-            I    59       STAT0_RDRF     .equ $80
0040-            I    60       STAT0_OVRN     .equ $40
0020-            I    61       STAT0_PE       .equ $20
0010-            I    62       STAT0_FE       .equ $10
0008-            I    63       STAT0_RIE      .equ $08
0004-            I    64       STAT0_DCD0     .equ $04
0002-            I    65       STAT0_TDRE     .equ $02
0001-            I    66       STAT0_TIE      .equ $01
0000-            I    67
0000-            I    68       ; ASCI Status Register 1 (STAT1: 05H)
0005-            I    69       STAT1          .equ $05
0000-            I    70
0080-            I    71       STAT1_RDRF     .equ $80
0040-            I    72       STAT1_OVRN     .equ $40
0020-            I    73       STAT1_PE       .equ $20
0010-            I    74       STAT1_FE       .equ $10
0008-            I    75       STAT1_RIE      .equ $08
0004-            I    76       STAT1_CTS1E    .equ $04
0002-            I    77       STAT1_TDRE     .equ $02
0001-            I    78       STAT1_TIE      .equ $01
0000-            I    79
0000-            I    80       ; ASCI Transmit Data Register Ch. 0 (TDR0: 06H)
0006-            I    81       TDR0           .equ $06
0000-            I    82
0000-            I    83       ; ASCI Transmit Data Register Ch. 1 (TDR1: 07H)
0007-            I    84       TDR1           .equ $07
0000-            I    85
0000-            I    86       ; ASCI Receive Data Register Ch. 0 (RDR0: 08H)
0008-            I    87       RDR0           .equ $08
0000-            I    88
0000-            I    89       ; ASCI Receive Data Register Ch. 1 (RDR1: 09H)
0009-            I    90       RDR1           .equ $09
0000-            I    91
0000-            I    92       ; ASCI0 Extension Control Register 0 (ASEXT0: 12H)
0012-            I    93       ASEXT0         .equ $12
0000-            I    94
0080-            I    95       ASEXT0_RDRFI   .equ $80
0040-            I    96       ASEXT0_DCD0D   .equ $40
0020-            I    97       ASEXT0_CTS0D   .equ $20
0010-            I    98       ASEXT0_X1      .equ $10
0008-            I    99       ASEXT0_BRG0    .equ $08
0004-            I   100       ASEXT0_BRKE    .equ $04
0002-            I   101       ASEXT0_BRK     .equ $02
0001-            I   102       ASEXT0_SBRK    .equ $01
0000-            I   103
0000-            I   104       ; ASCI1 Extension Control Register 1 (ASEXT1: 13H)
0013-            I   105       ASEXT1         .equ $13
0000-            I   106
0080-            I   107       ASEXT1_RDRFI   .equ $80
0010-            I   108       ASEXT1_X1      .equ $10
0008-            I   109       ASEXT1_BRG1    .equ $08
0004-            I   110       ASEXT1_BRKE    .equ $04
0002-            I   111       ASEXT1_BRK     .equ $02
0001-            I   112       ASEXT1_SBRK    .equ $01
0000-            I   113
0000-            I   114       ; ASCI0 Time Constant Low Register (ASTC0L : 1AH)
001A-            I   115       ASTC0L         .equ $1A
0000-            I   116       ; ASCI0 Time Constant High Register (ASTC0H: 1BH)
001B-            I   117       ASTC0H         .equ $1B
0000-            I   118       ; ASCI1 Time Constant Low Register (ASTC1L : 1AH)
001C-            I   119       ASTC1L         .equ $1C
0000-            I   120       ; ASCI1 Time Constant High Register (ASTC1H: 1BH)
001D-            I   121       ASTC1H         .equ $1D
0000-            I   122
0000-            I   123       ; CSI/0
0000-            I   124       ; ------------------------------------
0000-            I   125
0000-            I   126       ; CSI/O Control Register (CNTR: 0AH)
000A-            I   127       CNTR           .equ $0A
0000-            I   128
0080-            I   129       CNTR_EF        .equ $80
0040-            I   130       CNTR_EIE       .equ $40
0020-            I   131       CNTR_RE        .equ $20
0010-            I   132       CNTR_TE        .equ $10
0004-            I   133       CNTR_SS2       .equ $04
0002-            I   134       CNTR_SS1       .equ $02
0001-            I   135       CNTR_SS0       .equ $01
0000-            I   136
0000-            I   137       ; CSI/O Transmit/Receive Data Register (TRD: 0BH)
000B-            I   138       TRDR           .equ $0B
0000-            I   139
0000-            I   140       ; Timer
0000-            I   141       ; ------------------------------------
0000-            I   142
0000-            I   143       ; Data Register Ch 0 L (TMDR0L: 0CH)
000C-            I   144       TMDR0L         .equ $0C
0000-            I   145       ; Data Register Ch 0 H (TMDR0H: 0DH)
000D-            I   146       TMDR0H         .equ $0D
0000-            I   147       ; Reload Register Ch 0 L (RLDR0L: OEH)
000E-            I   148       RLDR0L         .equ $0E
0000-            I   149       ; Reload Register Ch 0 H (RLDR0H: 0FH)
000F-            I   150       RLDR0H         .equ $0F
0000-            I   151
0000-            I   152       ; Timer Control Register (TCR: 10H)
0010-            I   153       TCR            .equ $10
0000-            I   154
0080-            I   155       TCR_TIF1        .equ $80
0040-            I   156       TCR_TIF0        .equ $40
0020-            I   157       TCR_TIE1        .equ $20
0010-            I   158       TCR_TIE0        .equ $10
0008-            I   159       TCR_TOC1       .equ $08
0004-            I   160       TCR_TOC0       .equ $04
0002-            I   161       TCR_TDE1       .equ $02
0001-            I   162       TCR_TDE0       .equ $01
0000-            I   163
0000-            I   164       ; Data Register Ch 1 L (TMDR1L: 14h)
0014-            I   165       TMDR1L         .equ $14
0000-            I   166       ; Data Register Ch 1 H (TMDR1H: 15H)
0015-            I   167       TMDR1H         .equ $15
0000-            I   168       ; Reload Register Ch 1 L (RLDR1L: 16H)
0016-            I   169       RLDR1L         .equ $16
0000-            I   170       ; Reload Register Ch 1 H (RLDR1H: 17H)
0017-            I   171       RLDR1H         .equ $17
0000-            I   172
0000-            I   173       ; Others
0000-            I   174       ; ------------------------------------
0000-            I   175
0000-            I   176       ; Clock Multiplier Register (CMR: 1EH)
001E-            I   177       CMR            .equ $1E
0000-            I   178
0080-            I   179       CMR_X2         .equ $80
0000-            I   180
0000-            I   181       ; Free Running Counter (FRC: 18H)
0018-            I   182       FRC            .equ $18
0000-            I   183
0000-            I   184       ; CPU Control Register (CCR: 1FH)
001F-            I   185       CCR            .equ $1F
0080-            I   186       CCR_CD         .equ $80
0040-            I   187       CCR_SB1        .equ $40
0020-            I   188       CCR_BREXT      .equ $20
0010-            I   189       CCR_LNPHI      .equ $10
0008-            I   190       CCR_SB2        .equ $08
0004-            I   191       CCR_LNIO       .equ $04
0002-            I   192       CCR_LNCPU      .equ $02
0001-            I   193       CCR_LNAD       .equ $01
0000-            I   194
0000-            I   195       ; DMA
0000-            I   196       ; ---------------------------------------------------------------------------
0000-            I   197
0000-            I   198
0000-            I   199       ; DMA/WAIT Control Register (DCNTL: 32H)
0000-            I   200
0000-            I   201       ; INT
0000-            I   202       ; ---------------------------------------------------------------------------
0000-            I   203
0000-            I   204       ; Interrupt Vector Low Register (IL: 33H)
0033-            I   205       IL              .equ $33
0000-            I   206
0000-            I   207       ; INT/TRAP Control Register (ITC: 34H)
0034-            I   208       ITC             .equ $34
0000-            I   209
0080-            I   210       ITC_TRAP        .equ $80
0040-            I   211       ITC_UFO         .equ $40
0004-            I   212       ITC_ITE2        .equ $04
0002-            I   213       ITC_ITE1        .equ $02
0001-            I   214       ITC_ITE0        .equ $01
0000-            I   215
0000-            I   216
0000-            I   217       ; Refresh
0000-            I   218       ; ---------------------------------------------------------------------------
0000-            I   219
0000-            I   220       ; Refresh Control Register (RCR: 36H)
0036-            I   221       RCR            .equ $36
0080-            I   222       RCR_REFE       .equ $80
0040-            I   223       RCR_REFW       .equ $40
0002-            I   224       RCR_CYC1       .equ $02
0001-            I   225       RCR_CYC0       .equ $01
0000-            I   226
0000-            I   227       ; MMU
0000-            I   228       ; ---------------------------------------------------------------------------
0000-            I   229
0000-            I   230       ; MMU Common Base Register (CBR: 38H)
0038-            I   231       CBR            .equ $38
0000-            I   232       ; MMU Bank Base Register (BBR: 39H)
0039-            I   233       BBR            .equ $39
0000-            I   234       ; MMU Common/Bank Register (CBAR: 3AH)
003A-            I   235       CBAR           .equ $3A
0000-            I   236       ; I/O
0000-            I   237       ; ---------------------------------------------------------------------------
0000-            I   238
0000-            I   239       ; Operation Mode Control Register (OMCR: 3EH)
003E-            I   240       OMCR           .equ $3E
0000-            I   241
0080-            I   242       OMCR_M1E       .equ $80
0040-            I   243       OMCR_M1TE      .equ $40
0000-            I   244       ;OMCR_M1E       .equ $20
0000-            I   245
0000-            I   246       ; I/O Control Register (ICR: 3FH)
003F-            I   247       ICR            .equ $3F
0000-            I   248
0080-            I   249       ICR_IOA7       .equ $80
0040-            I   250       ICR_IOA6       .equ $40
0020-            I   251       ICR_IOSTP      .equ $20
0000-                  9
0000-                 10           .org $0000
0000-C3 00 01         11 (  9)     jp mreset        ; RESET
0003-                 12
0038-                 13           .org $0038
0038-C3 78 02         14 (  9)     jp int_noop    ; INT0
003B-                 15
0066-                 16           .org $0066
0066-C3 78 02         17 (  9)     jp int_noop    ; NMI
0069-                 18
0069-                 19       ; interrupt vector table
0080-                 20           .org $0080
0080-5F 01            21           .dw int_kbd    ; INT1
0082-78 02            22           .dw int_noop    ; INT2
0084-78 02            23           .dw int_noop    ; PRT0
0086-78 02            24           .dw int_noop    ; PRT1
0088-78 02            25           .dw int_noop    ; DMA0
008A-78 02            26           .dw int_noop    ; DMA1
008C-78 02            27           .dw int_noop    ; CSIO
008E-78 02            28           .dw int_noop   ; ASCI0
0090-78 02            29           .dw int_noop    ; ASCI1
0092-                 30
0100-                 31           .org $0100
0100-                 32       mreset:
0100-                 33
0100-F3               34 (  3)     di ; disable interrupts
0101-                 35
0101-                 36           ; CMR_X2 : clock * 2 => xtal 16Mhz ---> 32Mhz, phi 8Mhz --> 16Mhz
0101-                 37           ;ld a,CMR_X2
0101-                 38           ;out0 (CMR),a
0101-                 39
0101-                 40           ; CCR_CD : phi = XTAL/1 => phi 16Mhz ---> 32Mhz !!!
0101-                 41           ;ld a,CCR_CD
0101-                 42           ;out0 (CCR),a
0101-                 43
0101-3E 00            44 (  6)     ld  a,0
0103-ED 39 36         45 ( 13)     out0 (RCR),a    ; Refresh disable
0106-                 46
0106-                 47           ; MMU
0106-                 48           ; $F000-$FFFF = VDU ( $20000 - $20FFF ) - Common Area 1
0106-                 49           ; $2000-$EFFF = RAM ( $80000 - $8EFFF ) - Bank Area
0106-                 50           ; $0000-$1FFF = ROM ( $00000 - $01FFF ) - Common Area 0
0106-                 51
0106-3E F2            52 (  6)     ld a,$F2 ; Common Area 1 = $F000-$FFFF, Bank Area 1 =  $2000-$EFFF
0108-ED 39 3A         53 ( 13)     out0 (CBAR),a
010B-3E 11            54 (  6)     ld a,$11 ; Common Area Base = $20000
010D-ED 39 38         55 ( 13)     out0 (CBR),a
0110-3E 7E            56 (  6)     ld a,$7E ; Bank Area Base = $80000
0112-ED 39 39         57 ( 13)     out0 (BBR),a
0115-                 58
0115-                 59           ; Stack pointer = $10FF
0115-31 FF 20         60 (  9)     ld sp,$20FF
0118-                 61
0118-CD 41 02         62 ( 16)     call asci1_init
011B-                 63
011B-                 64           ; setup interupts
011B-ED 56            65 (  6)     im 1    ; interrupt mode 1
011D-3E 00            66 (  6)     ld a,0  ; interrupts high order byte : 00H
011F-ED 47            67 (  6)     ld i,a
0121-3E 80            68 (  6)     ld a,0b10000000 ; interrupts low order byte : 80H
0123-ED 39 33         69 ( 13)     out0 (IL),a
0126-                 70
0126-                 71           ; enable INT1
0126-3E 02            72 (  6)     ld a,ITC_ITE1
0128-ED 39 34         73 ( 13)     out0 (ITC),a
012B-                 74
012B-FB               75 (  3)    ei      ; enable interrupts
012C-                 76
0080-                 77       KBD_DATA    .equ $80
0081-                 78       KBD_STATUS  .equ $81
012C-                 79
012C-                 80       main:
012C-21 7A 02         81 (  9)     ld hl,str_welcome ; show welcome message
012F-CD 5B 02         82 ( 16)     call asci1_puts
0132-                 83
0132-                 84           ; init kbd
0132-3E 00            85 (  6)     ld a,0
0134-32 01 21         86 ( 13)     ld (kbd_buffer_pos),a
0137-32 00 21         87 ( 13)     ld (kbd_state),a
013A-                 88
013A-                 89       loop:
013A-                 90        ;in0 a,(KBD_DATA)
013A-                 91        ;   call decode_scancode
013A-3A 01 21         92 ( 12)     ld a,(kbd_buffer_pos)
013D-FE 00            93 (  6)     cp $0
013F-CA 3A 01         94 ( 6+)     jp Z,loop
0142-CD 4B 01         95 ( 16)     call kbd_get_key
0145-                 96          ; ld a,(kbd_buffer_pos)
0145-CD 6B 02         97 ( 16)     call asci1_putc
0148-C3 3A 01         98 (  9)     jp loop
014B-                 99
014B-                100       ; Get next key in buffer
014B-                101       kbd_get_key:
014B-E5              102 ( 11)     push hl
014C-D5              103 ( 11)     push de
014D-3A 01 21        104 ( 12)     ld a,(kbd_buffer_pos)
0150-3D              105 (  4)     dec a
0151-32 01 21        106 ( 13)     ld (kbd_buffer_pos),a
0154-16 00           107 (  6)     ld d,0
0156-5F              108 (  4)     ld e,a
0157-21 02 21        109 (  9)     ld hl,kbd_buffer
015A-19              110 (  7)     add hl,de
015B-7E              111 (  6)     ld a,(hl)
015C-                112
015C-D1              113 (  9)     pop de
015D-E1              114 (  9)     pop hl
015E-C9              115 (  9)     ret
015F-                116
015F-                117       ; Keyboard Interruption
015F-                118       int_kbd:
015F-F5              119 ( 11)     push af
0160-C5              120 ( 11)     push bc
0161-D5              121 ( 11)     push de
0162-E5              122 ( 11)     push hl
0163-                123
0163-ED 38 80        124 ( 12)     in0 a,(KBD_DATA)            ; read scancode
0166-47              125 (  4)     ld b,a                      ; stored in B register
0167-                126
0167-                127       int_kbd_test_F0:
0167-                128           ;cp $70                      ; F0 = release key
0167-FE F0           129 (  6)     cp $F0
0169-C2 74 01        130 ( 6+)     jp NZ,int_kbd_test_E0
016C-                131
016C-21 00 21        132 (  9)     ld hl,kbd_state             ; set F0 flag in kbd_state
016F-CB DE           133 ( 13)     set KBD_STATE_F0,(hl)
0171-C3 3B 02        134 (  9)     jp int_kbd_exit
0174-                135
0174-                136       int_kbd_test_E0:
0174-FE 60           137 (  6)     cp $60                      ; E0 = extended scancodes
0176-C2 81 01        138 ( 6+)     jp NZ,int_kbd_check_state
0179-                139
0179-21 00 21        140 (  9)     ld hl,kbd_state             ; set E0 flag in kbd_state
017C-CB E6           141 ( 13)     set KBD_STATE_E0,(hl)
017E-C3 3B 02        142 (  9)     jp int_kbd_exit
0181-                143
0181-                144       int_kbd_check_state:
0181-3A 00 21        145 ( 12)     ld a,(kbd_state)
0184-                146
0184-CB 5F           147 (  6)     bit KBD_STATE_F0,a          ; if previous scancode was F0, jumps to F0 routine
0186-C2 1C 02        148 ( 6+)     jp NZ,int_kbd_F0            ; (release key)
0189-                149
0189-CB 67           150 (  6)     bit KBD_STATE_E0,a          ; if previous scancode was E0, jumps to E0 routinr
018B-C2 15 02        151 ( 6+)     jp NZ,int_kbd_E0            ; (extended scancode)
018E-                152
018E-                153       int_kbd_shift:                  ; manage SHIFT key
018E-78              154 (  4)     ld a,b
018F-FE 12           155 (  6)     cp $12 ; lshift
0191-CA 99 01        156 ( 6+)     jp Z,int_kbd_is_shift
0194-FE 59           157 (  6)     cp $59 ; rshift
0196-C2 A1 01        158 ( 6+)     jp NZ,int_kbd_alt
0199-                159
0199-                160       int_kbd_is_shift:
0199-21 00 21        161 (  9)     ld hl,kbd_state             ; set SHIFT flag in kbd_state
019C-CB C6           162 ( 13)     set KBD_STATE_SHIFT,(hl)
019E-C3 3B 02        163 (  9)     jp int_kbd_exit
01A1-                164
01A1-                165       int_kbd_alt:                    ; manage ALT key
01A1-FE 11           166 (  6)     cp $11
01A3-C2 AE 01        167 ( 6+)     jp NZ,int_kbd_capslock
01A6-                168
01A6-21 00 21        169 (  9)     ld hl,kbd_state             ; set ALT flag in kbd_state
01A9-CB CE           170 ( 13)     set KBD_STATE_ALT,(hl)
01AB-C3 3B 02        171 (  9)     jp int_kbd_exit
01AE-                172
01AE-                173       int_kbd_capslock:                ; manage CAPS LOCK key
01AE-FE 58           174 (  6)     cp $58
01B0-C2 BD 01        175 ( 6+)     jp NZ,int_kbd_get_key
01B3-                176
01B3-21 00 21        177 (  9)     ld hl,kbd_state
01B6-7E              178 (  6)     ld a,(hl)                   ; toggle CAPS LOCK flag in kbd_stte
01B7-EE 04           179 (  6)     xor KBD_XOR_CAPS
01B9-77              180 (  7)     ld (hl),a
01BA-C3 3B 02        181 (  9)     jp int_kbd_exit
01BD-                182
01BD-                183       int_kbd_get_key:
01BD-16 00           184 (  6)     ld d,0                      ; hl <- kbd_buffer+(kbd_buffer_pos)
01BF-3A 01 21        185 ( 12)     ld a,(kbd_buffer_pos)
01C2-5F              186 (  4)     ld e,a
01C3-21 02 21        187 (  9)     ld hl,kbd_buffer
01C6-19              188 (  7)     add hl,de
01C7-E5              189 ( 11)     push hl                     ; save current buffer pointer on stack (1)
01C8-                190
01C8-2A 00 21        191 ( 15)     ld hl,(kbd_state)
01CB-                192
01CB-                193       int_kbd_get_key_caps:
01CB-3E 01           194 (  6)     ld  a,1                    ; a==1 -> lowercase , a==0 -> shift
01CD-                195
01CD-CB 56           196 (  9)     bit KBD_STATE_CAPS,(hl)
01CF-CA D4 01        197 ( 6+)     jp Z,int_kbd_get_key_shift
01D2-EE 01           198 (  6)     xor 1                      ; a<-0 (shift)
01D4-                199
01D4-                200       int_kbd_get_key_shift:
01D4-CB 46           201 (  9)     bit KBD_STATE_SHIFT,(hl)
01D6-CA DB 01        202 ( 6+)     jp Z,int_kbd_get_key_set_shift
01D9-EE 01           203 (  6)     xor 1                       ; flip a
01DB-                204
01DB-                205       int_kbd_get_key_set_shift:
01DB-21 1B 03        206 (  9)     ld hl,scan_codes_shift
01DE-EE 01           207 (  6)     xor 1
01E0-CA F3 01        208 ( 6+)     jp Z,int_kbd_get_key_scancode
01E3-                209
01E3-21 00 21        210 (  9)     ld hl,kbd_state
01E6-CB 4E           211 (  9)     bit KBD_STATE_ALT,(hl)      ; use ALT scancode set if ALT flag==1
01E8-CA F0 01        212 ( 6+)     jp Z,int_kbd_get_key_set_lowcase
01EB-21 9E 03        213 (  9)     ld hl,scan_codes_alt
01EE-18 03           214 (  8)     jr int_kbd_get_key_scancode
01F0-                215
01F0-                216       int_kbd_get_key_set_lowcase:
01F0-21 98 02        217 (  9)     ld hl,scan_codes
01F3-                218
01F3-                219
01F3-                220       int_kbd_get_key_scancode:
01F3-78              221 (  4)     ld a,b
01F4-CD 8E 02        222 ( 16)     call kbd_decode_scancode
01F7-E1              223 (  9)     pop hl                      ; get back current buffer pointer (see 1)
01F8-                224
01F8-FE 00           225 (  6)     cp 0                        ; do nothing if no code found
01FA-CA 3B 02        226 ( 6+)     jp Z,int_kbd_exit
01FD-                227
01FD-77              228 (  7)     ld (hl),a                   ; save it to  kbd_buffer+(kbd_buffer_pos)
01FE-                229
01FE-FE 0A           230 (  6)     cp 10                       ; insert CR if ASCII code == LF (10)
0200-C2 0C 02        231 ( 6+)     jp NZ,kbd_int_incr_buffer_pos
0203-23              232 (  4)     inc hl
0204-3E 0D           233 (  6)     ld a,13
0206-77              234 (  7)     ld (hl),a
0207-7B              235 (  4)     ld a,e
0208-3C              236 (  4)     inc a
0209-32 01 21        237 ( 13)     ld (kbd_buffer_pos),a
020C-                238
020C-                239       kbd_int_incr_buffer_pos:
020C-3A 01 21        240 ( 12)     ld a,(kbd_buffer_pos)               ; inc kbd_buffer_pos
020F-3C              241 (  4)     inc a
0210-32 01 21        242 ( 13)     ld (kbd_buffer_pos),a
0213-18 26           243 (  8)     jr int_kbd_exit
0215-                244
0215-                245       int_kbd_E0:
0215-21 00 21        246 (  9)     ld hl,kbd_state                     ; clear E0 flag in kbd_state
0218-CB A6           247 ( 13)     res KBD_STATE_E0,(hl)
021A-18 1F           248 (  8)     jr int_kbd_exit
021C-                249
021C-                250       int_kbd_F0:
021C-21 00 21        251 (  9)    ld hl,kbd_state                      ; clear F0 flag in kbd_state
021F-CB 9E           252 ( 13)    res KBD_STATE_F0,(hl)
0221-                253
0221-78              254 (  4)    ld a,b                               ; clear SHIFT flag if key was LSHIFT
0222-FE 12           255 (  6)    cp $12 ; LSHIFT
0224-C2 2B 02        256 ( 6+)    jp NZ,int_kbd_F0_rshift
0227-CB 86           257 ( 13)    res KBD_STATE_SHIFT,(hl)
0229-18 10           258 (  8)    jr int_kbd_exit
022B-                259
022B-                260       int_kbd_F0_rshift:                      ; clear SHIFT flag if key was LSHIFT
022B-FE 59           261 (  6)    cp $59 ; RSHIFT
022D-C2 34 02        262 ( 6+)    jp NZ,int_kbd_F0_alt
0230-CB 86           263 ( 13)    res KBD_STATE_SHIFT,(hl)
0232-18 07           264 (  8)    jr int_kbd_exit
0234-                265
0234-                266       int_kbd_F0_alt:                         ; clear ALT flag if key was LSHIFT
0234-FE 11           267 (  6)    cp $11 ; ALT
0236-C2 3B 02        268 ( 6+)    jp NZ,int_kbd_exit
0239-CB 8E           269 ( 13)    res KBD_STATE_ALT,(hl)
023B-                270
023B-                271       int_kbd_exit:                           ; end of keyboard interrupt routine.
023B-E1              272 (  9)     pop hl
023C-D1              273 (  9)     pop de
023D-C1              274 (  9)     pop bc
023E-F1              275 (  9)     pop af
023F-FB              276 (  3)     ei
0240-C9              277 (  9)     ret
0241-                278
0241-                279
0241-                280       ; -----------------------------------------------------------------
0241-                281
0241-                282       ; initialize asci1
0241-                283       asci1_init:
0241-                284
0241-                285           ; RE : Receiver Enable
0241-                286           ; TE : Transmitter Enable
0241-                287           ; MOD2 : 8 bits data ( No parity, 1 stop bit)
0241-3E 64           288 (  6)     ld a,CNTLA1_RE|CNTLA1_TE|CNTLA1_MOD2
0243-ED 39 01        289 ( 13)     out0 (CNTLA1),a
0246-                290
0246-                291           ; DR=0
0246-3E 00           292 (  6)     ld a,0
0248-ED 39 03        293 ( 13)     out0 (CNTLB1),a
024B-                294
024B-                295           ; BRG0 : Enable 16 bit BRG counter
024B-                296           ; X1 ( + DR=0) : Clock mode = /1
024B-3E 18           297 (  6)     ld a,ASEXT1_BRG1|ASEXT1_X1
024D-ED 39 13        298 ( 13)     out0 (ASEXT1),a
0250-                299
0250-                300           ; 9600 bauds : TC=1665 (681H) --> 9603 bauds
0250-                301           ; TC = fphi/(2*baud rate*clock mode) - 2
0250-                302           ; TC = 32000000/(2*9600*1) - 2
0250-3E 81           303 (  6)     ld a,$81
0252-ED 39 1C        304 ( 13)     out0 (ASTC1L),a
0255-3E 06           305 (  6)     ld a,$06
0257-ED 39 1D        306 ( 13)     out0 (ASTC1H),a
025A-                307
025A-C9              308 (  9)     ret
025B-                309
025B-                310       ; put a string on asci1
025B-                311       ; input : (hl) = address of null terminated string
025B-                312       asci1_puts:
025B-E5              313 ( 11)     push hl
025C-F5              314 ( 11)     push af
025D-                315
025D-                316       asci1_puts_loop:
025D-7E              317 (  6)     ld a,(hl)
025E-F6 00           318 (  6)     or 0
0260-28 06           319 ( 6+)     jr z,asci1_puts_exit
0262-CD 6B 02        320 ( 16)     call asci1_putc
0265-23              321 (  4)     inc hl
0266-18 F5           322 (  8)     jr asci1_puts_loop
0268-                323
0268-                324       asci1_puts_exit:
0268-F1              325 (  9)     pop af
0269-E1              326 (  9)     pop hl
026A-C9              327 (  9)     ret
026B-                328
026B-                329
026B-                330
026B-                331       ; put a char on asci1
026B-                332       ; input : a = char ascii code
026B-                333       asci1_putc:
026B-F5              334 ( 11)     push af
026C-                335
026C-                336       asci1_putc_wait:  ; wait for asci0 TX ready
026C-ED 38 05        337 ( 12)     in0 a,(STAT1) ; TDRE=1 -> empty
026F-E6 02           338 (  6)     and STAT1_TDRE
0271-28 F9           339 ( 6+)     jr Z,asci1_putc_wait
0273-F1              340 (  9)     pop af
0274-ED 39 07        341 ( 13)     out0 (TDR1),a ; output the char to asci0
0277-C9              342 (  9)     ret
0278-                343
0278-                344
0278-                345       int_noop:
0278-FB              346 (  3)     ei
0279-C9              347 (  9)     ret
027A-                348
027A-                349
027A-1B 5B 32 4A 
     1B 5B 48 54 
     65 73 74 20 
     4B 62 64 0D 
     0A 0D 0A 00     350       str_welcome:    .db $1B,"[2J",$1B,"[H","Test Kbd",13,10,13,10,0
028E-                351
028E-                352
028E-                353       ; input : a = scan code, hl = pointer to scan code table
028E-                354       ; output : a = decoded scan code
028E-                355       kbd_decode_scancode:
028E-E5              356 ( 11)     push hl
028F-D5              357 ( 11)     push de
0290-                358
0290-                359           ;ld hl,scan_codes
0290-16 00           360 (  6)     ld d,0
0292-5F              361 (  4)     ld e,a
0293-19              362 (  7)     add hl,de
0294-7E              363 (  6)     ld a,(hl)
0295-                364
0295-                365       decode_scancode_exit:
0295-                366
0295-D1              367 (  9)     pop de
0296-E1              368 (  9)     pop hl
0297-C9              369 (  9)     ret
0298-                370
0298-                371
0298-                372       scan_codes:
0298-                373           ; 00-0F : n/a F9 n/a F5 F3 F1 F2 F12 n/a F10 F8 F6 F4 TAB ² n/a
0298-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     09 C2 B2 00     374           .db 0,0,0,0,0,0,0,0,0,0,0,0,9,'²',0
02A8-                375           ; 10-1F : n/a n/a LSHIFT n/a n/a a & n/a n/a n/a n/a w s q z é n/a
02A8-00 00 00 00 
     00 61 26 00 
     00 00 77 73 
     71 7A 82 00     376           .db 0,0,0,0,0,'a','&',0,0,0,'w','s','q','z',130,0
02B8-                377           ; 20-2F : n/a c x d e ' " n/a n/a SPACE v f t r ( n/a
02B8-00 63 78 64 
     65 27 22 00 
     00 20 76 66 
     74 72 28 00     378           .db 0,'c','x','d','e',39,34,0,0,' ','v','f','t','r','(',0
02C8-                379           ; 30-3F : n/a n b h g y - n/a n/a n/a , j u è _ n/a
02C8-00 6E 62 68 
     67 79 2D 00 
     00 00 2C 6A 
     75 8A 5F 00     380           .db 0,'n','b','h','g','y','-',0,0,0,',','j','u',138,'_',0
02D8-                381           ; 40-4F : n/a ; k i o à ç n/a n/a : ! l m p ) n/a
02D8-00 3B 6B 69 
     6F 85 87 00 
     00 3A 21 6C 
     6D 70 29 00     382           .db 0,59,'k','i','o',133,135,0,0,':','!','l','m','p',')',0
02E8-                383           ; 50-5F : n/a n/a ù n/a ^ = n/a n/a CAPS RSHIFT RETURN $ n/a * n/a n/a
02E8-00 00 97 00 
     5E 3D 00 00 
     00 00 0A 24 
     00 2A 00 00     384           .db 0,0,151,0,'^','=',0,0,0,0,10,'$',0,'*',0,0
02F8-                385           ; 60-6F : n/a < n/a n/a n/a n/a BACKSPACE n/a n/a PAD_1 n/a PAD_4 PAD_7 n/a n/a n/a
02F8-00 3C 00 00 
     00 00 08 00 
     00 31 00 34 
     37 00 00 00     386           .db 0,'<',0,0,0,0,8,0,0,'1',0,'4','7',0,0,0
0308-                387           ; 70-7F : PAD_0 PAD_, PAD_2 PAD_5 PAD_6 PAD_8 ESC P_VERNUM F11 PAD_+ PAD_3 PAD_- PAD_* PAD_9 ARRET_DEFIL
0308-30 2C 32 35 
     36 38 00 00 
     00 2B 33 2D 
     2A 39 00        388           .db '0',',','2','5','6','8',0,0,0,'+','3','-','*','9',0
0317-                389           ; 80-83 : n/a n/a n/a F7
0317-00 00 00 00     390           .db 0,0,0,0
031B-                391
031B-                392       scan_codes_shift:
031B-                393           ; 00-0F : n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a TAB n/a n/a
031B-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     00 09 00 00     394           .db 0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0
032B-                395           ; 10-1F : n/a n/a n/a n/a n/a A 1 n/a n/a n/a n/a W S Q Z 2 n/a
032B-00 00 00 00 
     00 41 31 00 
     00 00 57 53 
     51 5A 32 00     396           .db 0,0,0,0,0,'A','1',0,0,0,'W','S','Q','Z','2',0
033B-                397           ; 20-2F : n/a C X D E 4 3 n/a n/a SPACE V F T R 5 n/a
033B-00 43 58 44 
     45 34 33 00 
     00 20 56 46 
     54 52 35 00     398           .db 0,'C','X','D','E','4','3',0,0,' ','V','F','T','R','5',0
034B-                399           ; 30-3F : n/a N B H G Y 6 n/a n/a n/a ? J U 7 8 n/a
034B-00 4E 42 48 
     47 59 36 00 
     00 00 3F 4A 
     55 37 38 00     400           .db 0,'N','B','H','G','Y','6',0,0,0,'?','J','U','7','8',0
035B-                401           ; 40-4F : n/a . K I O 0 9 n/a n/a / § L M P ° n/a
035B-00 2E 4B 49 
     4F 30 39 00 
     00 2F 9E 4C 
     4D 50 A7 00     402           .db 0,'.','K','I','O','0','9',0,0,'/',158,'L','M','P',167,0
036B-                403           ; 50-5F : n/a n/a % n/a ¨ + n/a n/a CAPS RSHIFT RETURN £ n/a µ n/a n/a
036B-00 00 25 00 
     7E 2B 00 00 
     00 00 0A 9C 
     00 E6 00 00     404           .db 0,0,'%',0,126,'+',0,0,0,0,10,156,0,230,0,0
037B-                405           ; 60-6F : n/a > n/a n/a n/a n/a BACKSPACE n/a n/a PAD_1 n/a PAD_4 PAD_7 n/a n/a n/a
037B-00 3E 00 00 
     00 00 08 00 
     00 31 00 34 
     37 00 00 00     406           .db 0,'>',0,0,0,0,8,0,0,'1',0,'4','7',0,0,0
038B-                407           ; 70-7F : PAD_0 PAD_, PAD_2 PAD_5 PAD_6 PAD_8 ESC P_VERNUM F11 PAD_+ PAD_3 PAD_- PAD_* PAD_9 ARRET_DEFIL
038B-30 2C 32 35 
     36 38 00 00 
     00 2B 33 2D 
     2A 39 00        408           .db '0',',','2','5','6','8',0,0,0,'+','3','-','*','9',0
039A-                409           ; 80-83 : n/a n/a n/a F7
039A-00 00 00 00     410           .db 0,0,0,0
039E-                411
039E-                412       scan_codes_alt:
039E-                413           ; 00-0F : n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a
039E-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     00 00 00 00     414           .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
03AE-                415           ; 10-1F : n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a ~ n/a
03AE-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     00 00 7E 00     416           .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,'~',0
03BE-                417           ; 20-2F : n/a n/a n/a n/a n/a { # n/a n/a SPACE n/a n/a n/a n/a [ n/a
03BE-00 00 00 00 
     00 7B 23 00 
     00 20 00 00 
     00 00 5B 00     418           .db 0,0,0,0,0,'{','#',0,0,' ',0,0,0,0,'[',0
03CE-                419           ; 30-3F : n/a n/a n/a n/a n/a n/a | n/a n/a n/a n/a n/a n/a ` \ n/a
03CE-00 00 00 00 
     00 00 7C 00 
     00 00 00 00 
     00 60 5C 00     420           .db 0,0,0,0,0,0,'|',0,0,0,0,0,0,'`',92,0
03DE-                421           ; 40-4F : n/a n/a n/a n/a n/a @ ^ n/a n/a n/a n/a n/a n/a n/a ] n/a
03DE-00 00 00 00 
     00 40 5E 00 
     00 00 00 00 
     00 00 5D 00     422           .db 0,0,0,0,0,'@','^',0,0,0,0,0,0,0,']',0
03EE-                423           ; 50-5F : n/a n/a n/a n/a n/a } n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a
03EE-00 00 00 00 
     00 7D 00 00 
     00 00 00 00 
     00 00 00 00     424           .db 0,0,0,0,0,'}',0,0,0,0,0,0,0,0,0,0
03FE-                425           ; 60-6F : n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a
03FE-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     00 00 00 00     426           .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
040E-                427           ; 70-7F : n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a n/a
040E-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     00 00 00 00     428           .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
041E-                429           ; 80-83 : n/a n/a n/a F7
041E-00 00 00 00     430           .db 0,0,0,0
0422-                431
0422-                432
2100-                433           .org $2100
2100-                434
2100-                435       ; bit 0 : shift
2100-                436       ; bit 1 : alt
2100-                437       ; bit 2 : caps lock
0000-                438       KBD_STATE_SHIFT .equ 0
0001-                439       KBD_STATE_ALT .equ 1
0002-                440       KBD_STATE_CAPS .equ 2
0003-                441       KBD_STATE_F0   .equ 3
0004-                442       KBD_STATE_E0  .equ 4
2100-                443
0004-                444       KBD_XOR_CAPS .equ 4
2100-                445
2100-                446       kbd_state: .bs 1
2101-                447
2101-                448       kbd_buffer_pos:    .bs 1
2102-                449       kbd_buffer: .bs 64
